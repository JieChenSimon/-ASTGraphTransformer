{
  "contracts": {
    "source code": {
      "Balance": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5061025c806100206000396000f3fe608060405234801561001057600080fd5b5060043610610052577c0100000000000000000000000000000000000000000000000000000000600035046327e235e381146100575780634e71d92d1461009c575b600080fd5b61008a6004803603602081101561006d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166100a6565b60408051918252519081900360200190f35b6100a46100b8565b005b60006020819052908152604090205481565b336000818152602081905260409020546100d291906100e4565b33600090815260208190526040812055565b6040805160008082526020820190925273ffffffffffffffffffffffffffffffffffffffff84169083906040518082805190602001908083835b6020831061013d5780518252601f19909201916020918201910161011e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461019f576040519150601f19603f3d011682016040523d82523d6000602084013e6101a4565b606091505b50509050806101fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806102046023913960400191505060405180910390fd5b50505056fe5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c4544a26469706673582212200519a4a9045779d7cd4185618a8f939145e4b51cd40e65e06f79f65116c0b77264736f6c634300060c0033",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x25C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x52 JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0x27E235E3 DUP2 EQ PUSH2 0x57 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x9C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xA4 PUSH2 0xB8 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xD2 SWAP2 SWAP1 PUSH2 0xE4 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x13D JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x11E JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x19F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1A4 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x204 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP INVALID SLOAD PUSH19 0x616E7366657248656C7065723A204554485F54 MSTORE COINBASE 0x4E MSTORE8 CHAINID GASLIMIT MSTORE 0x5F CHAINID COINBASE 0x49 0x4C GASLIMIT DIFFICULTY LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV NOT LOG4 0xA9 DIV JUMPI PUSH26 0xD7CD4185618A8F939145E4B51CD40E65E06F79F65116C0B77264 PUSH20 0x6F6C634300060C00330000000000000000000000 ",
            "sourceMap": "9305:376:0:-:0;;;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"Balance\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "BalanceStorage": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"BalanceStorage\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "Context": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"Context\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "Maintainer": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"Maintainer\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "Ownable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "Round": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b50610255806100206000396000f3fe608060405234801561001057600080fd5b506004361061007e577c010000000000000000000000000000000000000000000000000000000060003504636150ef6b81146100835780638c65c81f1461009d578063a32bf597146100e7578063aa8c217c14610115578063ddca3f431461011d578063ee5f8c8f14610125575b600080fd5b61008b61012d565b60408051918252519081900360200190f35b6100ba600480360360208110156100b357600080fd5b503561014c565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b6100ef61018e565b604080519485526020850193909352838301919091526060830152519081900360800190f35b61008b61020d565b61008b610213565b61008b610219565b60035460009015610145575060035460001901610149565b5060005b90565b6003818154811061015957fe5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff90931694509092909185565b600080600080600061019e61012d565b905080600382815481106101ae57fe5b906000526020600020906005020160010154600383815481106101cd57fe5b906000526020600020906005020160020154600384815481106101ec57fe5b90600052602060002090600502016004015494509450945094505090919293565b60015481565b60005481565b6002548156fea264697066735822122018722180a9a8a80b66daa909f31d51a6b6f0ae7dfd5ed9771d552f720d327e4a64736f6c634300060c0033",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x255 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7E JUMPI PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV PUSH4 0x6150EF6B DUP2 EQ PUSH2 0x83 JUMPI DUP1 PUSH4 0x8C65C81F EQ PUSH2 0x9D JUMPI DUP1 PUSH4 0xA32BF597 EQ PUSH2 0xE7 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0xEE5F8C8F EQ PUSH2 0x125 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8B PUSH2 0x12D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xBA PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x14C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 ISZERO ISZERO DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP5 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0x18E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 RETURN JUMPDEST PUSH2 0x8B PUSH2 0x20D JUMP JUMPDEST PUSH2 0x8B PUSH2 0x213 JUMP JUMPDEST PUSH2 0x8B PUSH2 0x219 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x145 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x0 NOT ADD PUSH2 0x149 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x159 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0xFF SWAP1 SWAP4 AND SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x19E PUSH2 0x12D JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1AE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x3 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1CD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x3 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0x1EC JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 XOR PUSH19 0x2180A9A8A80B66DAA909F31D51A6B6F0AE7DFD 0x5E 0xD9 PUSH24 0x1D552F720D327E4A64736F6C634300060C00330000000000 ",
            "sourceMap": "660:1584:0:-:0;;;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"Round\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "RoundStorage": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Submitted for verification at Etherscan.io on 2021-03-21\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"RoundStorage\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "RunningMan": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60806040523480156200001157600080fd5b5060405162001b7538038062001b75833981810160405260a08110156200003757600080fd5b5080516020820151604083015160608401516080909401519293919290919060006200006b64010000000062000102810204565b60008054600160a060020a031916600160a060020a0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600185905560028390556003829055600784905560068054600160a060020a031916600160a060020a038316179055620000f764010000000062000107810204565b505050505062000274565b335b90565b6040805160a0810182526000808252426020830190815292820181815260018054606085019081526002546080860190815260048054938401815590945293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6005909202918201805460ff191691151591909117905593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c850155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909101556200022964010000000062000254810204565b6040517f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a2565b600454600090156200026e57506004546000190162000104565b50600090565b6118f180620002846000396000f3fe608060405260043610610152576000357c0100000000000000000000000000000000000000000000000000000000900480639850d32b116100c8578063b0a794591161008c578063b0a7945914610449578063b2c0ccc814610482578063d826f88f14610497578063ddca3f43146104ac578063ee5f8c8f146104c1578063f2fde38b146104d657610152565b80639850d32b14610367578063998f1b801461037c5780639e639858146103e4578063a32bf597146103f9578063aa8c217c1461043457610152565b80636150ef6b1161011a5780636150ef6b1461022a5780636454e58d1461023f578063715018a6146102a0578063776e11dd146102b55780638c65c81f146102df5780638da5cb5b1461033657610152565b806311610c251461015757806313ea5d2914610161578063247d9bb91461019457806327e235e3146101d05780634e71d92d14610215575b600080fd5b61015f610509565b005b34801561016d57600080fd5b5061015f6004803603602081101561018457600080fd5b5035600160a060020a03166107bc565b3480156101a057600080fd5b5061015f600480360360808110156101b757600080fd5b5080359060208101359060408101359060600135610846565b3480156101dc57600080fd5b50610203600480360360208110156101f357600080fd5b5035600160a060020a03166108b5565b60408051918252519081900360200190f35b34801561022157600080fd5b5061015f6108c7565b34801561023657600080fd5b506102036108f3565b34801561024b57600080fd5b506102786004803603604081101561026257600080fd5b5080359060200135600160a060020a0316610912565b6040518083815260200182600381111561028e57fe5b81526020019250505060405180910390f35b3480156102ac57600080fd5b5061015f6109f9565b3480156102c157600080fd5b50610203600480360360208110156102d857600080fd5b5035610aab565b3480156102eb57600080fd5b506103096004803603602081101561030257600080fd5b5035610abd565b60408051951515865260208601949094528484019290925260608401526080830152519081900360a00190f35b34801561034257600080fd5b5061034b610aff565b60408051600160a060020a039092168252519081900360200190f35b34801561037357600080fd5b5061034b610b0e565b34801561038857600080fd5b506103ac6004803603604081101561039f57600080fd5b5080359060200135610b1d565b6040518084600160a060020a031681526020018381526020018260038111156103d157fe5b8152602001935050505060405180910390f35b3480156103f057600080fd5b50610203610b69565b34801561040557600080fd5b5061040e610b6f565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561044057600080fd5b50610203610bee565b34801561045557600080fd5b506102036004803603604081101561046c57600080fd5b5080359060200135600160a060020a0316610bf4565b34801561048e57600080fd5b50610203610cab565b3480156104a357600080fd5b5061015f610d23565b3480156104b857600080fd5b50610203610ddd565b3480156104cd57600080fd5b50610203610de3565b3480156104e257600080fd5b5061015f600480360360208110156104f957600080fd5b5035600160a060020a0316610de9565b60006105136108f3565b90506004818154811061052257fe5b906000526020600020906005020160040154341461058a576040805160e560020a62461bcd02815260206004820152601960248201527f4552524f523a20616d6f756e74206e6f7420616c6c6f77656400000000000000604482015290519081900360640190fd5b6004818154811061059757fe5b9060005260206000209060050201600201546000146106265742600482815481106105be57fe5b9060005260206000209060050201600201541015610626576040805160e560020a62461bcd02815260206004820152601460248201527f4552524f523a20726f756e64206973206f766572000000000000000000000000604482015290519081900360640190fd5b6000805b60008381526008602052604090205481101561068a57600083815260086020526040902080543391908390811061065d57fe5b6000918252602090912060039091020154600160a060020a0316141561068257600191505b60010161062a565b5080156106e1576040805160e560020a62461bcd02815260206004820152601260248201527f4552524f523a20616c7265616479206265740000000000000000000000000000604482015290519081900360640190fd5b806107b85760008281526008602090815260408083208151606081018352338152348185019081529281018581528254600180820185559387529490952081516003958602909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091178155925183830155935160028301805493949193909260ff1990911691849081111561077957fe5b02179055505050610788610ef4565b6040513490339084907fca49f418dd97ad76b84ed6fb8e915ecccb519c5379cf6a4a455c2be7618fda2f90600090a45b5050565b6107c4610f52565b600054600160a060020a03908116911614610817576040805160e560020a62461bcd0281526020600482018190526024820152600080516020611850833981519152604482015290519081900360640190fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b61084e610f52565b600054600160a060020a039081169116146108a1576040805160e560020a62461bcd0281526020600482018190526024820152600080516020611850833981519152604482015290519081900360640190fd5b600193909355600291909155600355600755565b60056020526000908152604090205481565b336000818152600560205260409020546108e19190610f56565b33600090815260056020526040812055565b6004546000901561090b57506004546000190161090f565b5060005b90565b60008060005b6000858152600860205260409020548110156109e95760008581526008602052604090208054600160a060020a03861691908390811061095457fe5b6000918252602090912060039091020154600160a060020a031614156109e157600085815260086020526040902080548290811061098e57fe5b9060005260206000209060030201600101546008600087815260200190815260200160002082815481106109be57fe5b600091825260209091206002600390920201015490935060ff1691506109f29050565b600101610918565b50600080915091505b9250929050565b610a01610f52565b600054600160a060020a03908116911614610a54576040805160e560020a62461bcd0281526020600482018190526024820152600080516020611850833981519152604482015290519081900360640190fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60009081526008602052604090205490565b60048181548110610aca57fe5b60009182526020909120600590910201805460018201546002830154600384015460049094015460ff90931694509092909185565b600054600160a060020a031690565b600654600160a060020a031681565b60086020528160005260406000208181548110610b3657fe5b6000918252602090912060039091020180546001820154600290920154600160a060020a03909116935090915060ff1683565b60075481565b6000806000806000610b7f6108f3565b90508060048281548110610b8f57fe5b90600052602060002090600502016001015460048381548110610bae57fe5b90600052602060002090600502016002015460048481548110610bcd57fe5b90600052602060002090600502016004015494509450945094505090919293565b60025481565b600454600090600019018311610ca15760005b600084815260086020526040902054811015610c9f5760008481526008602052604090208054600160a060020a038516919083908110610c4357fe5b6000918252602090912060039091020154600160a060020a03161415610c97576000848152600860205260409020805482908110610c7d57fe5b906000526020600020906003020160010154915050610ca5565b600101610c07565b505b5060005b92915050565b600080610cb66108f3565b90506000805b600083815260086020526040902054811015610d1c5760008381526008602052604090208054610d12919083908110610cf157fe5b9060005260206000209060030201600101548361105190919063ffffffff16565b9150600101610cbc565b5091505090565b600654600160a060020a03163314610d6f5760405160e560020a62461bcd0281526004018080602001828103825260298152602001806118936029913960400191505060405180910390fd5b610d776110b5565b610dcb576040805160e560020a62461bcd02815260206004820152601860248201527f4552524f523a20726f756e64206973206e6f74206f7665720000000000000000604482015290519081900360640190fd5b610dd361111c565b610ddb61118b565b565b60015481565b60035481565b610df1610f52565b600054600160a060020a03908116911614610e44576040805160e560020a62461bcd0281526020600482018190526024820152600080516020611850833981519152604482015290519081900360640190fd5b600160a060020a038116610e8c5760405160e560020a62461bcd0281526004018080602001828103825260268152602001806118096026913960400191505060405180910390fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000610efe6108f3565b905060048181548110610f0d57fe5b90600052602060002090600502016002015460001415610f4f57600354420160048281548110610f3957fe5b9060005260206000209060050201600201819055505b50565b3390565b60408051600080825260208201909252600160a060020a0384169083906040518082805190602001908083835b60208310610fa25780518252601f199092019160209182019101610f83565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611004576040519150601f19603f3d011682016040523d82523d6000602084013e611009565b606091505b505090508061104c5760405160e560020a62461bcd0281526004018080602001828103825260238152602001806118706023913960400191505060405180910390fd5b505050565b6000828201838110156110ae576040805160e560020a62461bcd02815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806110c06108f3565b9050600481815481106110cf57fe5b906000526020600020906005020160020154600014156110f357600091505061090f565b426004828154811061110157fe5b9060005260206000209060050201600201541091505061090f565b60006111266108f3565b905061113181611193565b60016004828154811061114057fe5b60009182526020822060059190910201805460ff19169215159290921790915560405182917faa97d4a7b3afec5f55c25ca8593dde6929d4455fad650a16fa4334004293a61891a250565b610ddb6114a1565b6007546000828152600860205260408120546305f5e100926111c19184916111bb91906115e3565b9061163f565b9050600081116112af5760005b6000848152600860205260409020548110156112a9576000848152600860205260409020805461125291908390811061120357fe5b60009182526020808320600390920290910154878352600890915260409091208054600160a060020a03909216918490811061123b57fe5b906000526020600020906003020160010154610f56565b60008481526008602052604090208054600391908390811061127057fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561129c57fe5b02179055506001016111ce565b5061104c565b6000805b60008581526008602052604090205481101561139e57600085815260086020526040902080546112e8919083908110610cf157fe5b9150828110156113465760008581526008602052604090208054600191908390811061131057fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561133c57fe5b0217905550611396565b60008581526008602052604090208054600291908390811061136457fe5b906000526020600020906003020160020160006101000a81548160ff0219169083600381111561139057fe5b02179055505b6001016112b3565b5060006113c2620f42406111bb60646111bb600154876115e390919063ffffffff16565b90506113d56113cf610aff565b82610f56565b6113df8282611681565b915060006113ed838561163f565b905060005b8481101561148157600087815260086020526040902080548391908390811061141757fe5b90600052602060002090600302016001018190555061146d60086000898152602001908152602001600020828154811061144d57fe5b6000918252602090912060039091020154600160a060020a0316836116c3565b6114778483611681565b93506001016113f2565b50821561149957611499611493610aff565b84610f56565b505050505050565b6040805160a0810182526000808252426020830190815292820181815260018054606085019081526002546080860190815260048054938401815590945293517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b6005909202918201805460ff191691151591909117905593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c850155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d84015590517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f909101556115b86108f3565b6040517f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a2565b6000826115f257506000610ca5565b828202828482816115ff57fe5b04146110ae5760405160e560020a62461bcd02815260040180806020018281038252602181526020018061182f6021913960400191505060405180910390fd5b60006110ae83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611706565b60006110ae83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506117ab565b600160a060020a0382166000908152600560205260409020546116e69082611051565b600160a060020a0390921660009081526005602052604090209190915550565b600081836117955760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561175a578181015183820152602001611742565b50505050905090810190601f1680156117875780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816117a157fe5b0495945050505050565b600081848411156118005760405160e560020a62461bcd02815260206004820181815283516024840152835190928392604490910191908501908083836000831561175a578181015183820152602001611742565b50505090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725472616e7366657248656c7065723a204554485f5452414e534645525f4641494c45444552524f523a207065726d697373696f6e2064656e6965642c206f6e6c79206d61696e7461696e6572a26469706673582212203341f4f0c5d6d429f49dd0b328d146574b850c667e5a64aac7174d151927d1a064736f6c634300060c0033",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1B75 CODESIZE SUB DUP1 PUSH3 0x1B75 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0xA0 DUP2 LT ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 DUP3 ADD MLOAD PUSH1 0x40 DUP4 ADD MLOAD PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x80 SWAP1 SWAP5 ADD MLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x0 PUSH3 0x6B PUSH5 0x100000000 PUSH3 0x102 DUP2 MUL DIV JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x1 DUP6 SWAP1 SSTORE PUSH1 0x2 DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 SWAP1 SSTORE PUSH1 0x7 DUP5 SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND OR SWAP1 SSTORE PUSH3 0xF7 PUSH5 0x100000000 PUSH3 0x107 DUP2 MUL DIV JUMP JUMPDEST POP POP POP POP POP PUSH3 0x274 JUMP JUMPDEST CALLER JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE TIMESTAMP PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE SWAP3 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x60 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 SLOAD PUSH1 0x80 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP1 SLOAD SWAP4 DUP5 ADD DUP2 SSTORE SWAP1 SWAP5 MSTORE SWAP4 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B PUSH1 0x5 SWAP1 SWAP3 MUL SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP4 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19C DUP6 ADD SSTORE MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19D DUP5 ADD SSTORE SWAP1 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19E DUP4 ADD SSTORE MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19F SWAP1 SWAP2 ADD SSTORE PUSH3 0x229 PUSH5 0x100000000 PUSH3 0x254 DUP2 MUL DIV JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x33A701182892FD888ED152CA2AC23771A32E814469B7CD255965471E1AF3A659 SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH3 0x26E JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x0 NOT ADD PUSH3 0x104 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x18F1 DUP1 PUSH3 0x284 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x152 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x9850D32B GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xB0A79459 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xB0A79459 EQ PUSH2 0x449 JUMPI DUP1 PUSH4 0xB2C0CCC8 EQ PUSH2 0x482 JUMPI DUP1 PUSH4 0xD826F88F EQ PUSH2 0x497 JUMPI DUP1 PUSH4 0xDDCA3F43 EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0xEE5F8C8F EQ PUSH2 0x4C1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4D6 JUMPI PUSH2 0x152 JUMP JUMPDEST DUP1 PUSH4 0x9850D32B EQ PUSH2 0x367 JUMPI DUP1 PUSH4 0x998F1B80 EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x9E639858 EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0xA32BF597 EQ PUSH2 0x3F9 JUMPI DUP1 PUSH4 0xAA8C217C EQ PUSH2 0x434 JUMPI PUSH2 0x152 JUMP JUMPDEST DUP1 PUSH4 0x6150EF6B GT PUSH2 0x11A JUMPI DUP1 PUSH4 0x6150EF6B EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x6454E58D EQ PUSH2 0x23F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x776E11DD EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x8C65C81F EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x336 JUMPI PUSH2 0x152 JUMP JUMPDEST DUP1 PUSH4 0x11610C25 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0x13EA5D29 EQ PUSH2 0x161 JUMPI DUP1 PUSH4 0x247D9BB9 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x27E235E3 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x215 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F PUSH2 0x509 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x184 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x7BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x1B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x40 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x60 ADD CALLDATALOAD PUSH2 0x846 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x8B5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x8C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0x8F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x278 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x912 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x28E JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0x9F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xAAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x309 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x302 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xABD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP6 ISZERO ISZERO DUP7 MSTORE PUSH1 0x20 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP5 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0xA0 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34B PUSH2 0xAFF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34B PUSH2 0xB0E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x388 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x3D1 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0xB69 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x405 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40E PUSH2 0xB6F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x80 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0xBEE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x455 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0xBF4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x48E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0xCAB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH2 0xD23 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0xDDD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x203 PUSH2 0xDE3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x4F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0xDE9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x513 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x522 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD CALLVALUE EQ PUSH2 0x58A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20616D6F756E74206E6F7420616C6C6F77656400000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x597 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ PUSH2 0x626 JUMPI TIMESTAMP PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x5BE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT ISZERO PUSH2 0x626 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20726F756E64206973206F766572000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x68A JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD CALLER SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x65D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x682 JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x62A JUMP JUMPDEST POP DUP1 ISZERO PUSH2 0x6E1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20616C7265616479206265740000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x7B8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x60 DUP2 ADD DUP4 MSTORE CALLER DUP2 MSTORE CALLVALUE DUP2 DUP6 ADD SWAP1 DUP2 MSTORE SWAP3 DUP2 ADD DUP6 DUP2 MSTORE DUP3 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP6 SSTORE SWAP4 DUP8 MSTORE SWAP5 SWAP1 SWAP6 KECCAK256 DUP2 MLOAD PUSH1 0x3 SWAP6 DUP7 MUL SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR DUP2 SSTORE SWAP3 MLOAD DUP4 DUP4 ADD SSTORE SWAP4 MLOAD PUSH1 0x2 DUP4 ADD DUP1 SLOAD SWAP4 SWAP5 SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 0xFF NOT SWAP1 SWAP2 AND SWAP2 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 0x779 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP POP POP PUSH2 0x788 PUSH2 0xEF4 JUMP JUMPDEST PUSH1 0x40 MLOAD CALLVALUE SWAP1 CALLER SWAP1 DUP5 SWAP1 PUSH32 0xCA49F418DD97AD76B84ED6FB8E915ECCCB519C5379CF6A4A455C2BE7618FDA2F SWAP1 PUSH1 0x0 SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7C4 PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x817 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1850 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x84E PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x8A1 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1850 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x2 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x3 SSTORE PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x8E1 SWAP2 SWAP1 PUSH2 0xF56 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 ISZERO PUSH2 0x90B JUMPI POP PUSH1 0x4 SLOAD PUSH1 0x0 NOT ADD PUSH2 0x90F JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x954 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0x9E1 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x98E JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x8 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x9BE JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x2 PUSH1 0x3 SWAP1 SWAP3 MUL ADD ADD SLOAD SWAP1 SWAP4 POP PUSH1 0xFF AND SWAP2 POP PUSH2 0x9F2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x918 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SWAP2 POP SWAP2 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xA01 PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xA54 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1850 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xACA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 DUP5 ADD SLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SLOAD PUSH1 0xFF SWAP1 SWAP4 AND SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 DUP6 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE DUP2 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xB36 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP4 POP SWAP1 SWAP2 POP PUSH1 0xFF AND DUP4 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xB7F PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xB8F JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x1 ADD SLOAD PUSH1 0x4 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0xBAE JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x4 DUP5 DUP2 SLOAD DUP2 LT PUSH2 0xBCD JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP POP SWAP1 SWAP2 SWAP3 SWAP4 JUMP JUMPDEST PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x0 NOT ADD DUP4 GT PUSH2 0xCA1 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xC9F JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xC43 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0xC7D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP POP PUSH2 0xCA5 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xC07 JUMP JUMPDEST POP JUMPDEST POP PUSH1 0x0 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCB6 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xD1C JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0xD12 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xCF1 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD DUP4 PUSH2 0x1051 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xCBC JUMP JUMPDEST POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xD6F JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x29 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1893 PUSH1 0x29 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD77 PUSH2 0x10B5 JUMP JUMPDEST PUSH2 0xDCB JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4552524F523A20726F756E64206973206E6F74206F7665720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xDD3 PUSH2 0x111C JUMP JUMPDEST PUSH2 0xDDB PUSH2 0x118B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xDF1 PUSH2 0xF52 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xE44 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1850 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0xE8C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1809 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFE PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xF0D JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0xF4F JUMPI PUSH1 0x3 SLOAD TIMESTAMP ADD PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0xF39 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP1 DUP4 SWAP1 PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0xFA2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xF83 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1004 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1009 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x104C JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1870 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x10AE JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x10C0 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x4 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x10CF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x10F3 JUMPI PUSH1 0x0 SWAP2 POP POP PUSH2 0x90F JUMP JUMPDEST TIMESTAMP PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1101 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD LT SWAP2 POP POP PUSH2 0x90F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1126 PUSH2 0x8F3 JUMP JUMPDEST SWAP1 POP PUSH2 0x1131 DUP2 PUSH2 0x1193 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x4 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x1140 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x5 SWAP2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP2 PUSH32 0xAA97D4A7B3AFEC5F55C25CA8593DDE6929D4455FAD650A16FA4334004293A618 SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0xDDB PUSH2 0x14A1 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH4 0x5F5E100 SWAP3 PUSH2 0x11C1 SWAP2 DUP5 SWAP2 PUSH2 0x11BB SWAP2 SWAP1 PUSH2 0x15E3 JUMP JUMPDEST SWAP1 PUSH2 0x163F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 GT PUSH2 0x12AF JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x12A9 JUMPI PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x1252 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1203 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x3 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD DUP8 DUP4 MSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 DUP5 SWAP1 DUP2 LT PUSH2 0x123B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD SLOAD PUSH2 0xF56 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1270 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x129C JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x11CE JUMP JUMPDEST POP PUSH2 0x104C JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x12E8 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0xCF1 JUMPI INVALID JUMPDEST SWAP2 POP DUP3 DUP2 LT ISZERO PUSH2 0x1346 JUMPI PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1310 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x133C JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x1396 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x2 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1364 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x2 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1390 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x12B3 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x13C2 PUSH3 0xF4240 PUSH2 0x11BB PUSH1 0x64 PUSH2 0x11BB PUSH1 0x1 SLOAD DUP8 PUSH2 0x15E3 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH2 0x13D5 PUSH2 0x13CF PUSH2 0xAFF JUMP JUMPDEST DUP3 PUSH2 0xF56 JUMP JUMPDEST PUSH2 0x13DF DUP3 DUP3 PUSH2 0x1681 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 PUSH2 0x13ED DUP4 DUP6 PUSH2 0x163F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0x1481 JUMPI PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 0x1417 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x3 MUL ADD PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP PUSH2 0x146D PUSH1 0x8 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x144D JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP4 PUSH2 0x16C3 JUMP JUMPDEST PUSH2 0x1477 DUP5 DUP4 PUSH2 0x1681 JUMP JUMPDEST SWAP4 POP PUSH1 0x1 ADD PUSH2 0x13F2 JUMP JUMPDEST POP DUP3 ISZERO PUSH2 0x1499 JUMPI PUSH2 0x1499 PUSH2 0x1493 PUSH2 0xAFF JUMP JUMPDEST DUP5 PUSH2 0xF56 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE TIMESTAMP PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE SWAP3 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 0x1 DUP1 SLOAD PUSH1 0x60 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 SLOAD PUSH1 0x80 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP1 SLOAD SWAP4 DUP5 ADD DUP2 SSTORE SWAP1 SWAP5 MSTORE SWAP4 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B PUSH1 0x5 SWAP1 SWAP3 MUL SWAP2 DUP3 ADD DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP4 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19C DUP6 ADD SSTORE MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19D DUP5 ADD SSTORE SWAP1 MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19E DUP4 ADD SSTORE MLOAD PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19F SWAP1 SWAP2 ADD SSTORE PUSH2 0x15B8 PUSH2 0x8F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x33A701182892FD888ED152CA2AC23771A32E814469B7CD255965471E1AF3A659 SWAP1 PUSH1 0x0 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x15F2 JUMPI POP PUSH1 0x0 PUSH2 0xCA5 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x15FF JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x10AE JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x182F PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x10AE DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A206469766973696F6E206279207A65726F000000000000 DUP2 MSTORE POP PUSH2 0x1706 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10AE DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH2 0x17AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x16E6 SWAP1 DUP3 PUSH2 0x1051 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH2 0x1795 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x175A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1742 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1787 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP4 DUP6 DUP2 PUSH2 0x17A1 JUMPI INVALID JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x1800 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 0x24 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 0x44 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 DUP4 ISZERO PUSH2 0x175A JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1742 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F2061646472657373536166654D6174683A206D756C746970 PUSH13 0x69636174696F6E206F76657266 PUSH13 0x6F774F776E61626C653A206361 PUSH13 0x6C6572206973206E6F74207468 PUSH6 0x206F776E6572 SLOAD PUSH19 0x616E7366657248656C7065723A204554485F54 MSTORE COINBASE 0x4E MSTORE8 CHAINID GASLIMIT MSTORE 0x5F CHAINID COINBASE 0x49 0x4C GASLIMIT DIFFICULTY GASLIMIT MSTORE MSTORE 0x4F MSTORE GASPRICE KECCAK256 PUSH17 0x65726D697373696F6E2064656E6965642C KECCAK256 PUSH16 0x6E6C79206D61696E7461696E6572A264 PUSH10 0x706673582212203341F4 CREATE 0xC5 0xD6 0xD4 0x29 DELEGATECALL SWAP14 0xD0 0xB3 0x28 0xD1 CHAINID JUMPI 0x4B DUP6 0xC PUSH7 0x7E5A64AAC7174D ISZERO NOT 0x27 0xD1 LOG0 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
            "sourceMap": "13612:5437:0:-:0;;;13955:332;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13955:332:0;;;;;;;;;;;;;;;;;;;;;;;;;;11922:17;11942:12;:10;;;;:12;:::i;:::-;11964:6;:18;;-1:-1:-1;;;;;;11964:18:0;-1:-1:-1;;;;;11964:18:0;;;;;;;11997:43;;11964:18;;-1:-1:-1;11964:18:0;11997:43;;11964:6;;11997:43;-1:-1:-1;14123:3:0;:10;;;14143:6;:16;;;14169:9;:22;;;14201:10;:24;;;14235:10;:24;;-1:-1:-1;;;;;;14235:24:0;-1:-1:-1;;;;;14235:24:0;;;;;14270:10;:8;;;;:10;:::i;:::-;13955:332;;;;;13612:5437;;10653:104;10740:10;10653:104;;:::o;1942:300::-;1993:188;;;;;;;;-1:-1:-1;1993:188:0;;;2054:3;1993:188;;;;;;;;;;;;;2139:3;;1993:188;;;;;;2164:6;;1993:188;;;;;;1981:6;:201;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1981:201:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2211:23;:21;;;;:23;:::i;:::-;2198:37;;;;;;;1942:300::o;876:169::-;952:6;:13;929:7;;952:17;948:72;;-1:-1:-1;992:6:0;:13;-1:-1:-1;;992:17:0;985:24;;948:72;-1:-1:-1;1037:1:0;876:169;:::o;13612:5437::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"playerBet\",\"type\":\"uint256\"},{\"internalType\":\"enum RunningMan.State\",\"name\":\"playerState\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getRoundPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maintainer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"enum RunningMan.State\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_maintainer\",\"type\":\"address\"}],\"name\":\"setMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_roundTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winPercent\",\"type\":\"uint256\"}],\"name\":\"setRules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"RunningMan\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "SafeMath": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203775deb6a7305343863ce15c811cb7c1e48fcbd7543bb13c88314f1c6ff49b4b64736f6c634300060c0033",
            "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY PUSH22 0xDEB6A7305343863CE15C811CB7C1E48FCBD7543BB13C DUP9 BALANCE 0x4F SHR PUSH16 0xF49B4B64736F6C634300060C00330000 ",
            "sourceMap": "4447:4578:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations with added overflow checks. Arithmetic operations in Solidity wrap on overflow. This can easily result in bugs, because programmers usually assume that an overflow raises an error, which is the standard behavior in high level programming languages. `SafeMath` restores this intuition by reverting the transaction when an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      },
      "TransferHelper": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f8e3ccc91b51af55e5a6a96c7a0e10babe5fd0948ea4d9e65b032f1c361b380564736f6c634300060c0033",
            "opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF8 0xE3 0xCC 0xC9 SHL MLOAD 0xAF SSTORE 0xE5 0xA6 0xA9 PUSH13 0x7A0E10BABE5FD0948EA4D9E65B SUB 0x2F SHR CALLDATASIZE SHL CODESIZE SDIV PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
            "sourceMap": "2438:1350:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"source code\":\"TransferHelper\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-03-21\\n*/\\n\\n// Dependency file: contracts/Round.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract RoundStorage {\\n    // fee to owner of this game\\n    // fee value = real fee percent value * (10**6)\\n    uint256 public fee;\\n\\n    // amount players can bet\\n    uint256 public amount;\\n\\n    // number of seconds of a round\\n    uint public roundTime;\\n\\n    struct Round {\\n        // round is over and calculated reward or no\\n        bool finalized;\\n\\n        uint startTime;\\n        uint endTime;\\n        uint256 fee;\\n        uint256 amount;\\n    }\\n\\n    Round[] public rounds;\\n}\\n\\ncontract Round is RoundStorage {\\n    event Bet(uint256 indexed round, address indexed player, uint256 indexed amount);\\n    event RoundStarted(uint256 indexed round);\\n    event RoundEnded(uint256 indexed round);\\n\\n    function getCurrentRoundNumber() public view returns(uint256) {\\n        if (rounds.length > 0) {\\n            return rounds.length - 1;\\n        }\\n\\n        return 0;\\n    }\\n\\n    function getCurrentRound() public view returns (uint256 number, uint start, uint end, uint256 betAmount) {\\n        uint256 currentRoundNumber = getCurrentRoundNumber();\\n        return (\\n            currentRoundNumber,\\n            rounds[currentRoundNumber].startTime,\\n            rounds[currentRoundNumber].endTime,\\n            rounds[currentRoundNumber].amount\\n        );\\n    }\\n\\n    function updateRoundFirstDeposit() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            rounds[currentRound].endTime = now + roundTime;\\n        }\\n    }\\n\\n    function roundOver() internal view returns(bool) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        if (rounds[currentRound].endTime == 0) {\\n            return false;\\n        } else {\\n            return rounds[currentRound].endTime < now;\\n        }\\n    }\\n\\n    function newRound() internal {\\n        rounds.push(Round({\\n            finalized: false,\\n            startTime: now,\\n            endTime: 0, // the round start when have 1 deposit\\n            fee: fee,\\n            amount: amount\\n        }));\\n\\n        emit RoundStarted(getCurrentRoundNumber());\\n    }\\n}\\n\\n\\n// Dependency file: contracts/TransferHelper.sol\\n\\n\\n// pragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Balance.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n\\nabstract contract BalanceStorage {\\n    mapping(address => uint256) public balances;\\n}\\n// <yes> Reentrancy\\ncontract Balance is BalanceStorage {\\n    using SafeMath for uint256;\\n\\n    // user claim their reward\\n    function claim() public {\\n        TransferHelper.safeTransferETH(msg.sender, balances[msg.sender]);\\n        balances[msg.sender] = 0;\\n    }\\n\\n    function addBalance(address _user, uint256 _amount) internal {\\n        balances[_user] = balances[_user].add(_amount);\\n    }\\n}\\n\\n\\n// Dependency file: contracts/Maintainer.sol\\n\\n\\n// pragma solidity 0.6.12;\\n\\n\\nabstract contract Maintainer {\\n    address public maintainer;\\n\\n    modifier onlyMaintainer() {\\n        require(msg.sender == maintainer, \\\"ERROR: permission denied, only maintainer\\\");\\n        _;\\n    }\\n\\n    function setMaintainer(address _maintainer) external virtual;\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/GSN/Context.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\n\\n// Dependency file: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// pragma solidity ^0.6.0;\\n\\n// import \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\n\\n// Root file: contracts/RunningMan.sol\\n\\n\\npragma solidity 0.6.12;\\n\\n// import \\\"contracts/Round.sol\\\";\\n// import \\\"contracts/Balance.sol\\\";\\n// import \\\"contracts/Maintainer.sol\\\";\\n// import \\\"contracts/TransferHelper.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract RunningMan is Ownable, Round, Balance, Maintainer {\\n    using SafeMath for uint256;\\n    uint256 public winPercent;\\n\\n    enum State {\\n        UNDEFINED, WIN, LOSE, REFUND\\n    }\\n\\n    struct Player {\\n        address payable addr;\\n        uint256 balance;\\n        State state;\\n    }\\n\\n    mapping(uint256 => Player[]) public players;\\n\\n    constructor(\\n        uint256 _fee,\\n        uint256 _winPercent,\\n        uint256 _amount,\\n        uint256 _roundTime,\\n        address _maintainer\\n    ) public {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n        maintainer = _maintainer;\\n\\n        newRound();\\n    }\\n\\n    // get total bet in this round\\n    function getCurrentRoundBalance() public view returns(uint256 balance) {\\n        uint256 currentRound = getCurrentRoundNumber();\\n\\n        uint256 total;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            total = total.add(players[currentRound][i].balance);\\n        }\\n        return total;\\n    }\\n\\n    // player get their info in single round\\n    function getPlayer(uint256 _round, address payable _player) public view returns(uint256 playerBet, State playerState) {\\n        for (uint256 i=0; i<players[_round].length; i++) {\\n            if (players[_round][i].addr == _player) {\\n                return (players[_round][i].balance, players[_round][i].state);\\n            }\\n        }\\n\\n        return (0, State.UNDEFINED);\\n    }\\n\\n    // get total players of current round\\n    function getRoundPlayers(uint256 _round) public view returns(uint256) {\\n        return players[_round].length;\\n    }\\n\\n    // player get their balance in single round\\n    function getBalance(uint256 _round, address payable _player) public view returns(uint256) {\\n        if (_round <= rounds.length - 1) {\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                if (players[_round][i].addr == _player) {\\n                    return players[_round][i].balance;\\n                }\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function bet() public payable {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        require(msg.value == rounds[currentRound].amount, \\\"ERROR: amount not allowed\\\");\\n        if (rounds[currentRound].endTime !=0 )\\n            require(rounds[currentRound].endTime >= now, \\\"ERROR: round is over\\\");\\n\\n        bool isBet;\\n        for (uint256 i=0; i<players[currentRound].length; i++) {\\n            if (players[currentRound][i].addr == msg.sender) {\\n                isBet = true;\\n            }\\n        }\\n\\n        require(isBet == false, \\\"ERROR: already bet\\\");\\n        \\n        if (!isBet) {\\n            players[currentRound].push(Player({\\n                addr: msg.sender,\\n                balance: msg.value,\\n                state: State.UNDEFINED\\n            }));\\n\\n            updateRoundFirstDeposit();\\n            emit Bet(currentRound, msg.sender, msg.value);\\n        }\\n    }\\n\\n    // open new round\\n    function _open() internal {\\n        newRound();\\n    }\\n\\n    function _end() internal {\\n        uint256 currentRound = getCurrentRoundNumber();\\n        _calculate(currentRound);\\n        rounds[currentRound].finalized = true;\\n\\n        emit RoundEnded(currentRound);\\n    }\\n\\n    // calculate winners and profit\\n    function _calculate(uint256 _round) internal {\\n        uint256 onePercent = 100*(10**6);\\n        uint256 numberOfWinners = players[_round].length.mul(winPercent).div(onePercent);\\n\\n        if (numberOfWinners <= 0) {\\n            // not enough players to play the game\\n            // refund to user\\n            for (uint256 i=0 ;i<players[_round].length; i++) {\\n                TransferHelper.safeTransferETH(players[_round][i].addr, players[_round][i].balance);\\n                players[_round][i].state = State.REFUND;\\n            }\\n        } else {\\n            uint256 totalReward;\\n            for (uint256 i=0; i<players[_round].length; i++) {\\n                totalReward = totalReward.add(players[_round][i].balance);\\n                if (i < numberOfWinners) {\\n                    players[_round][i].state = State.WIN;\\n                } else {\\n                    players[_round][i].state = State.LOSE;\\n                }\\n            }\\n\\n            uint256 feeAmount = totalReward.mul(fee).div(100).div(10**6);\\n            TransferHelper.safeTransferETH(owner(), feeAmount);\\n            totalReward = totalReward.sub(feeAmount);\\n\\n            uint256 winAmount = totalReward.div(numberOfWinners);\\n            for (uint256 i=0; i<numberOfWinners; i++) {\\n                players[_round][i].balance = winAmount;\\n                addBalance(players[_round][i].addr, winAmount);\\n                totalReward = totalReward.sub(winAmount);\\n            }\\n\\n            if (totalReward > 0) {\\n                TransferHelper.safeTransferETH(owner(), totalReward);\\n            }\\n        }\\n    }\\n\\n    function setRules(uint256 _fee, uint256 _amount, uint256 _roundTime, uint256 _winPercent) public onlyOwner {\\n        fee = _fee;\\n        amount = _amount;\\n        roundTime = _roundTime;\\n        winPercent = _winPercent;\\n    }\\n\\n    function setMaintainer(address _maintainer) public override onlyOwner {\\n        maintainer = _maintainer;\\n    }\\n\\n    // require the round is over\\n    // only maintainer address can trigger\\n    function reset() public onlyMaintainer {\\n        require(roundOver(), \\\"ERROR: round is not over\\\");\\n        _end();\\n        _open();\\n    }\\n}\",\"keccak256\":\"0xef8c331186f9cba057565721d432134a08fece0b3f89f2c4d4e058f07d3c479d\",\"license\":\"MIT\"}},\"version\":1}"
      }
    }
  },
  "sources": {
    "source code": {
      "ast": {
        "absolutePath": "source code",
        "exportedSymbols": {
          "Balance": [
            572
          ],
          "BalanceStorage": [
            525
          ],
          "Context": [
            613
          ],
          "Maintainer": [
            592
          ],
          "Ownable": [
            719
          ],
          "Round": [
            168
          ],
          "RoundStorage": [
            22
          ],
          "RunningMan": [
            1370
          ],
          "SafeMath": [
            520
          ],
          "TransferHelper": [
            326
          ]
        },
        "id": 1371,
        "license": "MIT",
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "abstract": true,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": {
              "id": 1,
              "nodeType": "StructuredDocumentation",
              "src": "0:65:0",
              "text": "Submitted for verification at Etherscan.io on 2021-03-21"
            },
            "fullyImplemented": true,
            "id": 22,
            "linearizedBaseContracts": [
              22
            ],
            "name": "RoundStorage",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "ddca3f43",
                "id": 3,
                "mutability": "mutable",
                "name": "fee",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 22,
                "src": "292:18:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "292:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "aa8c217c",
                "id": 5,
                "mutability": "mutable",
                "name": "amount",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 22,
                "src": "347:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "347:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "ee5f8c8f",
                "id": 7,
                "mutability": "mutable",
                "name": "roundTime",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 22,
                "src": "411:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 6,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "411:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "canonicalName": "RoundStorage.Round",
                "id": 18,
                "members": [
                  {
                    "constant": false,
                    "id": 9,
                    "mutability": "mutable",
                    "name": "finalized",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 18,
                    "src": "515:14:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "typeName": {
                      "id": 8,
                      "name": "bool",
                      "nodeType": "ElementaryTypeName",
                      "src": "515:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 11,
                    "mutability": "mutable",
                    "name": "startTime",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 18,
                    "src": "540:14:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 10,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "540:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 13,
                    "mutability": "mutable",
                    "name": "endTime",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 18,
                    "src": "564:12:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 12,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "564:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 15,
                    "mutability": "mutable",
                    "name": "fee",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 18,
                    "src": "586:11:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 14,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "586:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 17,
                    "mutability": "mutable",
                    "name": "amount",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 18,
                    "src": "607:14:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 16,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "607:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "Round",
                "nodeType": "StructDefinition",
                "scope": 22,
                "src": "439:189:0",
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "8c65c81f",
                "id": 21,
                "mutability": "mutable",
                "name": "rounds",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 22,
                "src": "634:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                  "typeString": "struct RoundStorage.Round[]"
                },
                "typeName": {
                  "baseType": {
                    "contractScope": null,
                    "id": 19,
                    "name": "Round",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 18,
                    "src": "634:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Round_$18_storage_ptr",
                      "typeString": "struct RoundStorage.Round"
                    }
                  },
                  "id": 20,
                  "length": null,
                  "nodeType": "ArrayTypeName",
                  "src": "634:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage_ptr",
                    "typeString": "struct RoundStorage.Round[]"
                  }
                },
                "value": null,
                "visibility": "public"
              }
            ],
            "scope": 1371,
            "src": "170:488:0"
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 23,
                  "name": "RoundStorage",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 22,
                  "src": "678:12:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_RoundStorage_$22",
                    "typeString": "contract RoundStorage"
                  }
                },
                "id": 24,
                "nodeType": "InheritanceSpecifier",
                "src": "678:12:0"
              }
            ],
            "contractDependencies": [
              22
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 168,
            "linearizedBaseContracts": [
              168,
              22
            ],
            "name": "Round",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": null,
                "id": 32,
                "name": "Bet",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 31,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 26,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 32,
                      "src": "707:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 25,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "707:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 28,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "player",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 32,
                      "src": "730:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 27,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "730:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 30,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 32,
                      "src": "754:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 29,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "754:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "706:71:0"
                },
                "src": "697:81:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 36,
                "name": "RoundStarted",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 35,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 34,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 36,
                      "src": "802:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 33,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "802:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "801:23:0"
                },
                "src": "783:42:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 40,
                "name": "RoundEnded",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 39,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 38,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 40,
                      "src": "847:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 37,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "847:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "846:23:0"
                },
                "src": "830:40:0"
              },
              {
                "body": {
                  "id": 58,
                  "nodeType": "Block",
                  "src": "938:107:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 48,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 45,
                            "name": "rounds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 21,
                            "src": "952:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                              "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                            }
                          },
                          "id": 46,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "952:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 47,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "968:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "952:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 55,
                      "nodeType": "IfStatement",
                      "src": "948:72:0",
                      "trueBody": {
                        "id": 54,
                        "nodeType": "Block",
                        "src": "971:49:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 52,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 49,
                                  "name": "rounds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "992:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                    "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                  }
                                },
                                "id": 50,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "992:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 51,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1008:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "992:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "functionReturnParameters": 44,
                            "id": 53,
                            "nodeType": "Return",
                            "src": "985:24:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 56,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1037:1:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "functionReturnParameters": 44,
                      "id": 57,
                      "nodeType": "Return",
                      "src": "1030:8:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "6150ef6b",
                "id": 59,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getCurrentRoundNumber",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 41,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "906:2:0"
                },
                "returnParameters": {
                  "id": 44,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 43,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 59,
                      "src": "929:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 42,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "929:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "928:9:0"
                },
                "scope": 168,
                "src": "876:169:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 90,
                  "nodeType": "Block",
                  "src": "1156:273:0",
                  "statements": [
                    {
                      "assignments": [
                        71
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 71,
                          "mutability": "mutable",
                          "name": "currentRoundNumber",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 90,
                          "src": "1166:26:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 70,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1166:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 74,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 72,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "1195:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 73,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1195:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1166:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "id": 75,
                            "name": "currentRoundNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 71,
                            "src": "1249:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 76,
                                "name": "rounds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "1281:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                  "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                }
                              },
                              "id": 78,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 77,
                                "name": "currentRoundNumber",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 71,
                                "src": "1288:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1281:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Round_$18_storage",
                                "typeString": "struct RoundStorage.Round storage ref"
                              }
                            },
                            "id": 79,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "startTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 11,
                            "src": "1281:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 80,
                                "name": "rounds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "1331:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                  "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                }
                              },
                              "id": 82,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 81,
                                "name": "currentRoundNumber",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 71,
                                "src": "1338:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1331:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Round_$18_storage",
                                "typeString": "struct RoundStorage.Round storage ref"
                              }
                            },
                            "id": 83,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "endTime",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 13,
                            "src": "1331:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 84,
                                "name": "rounds",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 21,
                                "src": "1379:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                  "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                }
                              },
                              "id": 86,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 85,
                                "name": "currentRoundNumber",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 71,
                                "src": "1386:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1379:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Round_$18_storage",
                                "typeString": "struct RoundStorage.Round storage ref"
                              }
                            },
                            "id": 87,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "amount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 17,
                            "src": "1379:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "id": 88,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "1235:187:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$",
                          "typeString": "tuple(uint256,uint256,uint256,uint256)"
                        }
                      },
                      "functionReturnParameters": 69,
                      "id": 89,
                      "nodeType": "Return",
                      "src": "1228:194:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "a32bf597",
                "id": 91,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getCurrentRound",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 60,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1075:2:0"
                },
                "returnParameters": {
                  "id": 69,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 62,
                      "mutability": "mutable",
                      "name": "number",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 91,
                      "src": "1099:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 61,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1099:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 64,
                      "mutability": "mutable",
                      "name": "start",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 91,
                      "src": "1115:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 63,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1115:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 66,
                      "mutability": "mutable",
                      "name": "end",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 91,
                      "src": "1127:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 65,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1127:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 68,
                      "mutability": "mutable",
                      "name": "betAmount",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 91,
                      "src": "1137:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 67,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1137:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1098:57:0"
                },
                "scope": 168,
                "src": "1051:378:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 116,
                  "nodeType": "Block",
                  "src": "1479:182:0",
                  "statements": [
                    {
                      "assignments": [
                        95
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 95,
                          "mutability": "mutable",
                          "name": "currentRound",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 116,
                          "src": "1489:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 94,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1489:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 98,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 96,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "1512:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 97,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1512:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1489:46:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 99,
                              "name": "rounds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "1549:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                              }
                            },
                            "id": 101,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 100,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 95,
                              "src": "1556:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1549:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Round_$18_storage",
                              "typeString": "struct RoundStorage.Round storage ref"
                            }
                          },
                          "id": 102,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "endTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 13,
                          "src": "1549:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1581:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1549:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 115,
                      "nodeType": "IfStatement",
                      "src": "1545:110:0",
                      "trueBody": {
                        "id": 114,
                        "nodeType": "Block",
                        "src": "1584:71:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 112,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 105,
                                    "name": "rounds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 21,
                                    "src": "1598:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                      "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                    }
                                  },
                                  "id": 107,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 106,
                                    "name": "currentRound",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 95,
                                    "src": "1605:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1598:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Round_$18_storage",
                                    "typeString": "struct RoundStorage.Round storage ref"
                                  }
                                },
                                "id": 108,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "memberName": "endTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 13,
                                "src": "1598:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 111,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 109,
                                  "name": "now",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -17,
                                  "src": "1629:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 110,
                                  "name": "roundTime",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 7,
                                  "src": "1635:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1629:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1598:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 113,
                            "nodeType": "ExpressionStatement",
                            "src": "1598:46:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": null,
                "id": 117,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "updateRoundFirstDeposit",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 92,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1467:2:0"
                },
                "returnParameters": {
                  "id": 93,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1479:0:0"
                },
                "scope": 168,
                "src": "1435:226:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 145,
                  "nodeType": "Block",
                  "src": "1716:220:0",
                  "statements": [
                    {
                      "assignments": [
                        123
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 123,
                          "mutability": "mutable",
                          "name": "currentRound",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 145,
                          "src": "1726:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 122,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1726:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 126,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 124,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "1749:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1749:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1726:46:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 127,
                              "name": "rounds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "1786:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                              }
                            },
                            "id": 129,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 128,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 123,
                              "src": "1793:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1786:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Round_$18_storage",
                              "typeString": "struct RoundStorage.Round storage ref"
                            }
                          },
                          "id": 130,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "endTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 13,
                          "src": "1786:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 131,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1818:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1786:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 143,
                        "nodeType": "Block",
                        "src": "1864:66:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 141,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 136,
                                    "name": "rounds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 21,
                                    "src": "1885:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                      "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                    }
                                  },
                                  "id": 138,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 137,
                                    "name": "currentRound",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 123,
                                    "src": "1892:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1885:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Round_$18_storage",
                                    "typeString": "struct RoundStorage.Round storage ref"
                                  }
                                },
                                "id": 139,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "endTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 13,
                                "src": "1885:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 140,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -17,
                                "src": "1916:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1885:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "functionReturnParameters": 121,
                            "id": 142,
                            "nodeType": "Return",
                            "src": "1878:41:0"
                          }
                        ]
                      },
                      "id": 144,
                      "nodeType": "IfStatement",
                      "src": "1782:148:0",
                      "trueBody": {
                        "id": 135,
                        "nodeType": "Block",
                        "src": "1821:37:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "hexValue": "66616c7365",
                              "id": 133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1842:5:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            "functionReturnParameters": 121,
                            "id": 134,
                            "nodeType": "Return",
                            "src": "1835:12:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": null,
                "id": 146,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "roundOver",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 118,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1685:2:0"
                },
                "returnParameters": {
                  "id": 121,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 120,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 146,
                      "src": "1710:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 119,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1710:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1709:6:0"
                },
                "scope": 168,
                "src": "1667:269:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 166,
                  "nodeType": "Block",
                  "src": "1971:271:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "66616c7365",
                                "id": 153,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "bool",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2024:5:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "value": "false"
                              },
                              {
                                "argumentTypes": null,
                                "id": 154,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -17,
                                "src": "2054:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 155,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2080:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              {
                                "argumentTypes": null,
                                "id": 156,
                                "name": "fee",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3,
                                "src": "2139:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 157,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5,
                                "src": "2164:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 152,
                              "name": "Round",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 18,
                              "src": "1993:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_struct$_Round_$18_storage_ptr_$",
                                "typeString": "type(struct RoundStorage.Round storage pointer)"
                              }
                            },
                            "id": 158,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "structConstructorCall",
                            "lValueRequested": false,
                            "names": [
                              "finalized",
                              "startTime",
                              "endTime",
                              "fee",
                              "amount"
                            ],
                            "nodeType": "FunctionCall",
                            "src": "1993:188:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Round_$18_memory_ptr",
                              "typeString": "struct RoundStorage.Round memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_Round_$18_memory_ptr",
                              "typeString": "struct RoundStorage.Round memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 149,
                            "name": "rounds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 21,
                            "src": "1981:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                              "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                            }
                          },
                          "id": 151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "push",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1981:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Round_$18_storage_$returns$__$",
                            "typeString": "function (struct RoundStorage.Round storage ref)"
                          }
                        },
                        "id": 159,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1981:201:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 160,
                      "nodeType": "ExpressionStatement",
                      "src": "1981:201:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 162,
                              "name": "getCurrentRoundNumber",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 59,
                              "src": "2211:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 163,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2211:23:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 161,
                          "name": "RoundStarted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 36,
                          "src": "2198:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2198:37:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 165,
                      "nodeType": "EmitStatement",
                      "src": "2193:42:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 167,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "newRound",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 147,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1959:2:0"
                },
                "returnParameters": {
                  "id": 148,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1971:0:0"
                },
                "scope": 168,
                "src": "1942:300:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 1371,
            "src": "660:1584:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": null,
            "fullyImplemented": true,
            "id": 326,
            "linearizedBaseContracts": [
              326
            ],
            "name": "TransferHelper",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 210,
                  "nodeType": "Block",
                  "src": "2536:285:0",
                  "statements": [
                    {
                      "assignments": [
                        178,
                        180
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 178,
                          "mutability": "mutable",
                          "name": "success",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 210,
                          "src": "2612:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 177,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "2612:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 180,
                          "mutability": "mutable",
                          "name": "data",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 210,
                          "src": "2626:17:0",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 179,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2626:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 190,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30783039356561376233",
                                "id": 185,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2681:10:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_157198259_by_1",
                                  "typeString": "int_const 157198259"
                                },
                                "value": "0x095ea7b3"
                              },
                              {
                                "argumentTypes": null,
                                "id": 186,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 172,
                                "src": "2693:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 187,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 174,
                                "src": "2697:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_157198259_by_1",
                                  "typeString": "int_const 157198259"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 183,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "2658:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 184,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2658:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2658:45:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 181,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 170,
                            "src": "2647:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 182,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "call",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2647:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2647:57:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2611:93:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 206,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 192,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 178,
                              "src": "2722:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 204,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 196,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 193,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 180,
                                        "src": "2734:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 194,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "2734:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 195,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "2749:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "2734:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "||",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 199,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 180,
                                        "src": "2765:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "id": 201,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "2772:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 200,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "2772:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": null,
                                                "typeString": null
                                              }
                                            }
                                          }
                                        ],
                                        "id": 202,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "2771:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 197,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "2754:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 198,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "2754:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 203,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2754:24:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "2734:44:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 205,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "2733:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "2722:57:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5472616e7366657248656c7065723a20415050524f56455f4641494c4544",
                            "id": 207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2781:32:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
                              "typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
                            },
                            "value": "TransferHelper: APPROVE_FAILED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_3e27be550bb5367a6d8a8b2dd8b5c52ee0710d2d5b26de50062207957ab5bd00",
                              "typeString": "literal_string \"TransferHelper: APPROVE_FAILED\""
                            }
                          ],
                          "id": 191,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "2714:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 208,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2714:100:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 209,
                      "nodeType": "ExpressionStatement",
                      "src": "2714:100:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 211,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeApprove",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 175,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 170,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 211,
                      "src": "2488:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 169,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2488:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 172,
                      "mutability": "mutable",
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 211,
                      "src": "2503:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 171,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2503:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 174,
                      "mutability": "mutable",
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 211,
                      "src": "2515:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 173,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2515:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2487:39:0"
                },
                "returnParameters": {
                  "id": 176,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2536:0:0"
                },
                "scope": 326,
                "src": "2467:354:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 253,
                  "nodeType": "Block",
                  "src": "2897:287:0",
                  "statements": [
                    {
                      "assignments": [
                        221,
                        223
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 221,
                          "mutability": "mutable",
                          "name": "success",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 253,
                          "src": "2974:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 220,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "2974:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 223,
                          "mutability": "mutable",
                          "name": "data",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 253,
                          "src": "2988:17:0",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 222,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "2988:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 233,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30786139303539636262",
                                "id": 228,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3043:10:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_2835717307_by_1",
                                  "typeString": "int_const 2835717307"
                                },
                                "value": "0xa9059cbb"
                              },
                              {
                                "argumentTypes": null,
                                "id": 229,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 215,
                                "src": "3055:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 230,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 217,
                                "src": "3059:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_2835717307_by_1",
                                  "typeString": "int_const 2835717307"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 226,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "3020:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 227,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3020:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 231,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3020:45:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 224,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 213,
                            "src": "3009:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 225,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "call",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3009:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 232,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3009:57:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2973:93:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 249,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 235,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 221,
                              "src": "3084:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 239,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 236,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 223,
                                        "src": "3096:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 237,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "3096:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 238,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3111:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "3096:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "||",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 242,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 223,
                                        "src": "3127:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "id": 244,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "3134:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 243,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "3134:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": null,
                                                "typeString": null
                                              }
                                            }
                                          }
                                        ],
                                        "id": 245,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "3133:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 240,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "3116:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 241,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "3116:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 246,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3116:24:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "3096:44:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 248,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3095:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "3084:57:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5472616e7366657248656c7065723a205452414e534645525f4641494c4544",
                            "id": 250,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3143:33:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
                              "typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
                            },
                            "value": "TransferHelper: TRANSFER_FAILED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_05d7eee434319ef96b9de8eaf182057f1e6a6441451c0ddc676469e4b256f426",
                              "typeString": "literal_string \"TransferHelper: TRANSFER_FAILED\""
                            }
                          ],
                          "id": 234,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "3076:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 251,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3076:101:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 252,
                      "nodeType": "ExpressionStatement",
                      "src": "3076:101:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 254,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransfer",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 213,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 254,
                      "src": "2849:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 212,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2849:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 215,
                      "mutability": "mutable",
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 254,
                      "src": "2864:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 214,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2864:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 217,
                      "mutability": "mutable",
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 254,
                      "src": "2876:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2876:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2848:39:0"
                },
                "returnParameters": {
                  "id": 219,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2897:0:0"
                },
                "scope": 326,
                "src": "2827:357:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 299,
                  "nodeType": "Block",
                  "src": "3278:310:0",
                  "statements": [
                    {
                      "assignments": [
                        266,
                        268
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 266,
                          "mutability": "mutable",
                          "name": "success",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 299,
                          "src": "3367:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 265,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3367:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        },
                        {
                          "constant": false,
                          "id": 268,
                          "mutability": "mutable",
                          "name": "data",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 299,
                          "src": "3381:17:0",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes"
                          },
                          "typeName": {
                            "id": 267,
                            "name": "bytes",
                            "nodeType": "ElementaryTypeName",
                            "src": "3381:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_storage_ptr",
                              "typeString": "bytes"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 279,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30783233623837326464",
                                "id": 273,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3436:10:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_599290589_by_1",
                                  "typeString": "int_const 599290589"
                                },
                                "value": "0x23b872dd"
                              },
                              {
                                "argumentTypes": null,
                                "id": 274,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 258,
                                "src": "3448:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 275,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 260,
                                "src": "3454:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 276,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 262,
                                "src": "3458:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_599290589_by_1",
                                  "typeString": "int_const 599290589"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 271,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -1,
                                "src": "3413:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 272,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodeWithSelector",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3413:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes4) pure returns (bytes memory)"
                              }
                            },
                            "id": 277,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3413:51:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 269,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "3402:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "call",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "3402:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 278,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3402:63:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3366:99:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 295,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 281,
                              "name": "success",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 266,
                              "src": "3483:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 293,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 285,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 282,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 268,
                                        "src": "3495:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      "id": 283,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "3495:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "30",
                                      "id": 284,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "3510:1:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_0_by_1",
                                        "typeString": "int_const 0"
                                      },
                                      "value": "0"
                                    },
                                    "src": "3495:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "||",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 288,
                                        "name": "data",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 268,
                                        "src": "3526:4:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "components": [
                                          {
                                            "argumentTypes": null,
                                            "id": 290,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "3533:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_bool_$",
                                              "typeString": "type(bool)"
                                            },
                                            "typeName": {
                                              "id": 289,
                                              "name": "bool",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "3533:4:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": null,
                                                "typeString": null
                                              }
                                            }
                                          }
                                        ],
                                        "id": 291,
                                        "isConstant": false,
                                        "isInlineArray": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "TupleExpression",
                                        "src": "3532:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes_memory_ptr",
                                          "typeString": "bytes memory"
                                        },
                                        {
                                          "typeIdentifier": "t_type$_t_bool_$",
                                          "typeString": "type(bool)"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 286,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -1,
                                        "src": "3515:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 287,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "decode",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "3515:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                                        "typeString": "function () pure"
                                      }
                                    },
                                    "id": 292,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3515:24:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "3495:44:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 294,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3494:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "3483:57:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544",
                            "id": 296,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3542:38:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
                              "typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
                            },
                            "value": "TransferHelper: TRANSFER_FROM_FAILED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_eb2904bf3c0c9ae693b53eb0188a703c388998a9c405b7965ca678cef9a51d18",
                              "typeString": "literal_string \"TransferHelper: TRANSFER_FROM_FAILED\""
                            }
                          ],
                          "id": 280,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "3475:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 297,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3475:106:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 298,
                      "nodeType": "ExpressionStatement",
                      "src": "3475:106:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 300,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransferFrom",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 263,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 256,
                      "mutability": "mutable",
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 300,
                      "src": "3216:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 255,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3216:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 258,
                      "mutability": "mutable",
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 300,
                      "src": "3231:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 257,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3231:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 260,
                      "mutability": "mutable",
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 300,
                      "src": "3245:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 259,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3245:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 262,
                      "mutability": "mutable",
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 300,
                      "src": "3257:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 261,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3257:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3215:53:0"
                },
                "returnParameters": {
                  "id": 264,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3278:0:0"
                },
                "scope": 326,
                "src": "3190:398:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 324,
                  "nodeType": "Block",
                  "src": "3652:134:0",
                  "statements": [
                    {
                      "assignments": [
                        308,
                        null
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 308,
                          "mutability": "mutable",
                          "name": "success",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 324,
                          "src": "3663:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 307,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "3663:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        },
                        null
                      ],
                      "id": 318,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 315,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "3711:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 314,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "3701:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bytes memory)"
                              },
                              "typeName": {
                                "id": 313,
                                "name": "bytes",
                                "nodeType": "ElementaryTypeName",
                                "src": "3705:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_storage_ptr",
                                  "typeString": "bytes"
                                }
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3701:12:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 309,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 302,
                              "src": "3680:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "id": 310,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "call",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "3680:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                              "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "names": [
                            "value"
                          ],
                          "nodeType": "FunctionCallOptions",
                          "options": [
                            {
                              "argumentTypes": null,
                              "id": 311,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 304,
                              "src": "3694:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "src": "3680:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                          }
                        },
                        "id": 317,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3680:34:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "tuple(bool,bytes memory)"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3662:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 320,
                            "name": "success",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 308,
                            "src": "3732:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5472616e7366657248656c7065723a204554485f5452414e534645525f4641494c4544",
                            "id": 321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3741:37:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d290720a9b119bbeaf8124eb771e119cbea85a2f430cbb39a8fead2398528881",
                              "typeString": "literal_string \"TransferHelper: ETH_TRANSFER_FAILED\""
                            },
                            "value": "TransferHelper: ETH_TRANSFER_FAILED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_d290720a9b119bbeaf8124eb771e119cbea85a2f430cbb39a8fead2398528881",
                              "typeString": "literal_string \"TransferHelper: ETH_TRANSFER_FAILED\""
                            }
                          ],
                          "id": 319,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "3724:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3724:55:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 323,
                      "nodeType": "ExpressionStatement",
                      "src": "3724:55:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 325,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransferETH",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 305,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 302,
                      "mutability": "mutable",
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 325,
                      "src": "3619:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 301,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3619:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 304,
                      "mutability": "mutable",
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 325,
                      "src": "3631:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 303,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3631:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3618:24:0"
                },
                "returnParameters": {
                  "id": 306,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3652:0:0"
                },
                "scope": 326,
                "src": "3594:192:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 1371,
            "src": "2438:1350:0"
          },
          {
            "abstract": false,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": {
              "id": 327,
              "nodeType": "StructuredDocumentation",
              "src": "3883:563:0",
              "text": " @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."
            },
            "fullyImplemented": true,
            "id": 520,
            "linearizedBaseContracts": [
              520
            ],
            "name": "SafeMath",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 352,
                  "nodeType": "Block",
                  "src": "4766:109:0",
                  "statements": [
                    {
                      "assignments": [
                        338
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 338,
                          "mutability": "mutable",
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 352,
                          "src": "4776:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 337,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "4776:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 342,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 339,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 330,
                          "src": "4788:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 340,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 332,
                          "src": "4792:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4788:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "4776:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 346,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 344,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 338,
                              "src": "4811:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 345,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 330,
                              "src": "4816:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4811:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "536166654d6174683a206164646974696f6e206f766572666c6f77",
                            "id": 347,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4819:29:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                              "typeString": "literal_string \"SafeMath: addition overflow\""
                            },
                            "value": "SafeMath: addition overflow"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a",
                              "typeString": "literal_string \"SafeMath: addition overflow\""
                            }
                          ],
                          "id": 343,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "4803:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4803:46:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 349,
                      "nodeType": "ExpressionStatement",
                      "src": "4803:46:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 350,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 338,
                        "src": "4867:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 336,
                      "id": 351,
                      "nodeType": "Return",
                      "src": "4860:8:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 328,
                  "nodeType": "StructuredDocumentation",
                  "src": "4470:224:0",
                  "text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
                },
                "id": 353,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 333,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 330,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 353,
                      "src": "4712:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 329,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4712:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 332,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 353,
                      "src": "4723:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 331,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4723:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4711:22:0"
                },
                "returnParameters": {
                  "id": 336,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 335,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 353,
                      "src": "4757:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 334,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4757:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4756:9:0"
                },
                "scope": 520,
                "src": "4699:176:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 369,
                  "nodeType": "Block",
                  "src": "5213:67:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 364,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 356,
                            "src": "5234:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 365,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 358,
                            "src": "5237:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "536166654d6174683a207375627472616374696f6e206f766572666c6f77",
                            "id": 366,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5240:32:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                              "typeString": "literal_string \"SafeMath: subtraction overflow\""
                            },
                            "value": "SafeMath: subtraction overflow"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862",
                              "typeString": "literal_string \"SafeMath: subtraction overflow\""
                            }
                          ],
                          "id": 363,
                          "name": "sub",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            370,
                            398
                          ],
                          "referencedDeclaration": 398,
                          "src": "5230:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                          }
                        },
                        "id": 367,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5230:43:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 362,
                      "id": 368,
                      "nodeType": "Return",
                      "src": "5223:50:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 354,
                  "nodeType": "StructuredDocumentation",
                  "src": "4881:260:0",
                  "text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
                },
                "id": 370,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 359,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 356,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 370,
                      "src": "5159:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 355,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5159:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 358,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 370,
                      "src": "5170:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5170:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5158:22:0"
                },
                "returnParameters": {
                  "id": 362,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 361,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 370,
                      "src": "5204:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 360,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5204:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5203:9:0"
                },
                "scope": 520,
                "src": "5146:134:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 397,
                  "nodeType": "Block",
                  "src": "5666:92:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 385,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 383,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "5684:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 384,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "5689:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "5684:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 386,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 377,
                            "src": "5692:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 382,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "5676:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 387,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5676:29:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 388,
                      "nodeType": "ExpressionStatement",
                      "src": "5676:29:0"
                    },
                    {
                      "assignments": [
                        390
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 390,
                          "mutability": "mutable",
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 397,
                          "src": "5715:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 389,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "5715:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 394,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 393,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 391,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 373,
                          "src": "5727:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 392,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 375,
                          "src": "5731:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5727:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "5715:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 395,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 390,
                        "src": "5750:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 381,
                      "id": 396,
                      "nodeType": "Return",
                      "src": "5743:8:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 371,
                  "nodeType": "StructuredDocumentation",
                  "src": "5286:280:0",
                  "text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
                },
                "id": 398,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 378,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 373,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 398,
                      "src": "5584:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 372,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5584:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 375,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 398,
                      "src": "5595:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 374,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5595:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 377,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 398,
                      "src": "5606:26:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 376,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "5606:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5583:50:0"
                },
                "returnParameters": {
                  "id": 381,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 380,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 398,
                      "src": "5657:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 379,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5657:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5656:9:0"
                },
                "scope": 520,
                "src": "5571:187:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 432,
                  "nodeType": "Block",
                  "src": "6072:392:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 408,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 401,
                          "src": "6304:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6309:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "6304:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 414,
                      "nodeType": "IfStatement",
                      "src": "6300:45:0",
                      "trueBody": {
                        "id": 413,
                        "nodeType": "Block",
                        "src": "6312:33:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 411,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6333:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "functionReturnParameters": 407,
                            "id": 412,
                            "nodeType": "Return",
                            "src": "6326:8:0"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [
                        416
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 416,
                          "mutability": "mutable",
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 432,
                          "src": "6355:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 415,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "6355:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 420,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 419,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 417,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 401,
                          "src": "6367:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 418,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 403,
                          "src": "6371:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6367:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "6355:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 424,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 422,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 416,
                                "src": "6390:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 423,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 401,
                                "src": "6394:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "6390:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 425,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 403,
                              "src": "6399:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6390:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77",
                            "id": 427,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6402:35:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                              "typeString": "literal_string \"SafeMath: multiplication overflow\""
                            },
                            "value": "SafeMath: multiplication overflow"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3",
                              "typeString": "literal_string \"SafeMath: multiplication overflow\""
                            }
                          ],
                          "id": 421,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "6382:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 428,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6382:56:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 429,
                      "nodeType": "ExpressionStatement",
                      "src": "6382:56:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 430,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 416,
                        "src": "6456:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 407,
                      "id": 431,
                      "nodeType": "Return",
                      "src": "6449:8:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 399,
                  "nodeType": "StructuredDocumentation",
                  "src": "5764:236:0",
                  "text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
                },
                "id": 433,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "mul",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 404,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 401,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 433,
                      "src": "6018:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 400,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6018:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 403,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 433,
                      "src": "6029:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 402,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6029:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6017:22:0"
                },
                "returnParameters": {
                  "id": 407,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 406,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 433,
                      "src": "6063:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 405,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6063:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6062:9:0"
                },
                "scope": 520,
                "src": "6005:459:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 449,
                  "nodeType": "Block",
                  "src": "6993:63:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 444,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 436,
                            "src": "7014:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 445,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 438,
                            "src": "7017:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "536166654d6174683a206469766973696f6e206279207a65726f",
                            "id": 446,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7020:28:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                              "typeString": "literal_string \"SafeMath: division by zero\""
                            },
                            "value": "SafeMath: division by zero"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f",
                              "typeString": "literal_string \"SafeMath: division by zero\""
                            }
                          ],
                          "id": 443,
                          "name": "div",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            450,
                            478
                          ],
                          "referencedDeclaration": 478,
                          "src": "7010:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                          }
                        },
                        "id": 447,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7010:39:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 442,
                      "id": 448,
                      "nodeType": "Return",
                      "src": "7003:46:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 434,
                  "nodeType": "StructuredDocumentation",
                  "src": "6470:451:0",
                  "text": " @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                },
                "id": 450,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 439,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 436,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 450,
                      "src": "6939:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 435,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6939:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 438,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 450,
                      "src": "6950:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 437,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6950:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6938:22:0"
                },
                "returnParameters": {
                  "id": 442,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 441,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 450,
                      "src": "6984:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 440,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6984:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6983:9:0"
                },
                "scope": 520,
                "src": "6926:130:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 477,
                  "nodeType": "Block",
                  "src": "7633:177:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 465,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 463,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 455,
                              "src": "7651:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 464,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7655:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "7651:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 466,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 457,
                            "src": "7658:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 462,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "7643:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 467,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7643:28:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 468,
                      "nodeType": "ExpressionStatement",
                      "src": "7643:28:0"
                    },
                    {
                      "assignments": [
                        470
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 470,
                          "mutability": "mutable",
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 477,
                          "src": "7681:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 469,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "7681:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 474,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 471,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 453,
                          "src": "7693:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 472,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 455,
                          "src": "7697:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7693:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "7681:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 475,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 470,
                        "src": "7802:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 461,
                      "id": 476,
                      "nodeType": "Return",
                      "src": "7795:8:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 451,
                  "nodeType": "StructuredDocumentation",
                  "src": "7062:471:0",
                  "text": " @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                },
                "id": 478,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 458,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 453,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 478,
                      "src": "7551:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 452,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7551:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 455,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 478,
                      "src": "7562:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 454,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7562:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 457,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 478,
                      "src": "7573:26:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 456,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "7573:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7550:50:0"
                },
                "returnParameters": {
                  "id": 461,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 460,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 478,
                      "src": "7624:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 459,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7624:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7623:9:0"
                },
                "scope": 520,
                "src": "7538:272:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 494,
                  "nodeType": "Block",
                  "src": "8328:61:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 489,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 481,
                            "src": "8349:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 490,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 483,
                            "src": "8352:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "536166654d6174683a206d6f64756c6f206279207a65726f",
                            "id": 491,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8355:26:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
                              "typeString": "literal_string \"SafeMath: modulo by zero\""
                            },
                            "value": "SafeMath: modulo by zero"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832",
                              "typeString": "literal_string \"SafeMath: modulo by zero\""
                            }
                          ],
                          "id": 488,
                          "name": "mod",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            495,
                            519
                          ],
                          "referencedDeclaration": 519,
                          "src": "8345:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$",
                            "typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
                          }
                        },
                        "id": 492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8345:37:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 487,
                      "id": 493,
                      "nodeType": "Return",
                      "src": "8338:44:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 479,
                  "nodeType": "StructuredDocumentation",
                  "src": "7816:440:0",
                  "text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                },
                "id": 495,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "mod",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 484,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 481,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 495,
                      "src": "8274:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 480,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8274:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 483,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 495,
                      "src": "8285:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 482,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8285:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8273:22:0"
                },
                "returnParameters": {
                  "id": 487,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 486,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 495,
                      "src": "8319:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 485,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8319:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8318:9:0"
                },
                "scope": 520,
                "src": "8261:128:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 518,
                  "nodeType": "Block",
                  "src": "8955:68:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 510,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 508,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 500,
                              "src": "8973:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 509,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8978:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "8973:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 511,
                            "name": "errorMessage",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 502,
                            "src": "8981:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          ],
                          "id": 507,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "8965:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8965:29:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 513,
                      "nodeType": "ExpressionStatement",
                      "src": "8965:29:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 516,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 514,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 498,
                          "src": "9011:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "%",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 515,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 500,
                          "src": "9015:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9011:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 506,
                      "id": 517,
                      "nodeType": "Return",
                      "src": "9004:12:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 496,
                  "nodeType": "StructuredDocumentation",
                  "src": "8395:460:0",
                  "text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
                },
                "id": 519,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "mod",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 503,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 498,
                      "mutability": "mutable",
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 519,
                      "src": "8873:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 497,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8873:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 500,
                      "mutability": "mutable",
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 519,
                      "src": "8884:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 499,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8884:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 502,
                      "mutability": "mutable",
                      "name": "errorMessage",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 519,
                      "src": "8895:26:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 501,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "8895:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8872:50:0"
                },
                "returnParameters": {
                  "id": 506,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 505,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 519,
                      "src": "8946:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 504,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8946:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8945:9:0"
                },
                "scope": 520,
                "src": "8860:163:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 1371,
            "src": "4447:4578:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 525,
            "linearizedBaseContracts": [
              525
            ],
            "name": "BalanceStorage",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "27e235e3",
                "id": 524,
                "mutability": "mutable",
                "name": "balances",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 525,
                "src": "9238:43:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 523,
                  "keyType": {
                    "id": 521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9246:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "9238:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 522,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "9257:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              }
            ],
            "scope": 1371,
            "src": "9199:85:0"
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 526,
                  "name": "BalanceStorage",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 525,
                  "src": "9325:14:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_BalanceStorage_$525",
                    "typeString": "contract BalanceStorage"
                  }
                },
                "id": 527,
                "nodeType": "InheritanceSpecifier",
                "src": "9325:14:0"
              }
            ],
            "contractDependencies": [
              525
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 572,
            "linearizedBaseContracts": [
              572,
              525
            ],
            "name": "Balance",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 530,
                "libraryName": {
                  "contractScope": null,
                  "id": 528,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 520,
                  "src": "9352:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$520",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "9346:27:0",
                "typeName": {
                  "id": 529,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "9365:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "body": {
                  "id": 551,
                  "nodeType": "Block",
                  "src": "9434:115:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 536,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "9475:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 537,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9475:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 538,
                              "name": "balances",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 524,
                              "src": "9487:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 541,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 539,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9496:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 540,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9496:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9487:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 533,
                            "name": "TransferHelper",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "9444:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_TransferHelper_$326_$",
                              "typeString": "type(library TransferHelper)"
                            }
                          },
                          "id": 535,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "safeTransferETH",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 325,
                          "src": "9444:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 542,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9444:64:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 543,
                      "nodeType": "ExpressionStatement",
                      "src": "9444:64:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 544,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 524,
                            "src": "9518:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 547,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 545,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "9527:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 546,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9527:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9518:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 548,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9541:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "9518:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 550,
                      "nodeType": "ExpressionStatement",
                      "src": "9518:24:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "4e71d92d",
                "id": 552,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "claim",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 531,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9424:2:0"
                },
                "returnParameters": {
                  "id": 532,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9434:0:0"
                },
                "scope": 572,
                "src": "9410:139:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 570,
                  "nodeType": "Block",
                  "src": "9616:63:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 568,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 559,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 524,
                            "src": "9626:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 561,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 560,
                            "name": "_user",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 554,
                            "src": "9635:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9626:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 566,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 556,
                              "src": "9664:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 562,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 524,
                                "src": "9644:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 564,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 563,
                                "name": "_user",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 554,
                                "src": "9653:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9644:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 353,
                            "src": "9644:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 567,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9644:28:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9626:46:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 569,
                      "nodeType": "ExpressionStatement",
                      "src": "9626:46:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 571,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "addBalance",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 557,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 554,
                      "mutability": "mutable",
                      "name": "_user",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 571,
                      "src": "9575:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 553,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9575:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 556,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 571,
                      "src": "9590:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 555,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9590:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9574:32:0"
                },
                "returnParameters": {
                  "id": 558,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9616:0:0"
                },
                "scope": 572,
                "src": "9555:124:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              }
            ],
            "scope": 1371,
            "src": "9305:376:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": false,
            "id": 592,
            "linearizedBaseContracts": [
              592
            ],
            "name": "Maintainer",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "functionSelector": "9850d32b",
                "id": 574,
                "mutability": "mutable",
                "name": "maintainer",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 592,
                "src": "9795:25:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 573,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "9795:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 585,
                  "nodeType": "Block",
                  "src": "9853:106:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 580,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 577,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "9871:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 578,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9871:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 579,
                              "name": "maintainer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 574,
                              "src": "9885:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "9871:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4552524f523a207065726d697373696f6e2064656e6965642c206f6e6c79206d61696e7461696e6572",
                            "id": 581,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9897:43:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_f6ec9cfb8a30d409cf4153c0265851268240cc67268efb3b1f476375e8675265",
                              "typeString": "literal_string \"ERROR: permission denied, only maintainer\""
                            },
                            "value": "ERROR: permission denied, only maintainer"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_f6ec9cfb8a30d409cf4153c0265851268240cc67268efb3b1f476375e8675265",
                              "typeString": "literal_string \"ERROR: permission denied, only maintainer\""
                            }
                          ],
                          "id": 576,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "9863:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 582,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9863:78:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 583,
                      "nodeType": "ExpressionStatement",
                      "src": "9863:78:0"
                    },
                    {
                      "id": 584,
                      "nodeType": "PlaceholderStatement",
                      "src": "9951:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 586,
                "name": "onlyMaintainer",
                "nodeType": "ModifierDefinition",
                "overrides": null,
                "parameters": {
                  "id": 575,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9850:2:0"
                },
                "src": "9827:132:0",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": null,
                "documentation": null,
                "functionSelector": "13ea5d29",
                "id": 591,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "setMaintainer",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 589,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 588,
                      "mutability": "mutable",
                      "name": "_maintainer",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 591,
                      "src": "9988:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 587,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9988:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9987:21:0"
                },
                "returnParameters": {
                  "id": 590,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10025:0:0"
                },
                "scope": 592,
                "src": "9965:61:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "external"
              }
            ],
            "scope": 1371,
            "src": "9760:268:0"
          },
          {
            "abstract": true,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 613,
            "linearizedBaseContracts": [
              613
            ],
            "name": "Context",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 600,
                  "nodeType": "Block",
                  "src": "10723:34:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 597,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "10740:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 598,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "10740:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "functionReturnParameters": 596,
                      "id": 599,
                      "nodeType": "Return",
                      "src": "10733:17:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 601,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgSender",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 593,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10672:2:0"
                },
                "returnParameters": {
                  "id": 596,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 595,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 601,
                      "src": "10706:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 594,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10706:15:0",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10705:17:0"
                },
                "scope": 613,
                "src": "10653:104:0",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 611,
                  "nodeType": "Block",
                  "src": "10828:165:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 606,
                        "name": "this",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -28,
                        "src": "10838:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Context_$613",
                          "typeString": "contract Context"
                        }
                      },
                      "id": 607,
                      "nodeType": "ExpressionStatement",
                      "src": "10838:4:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 608,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "10978:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "data",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "10978:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes calldata"
                        }
                      },
                      "functionReturnParameters": 605,
                      "id": 610,
                      "nodeType": "Return",
                      "src": "10971:15:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 612,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_msgData",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 602,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10780:2:0"
                },
                "returnParameters": {
                  "id": 605,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 604,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 612,
                      "src": "10814:12:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 603,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "10814:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10813:14:0"
                },
                "scope": 613,
                "src": "10763:230:0",
                "stateMutability": "view",
                "virtual": true,
                "visibility": "internal"
              }
            ],
            "scope": 1371,
            "src": "10621:374:0"
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 615,
                  "name": "Context",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 613,
                  "src": "11659:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Context_$613",
                    "typeString": "contract Context"
                  }
                },
                "id": 616,
                "nodeType": "InheritanceSpecifier",
                "src": "11659:7:0"
              }
            ],
            "contractDependencies": [
              613
            ],
            "contractKind": "contract",
            "documentation": {
              "id": 614,
              "nodeType": "StructuredDocumentation",
              "src": "11144:494:0",
              "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
            },
            "fullyImplemented": true,
            "id": 719,
            "linearizedBaseContracts": [
              719,
              613
            ],
            "name": "Ownable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 618,
                "mutability": "mutable",
                "name": "_owner",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 719,
                "src": "11673:22:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 617,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "11673:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 624,
                "name": "OwnershipTransferred",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 623,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 620,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "previousOwner",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 624,
                      "src": "11729:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 619,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11729:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 622,
                      "indexed": true,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 624,
                      "src": "11760:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 621,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11760:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11728:57:0"
                },
                "src": "11702:84:0"
              },
              {
                "body": {
                  "id": 645,
                  "nodeType": "Block",
                  "src": "11912:135:0",
                  "statements": [
                    {
                      "assignments": [
                        629
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 629,
                          "mutability": "mutable",
                          "name": "msgSender",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 645,
                          "src": "11922:17:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 628,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "11922:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 632,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 630,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 601,
                          "src": "11942:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                            "typeString": "function () view returns (address payable)"
                          }
                        },
                        "id": 631,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11942:12:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "11922:32:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 635,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 633,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 618,
                          "src": "11964:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 634,
                          "name": "msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 629,
                          "src": "11973:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "11964:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 636,
                      "nodeType": "ExpressionStatement",
                      "src": "11964:18:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 640,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12026:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 639,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "12018:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 638,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "12018:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 641,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12018:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 642,
                            "name": "msgSender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 629,
                            "src": "12030:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 637,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 624,
                          "src": "11997:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 643,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11997:43:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 644,
                      "nodeType": "EmitStatement",
                      "src": "11992:48:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 625,
                  "nodeType": "StructuredDocumentation",
                  "src": "11792:91:0",
                  "text": " @dev Initializes the contract setting the deployer as the initial owner."
                },
                "id": 646,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 626,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11900:2:0"
                },
                "returnParameters": {
                  "id": 627,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11912:0:0"
                },
                "scope": 719,
                "src": "11888:159:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 654,
                  "nodeType": "Block",
                  "src": "12170:30:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 652,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 618,
                        "src": "12187:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 651,
                      "id": 653,
                      "nodeType": "Return",
                      "src": "12180:13:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 647,
                  "nodeType": "StructuredDocumentation",
                  "src": "12053:65:0",
                  "text": " @dev Returns the address of the current owner."
                },
                "functionSelector": "8da5cb5b",
                "id": 655,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "owner",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 648,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12137:2:0"
                },
                "returnParameters": {
                  "id": 651,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 650,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 655,
                      "src": "12161:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 649,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12161:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12160:9:0"
                },
                "scope": 719,
                "src": "12123:77:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 667,
                  "nodeType": "Block",
                  "src": "12309:95:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 662,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 659,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 618,
                              "src": "12327:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 660,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 601,
                                "src": "12337:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
                                  "typeString": "function () view returns (address payable)"
                                }
                              },
                              "id": 661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12337:12:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "12327:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                            "id": 663,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12351:34:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                              "typeString": "literal_string \"Ownable: caller is not the owner\""
                            },
                            "value": "Ownable: caller is not the owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                              "typeString": "literal_string \"Ownable: caller is not the owner\""
                            }
                          ],
                          "id": 658,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "12319:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12319:67:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 665,
                      "nodeType": "ExpressionStatement",
                      "src": "12319:67:0"
                    },
                    {
                      "id": 666,
                      "nodeType": "PlaceholderStatement",
                      "src": "12396:1:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 656,
                  "nodeType": "StructuredDocumentation",
                  "src": "12206:77:0",
                  "text": " @dev Throws if called by any account other than the owner."
                },
                "id": 668,
                "name": "onlyOwner",
                "nodeType": "ModifierDefinition",
                "overrides": null,
                "parameters": {
                  "id": 657,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12306:2:0"
                },
                "src": "12288:116:0",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 689,
                  "nodeType": "Block",
                  "src": "12800:91:0",
                  "statements": [
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 675,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 618,
                            "src": "12836:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 678,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "12852:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 677,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "12844:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 676,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "12844:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": null,
                                  "typeString": null
                                }
                              }
                            },
                            "id": 679,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12844:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 674,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 624,
                          "src": "12815:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 680,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12815:40:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 681,
                      "nodeType": "EmitStatement",
                      "src": "12810:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 687,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 682,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 618,
                          "src": "12865:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 685,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "12882:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "12874:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 683,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "12874:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": null,
                                "typeString": null
                              }
                            }
                          },
                          "id": 686,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12874:10:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "12865:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 688,
                      "nodeType": "ExpressionStatement",
                      "src": "12865:19:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 669,
                  "nodeType": "StructuredDocumentation",
                  "src": "12410:331:0",
                  "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
                },
                "functionSelector": "715018a6",
                "id": 690,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 672,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 671,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 668,
                      "src": "12790:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12790:9:0"
                  }
                ],
                "name": "renounceOwnership",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 670,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12772:2:0"
                },
                "returnParameters": {
                  "id": 673,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12800:0:0"
                },
                "scope": 719,
                "src": "12746:145:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 717,
                  "nodeType": "Block",
                  "src": "13110:170:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 699,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 693,
                              "src": "13128:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 702,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "13148:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 701,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "13140:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 700,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "13140:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": null,
                                    "typeString": null
                                  }
                                }
                              },
                              "id": 703,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "13140:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "13128:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                            "id": 705,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13152:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                              "typeString": "literal_string \"Ownable: new owner is the zero address\""
                            },
                            "value": "Ownable: new owner is the zero address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                              "typeString": "literal_string \"Ownable: new owner is the zero address\""
                            }
                          ],
                          "id": 698,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "13120:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13120:73:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 707,
                      "nodeType": "ExpressionStatement",
                      "src": "13120:73:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 709,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 618,
                            "src": "13229:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 710,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 693,
                            "src": "13237:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 708,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 624,
                          "src": "13208:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 711,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13208:38:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 712,
                      "nodeType": "EmitStatement",
                      "src": "13203:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 715,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 713,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 618,
                          "src": "13256:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 714,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 693,
                          "src": "13265:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "13256:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 716,
                      "nodeType": "ExpressionStatement",
                      "src": "13256:17:0"
                    }
                  ]
                },
                "documentation": {
                  "id": 691,
                  "nodeType": "StructuredDocumentation",
                  "src": "12897:138:0",
                  "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
                },
                "functionSelector": "f2fde38b",
                "id": 718,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 696,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 695,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 668,
                      "src": "13100:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13100:9:0"
                  }
                ],
                "name": "transferOwnership",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 694,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 693,
                      "mutability": "mutable",
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 718,
                      "src": "13067:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 692,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13067:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13066:18:0"
                },
                "returnParameters": {
                  "id": 697,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13110:0:0"
                },
                "scope": 719,
                "src": "13040:240:0",
                "stateMutability": "nonpayable",
                "virtual": true,
                "visibility": "public"
              }
            ],
            "scope": 1371,
            "src": "11639:1643:0"
          },
          {
            "id": 720,
            "literals": [
              "solidity",
              "0.6",
              ".12"
            ],
            "nodeType": "PragmaDirective",
            "src": "13326:23:0"
          },
          {
            "abstract": false,
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 721,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 719,
                  "src": "13635:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$719",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 722,
                "nodeType": "InheritanceSpecifier",
                "src": "13635:7:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 723,
                  "name": "Round",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 168,
                  "src": "13644:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Round_$168",
                    "typeString": "contract Round"
                  }
                },
                "id": 724,
                "nodeType": "InheritanceSpecifier",
                "src": "13644:5:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 725,
                  "name": "Balance",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 572,
                  "src": "13651:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Balance_$572",
                    "typeString": "contract Balance"
                  }
                },
                "id": 726,
                "nodeType": "InheritanceSpecifier",
                "src": "13651:7:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 727,
                  "name": "Maintainer",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 592,
                  "src": "13660:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Maintainer_$592",
                    "typeString": "contract Maintainer"
                  }
                },
                "id": 728,
                "nodeType": "InheritanceSpecifier",
                "src": "13660:10:0"
              }
            ],
            "contractDependencies": [
              22,
              168,
              525,
              572,
              592,
              613,
              719
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 1370,
            "linearizedBaseContracts": [
              1370,
              592,
              572,
              525,
              168,
              22,
              719,
              613
            ],
            "name": "RunningMan",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 731,
                "libraryName": {
                  "contractScope": null,
                  "id": 729,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 520,
                  "src": "13683:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$520",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "13677:27:0",
                "typeName": {
                  "id": 730,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "13696:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "functionSelector": "9e639858",
                "id": 733,
                "mutability": "mutable",
                "name": "winPercent",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 1370,
                "src": "13709:25:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 732,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "13709:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "canonicalName": "RunningMan.State",
                "id": 738,
                "members": [
                  {
                    "id": 734,
                    "name": "UNDEFINED",
                    "nodeType": "EnumValue",
                    "src": "13762:9:0"
                  },
                  {
                    "id": 735,
                    "name": "WIN",
                    "nodeType": "EnumValue",
                    "src": "13773:3:0"
                  },
                  {
                    "id": 736,
                    "name": "LOSE",
                    "nodeType": "EnumValue",
                    "src": "13778:4:0"
                  },
                  {
                    "id": 737,
                    "name": "REFUND",
                    "nodeType": "EnumValue",
                    "src": "13784:6:0"
                  }
                ],
                "name": "State",
                "nodeType": "EnumDefinition",
                "src": "13741:55:0"
              },
              {
                "canonicalName": "RunningMan.Player",
                "id": 745,
                "members": [
                  {
                    "constant": false,
                    "id": 740,
                    "mutability": "mutable",
                    "name": "addr",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 745,
                    "src": "13826:20:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    },
                    "typeName": {
                      "id": 739,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "13826:15:0",
                      "stateMutability": "payable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 742,
                    "mutability": "mutable",
                    "name": "balance",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 745,
                    "src": "13856:15:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 741,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "13856:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 744,
                    "mutability": "mutable",
                    "name": "state",
                    "nodeType": "VariableDeclaration",
                    "overrides": null,
                    "scope": 745,
                    "src": "13881:11:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_State_$738",
                      "typeString": "enum RunningMan.State"
                    },
                    "typeName": {
                      "contractScope": null,
                      "id": 743,
                      "name": "State",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 738,
                      "src": "13881:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$738",
                        "typeString": "enum RunningMan.State"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "Player",
                "nodeType": "StructDefinition",
                "scope": 1370,
                "src": "13802:97:0",
                "visibility": "public"
              },
              {
                "constant": false,
                "functionSelector": "998f1b80",
                "id": 750,
                "mutability": "mutable",
                "name": "players",
                "nodeType": "VariableDeclaration",
                "overrides": null,
                "scope": 1370,
                "src": "13905:43:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                  "typeString": "mapping(uint256 => struct RunningMan.Player[])"
                },
                "typeName": {
                  "id": 749,
                  "keyType": {
                    "id": 746,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "13913:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "13905:28:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                    "typeString": "mapping(uint256 => struct RunningMan.Player[])"
                  },
                  "valueType": {
                    "baseType": {
                      "contractScope": null,
                      "id": 747,
                      "name": "Player",
                      "nodeType": "UserDefinedTypeName",
                      "referencedDeclaration": 745,
                      "src": "13924:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Player_$745_storage_ptr",
                        "typeString": "struct RunningMan.Player"
                      }
                    },
                    "id": 748,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "13924:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage_ptr",
                      "typeString": "struct RunningMan.Player[]"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 786,
                  "nodeType": "Block",
                  "src": "14113:174:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 763,
                          "name": "fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "14123:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 764,
                          "name": "_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 752,
                          "src": "14129:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14123:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 766,
                      "nodeType": "ExpressionStatement",
                      "src": "14123:10:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 769,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 767,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "14143:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 768,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 756,
                          "src": "14152:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14143:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 770,
                      "nodeType": "ExpressionStatement",
                      "src": "14143:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 771,
                          "name": "roundTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "14169:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 772,
                          "name": "_roundTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 758,
                          "src": "14181:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14169:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 774,
                      "nodeType": "ExpressionStatement",
                      "src": "14169:22:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 775,
                          "name": "winPercent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 733,
                          "src": "14201:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 776,
                          "name": "_winPercent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 754,
                          "src": "14214:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14201:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 778,
                      "nodeType": "ExpressionStatement",
                      "src": "14201:24:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 781,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 779,
                          "name": "maintainer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "14235:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 780,
                          "name": "_maintainer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 760,
                          "src": "14248:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "14235:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 782,
                      "nodeType": "ExpressionStatement",
                      "src": "14235:24:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 783,
                          "name": "newRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "14270:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 784,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14270:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 785,
                      "nodeType": "ExpressionStatement",
                      "src": "14270:10:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 787,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 761,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 752,
                      "mutability": "mutable",
                      "name": "_fee",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 787,
                      "src": "13976:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 751,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13976:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 754,
                      "mutability": "mutable",
                      "name": "_winPercent",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 787,
                      "src": "13998:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 753,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13998:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 756,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 787,
                      "src": "14027:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 755,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14027:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 758,
                      "mutability": "mutable",
                      "name": "_roundTime",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 787,
                      "src": "14052:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 757,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14052:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 760,
                      "mutability": "mutable",
                      "name": "_maintainer",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 787,
                      "src": "14080:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 759,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14080:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13966:139:0"
                },
                "returnParameters": {
                  "id": 762,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14113:0:0"
                },
                "scope": 1370,
                "src": "13955:332:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 829,
                  "nodeType": "Block",
                  "src": "14399:249:0",
                  "statements": [
                    {
                      "assignments": [
                        793
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 793,
                          "mutability": "mutable",
                          "name": "currentRound",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 829,
                          "src": "14409:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 792,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "14409:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 796,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 794,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "14432:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 795,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14432:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "14409:46:0"
                    },
                    {
                      "assignments": [
                        798
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 798,
                          "mutability": "mutable",
                          "name": "total",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 829,
                          "src": "14466:13:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 797,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "14466:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 799,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "14466:13:0"
                    },
                    {
                      "body": {
                        "id": 825,
                        "nodeType": "Block",
                        "src": "14544:76:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 823,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "id": 813,
                                "name": "total",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "14558:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "id": 816,
                                          "name": "players",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 750,
                                          "src": "14576:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                            "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                          }
                                        },
                                        "id": 818,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 817,
                                          "name": "currentRound",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 793,
                                          "src": "14584:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "14576:21:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                          "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                        }
                                      },
                                      "id": 820,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 819,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 801,
                                        "src": "14598:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "14576:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Player_$745_storage",
                                        "typeString": "struct RunningMan.Player storage ref"
                                      }
                                    },
                                    "id": 821,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balance",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 742,
                                    "src": "14576:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 814,
                                    "name": "total",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 798,
                                    "src": "14566:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 815,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 353,
                                  "src": "14566:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 822,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14566:43:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "14558:51:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 824,
                            "nodeType": "ExpressionStatement",
                            "src": "14558:51:0"
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 804,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 801,
                          "src": "14507:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 805,
                              "name": "players",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 750,
                              "src": "14509:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                              }
                            },
                            "id": 807,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 806,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 793,
                              "src": "14517:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "14509:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                            }
                          },
                          "id": 808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "14509:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14507:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 826,
                      "initializationExpression": {
                        "assignments": [
                          801
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 801,
                            "mutability": "mutable",
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 826,
                            "src": "14494:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 800,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14494:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 803,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 802,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "14504:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14494:11:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 811,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "14539:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 810,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 801,
                            "src": "14539:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 812,
                        "nodeType": "ExpressionStatement",
                        "src": "14539:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "14489:131:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 827,
                        "name": "total",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 798,
                        "src": "14636:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 791,
                      "id": 828,
                      "nodeType": "Return",
                      "src": "14629:12:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "b2c0ccc8",
                "id": 830,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getCurrentRoundBalance",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 788,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14359:2:0"
                },
                "returnParameters": {
                  "id": 791,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 790,
                      "mutability": "mutable",
                      "name": "balance",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 830,
                      "src": "14382:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 789,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14382:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14381:17:0"
                },
                "scope": 1370,
                "src": "14328:320:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 885,
                  "nodeType": "Block",
                  "src": "14817:261:0",
                  "statements": [
                    {
                      "body": {
                        "id": 878,
                        "nodeType": "Block",
                        "src": "14876:158:0",
                        "statements": [
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              "id": 861,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 854,
                                      "name": "players",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 750,
                                      "src": "14894:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                        "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                      }
                                    },
                                    "id": 856,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 855,
                                      "name": "_round",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 832,
                                      "src": "14902:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "14894:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                      "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                    }
                                  },
                                  "id": 858,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 857,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 842,
                                    "src": "14910:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "14894:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Player_$745_storage",
                                    "typeString": "struct RunningMan.Player storage ref"
                                  }
                                },
                                "id": 859,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "addr",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 740,
                                "src": "14894:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 860,
                                "name": "_player",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 834,
                                "src": "14921:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "14894:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 877,
                            "nodeType": "IfStatement",
                            "src": "14890:134:0",
                            "trueBody": {
                              "id": 876,
                              "nodeType": "Block",
                              "src": "14930:94:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 862,
                                              "name": "players",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 750,
                                              "src": "14956:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                              }
                                            },
                                            "id": 864,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 863,
                                              "name": "_round",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 832,
                                              "src": "14964:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "14956:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                            }
                                          },
                                          "id": 866,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 865,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 842,
                                            "src": "14972:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "14956:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Player_$745_storage",
                                            "typeString": "struct RunningMan.Player storage ref"
                                          }
                                        },
                                        "id": 867,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "balance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 742,
                                        "src": "14956:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 868,
                                              "name": "players",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 750,
                                              "src": "14984:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                              }
                                            },
                                            "id": 870,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 869,
                                              "name": "_round",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 832,
                                              "src": "14992:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "14984:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                            }
                                          },
                                          "id": 872,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 871,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 842,
                                            "src": "15000:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "14984:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Player_$745_storage",
                                            "typeString": "struct RunningMan.Player storage ref"
                                          }
                                        },
                                        "id": 873,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "state",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 744,
                                        "src": "14984:24:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_State_$738",
                                          "typeString": "enum RunningMan.State"
                                        }
                                      }
                                    ],
                                    "id": 874,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "14955:54:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$_t_uint256_$_t_enum$_State_$738_$",
                                      "typeString": "tuple(uint256,enum RunningMan.State)"
                                    }
                                  },
                                  "functionReturnParameters": 840,
                                  "id": 875,
                                  "nodeType": "Return",
                                  "src": "14948:61:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 850,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 845,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 842,
                          "src": "14845:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 846,
                              "name": "players",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 750,
                              "src": "14847:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                              }
                            },
                            "id": 848,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 847,
                              "name": "_round",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 832,
                              "src": "14855:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "14847:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                            }
                          },
                          "id": 849,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "14847:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "14845:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 879,
                      "initializationExpression": {
                        "assignments": [
                          842
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 842,
                            "mutability": "mutable",
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 879,
                            "src": "14832:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 841,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "14832:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 844,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 843,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "14842:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "14832:11:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 852,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "14871:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 851,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 842,
                            "src": "14871:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 853,
                        "nodeType": "ExpressionStatement",
                        "src": "14871:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "14827:207:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "components": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15052:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 881,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 738,
                              "src": "15055:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$738_$",
                                "typeString": "type(enum RunningMan.State)"
                              }
                            },
                            "id": 882,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "UNDEFINED",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "15055:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$738",
                              "typeString": "enum RunningMan.State"
                            }
                          }
                        ],
                        "id": 883,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "15051:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_rational_0_by_1_$_t_enum$_State_$738_$",
                          "typeString": "tuple(int_const 0,enum RunningMan.State)"
                        }
                      },
                      "functionReturnParameters": 840,
                      "id": 884,
                      "nodeType": "Return",
                      "src": "15044:27:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "6454e58d",
                "id": 886,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getPlayer",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 835,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 832,
                      "mutability": "mutable",
                      "name": "_round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 886,
                      "src": "14718:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 831,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14718:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 834,
                      "mutability": "mutable",
                      "name": "_player",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 886,
                      "src": "14734:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 833,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14734:15:0",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14717:41:0"
                },
                "returnParameters": {
                  "id": 840,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 837,
                      "mutability": "mutable",
                      "name": "playerBet",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 886,
                      "src": "14779:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 836,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14779:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 839,
                      "mutability": "mutable",
                      "name": "playerState",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 886,
                      "src": "14798:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$738",
                        "typeString": "enum RunningMan.State"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 838,
                        "name": "State",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 738,
                        "src": "14798:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$738",
                          "typeString": "enum RunningMan.State"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14778:38:0"
                },
                "scope": 1370,
                "src": "14699:379:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 898,
                  "nodeType": "Block",
                  "src": "15196:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 893,
                            "name": "players",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 750,
                            "src": "15213:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                              "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                            }
                          },
                          "id": 895,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 894,
                            "name": "_round",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 888,
                            "src": "15221:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "15213:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                            "typeString": "struct RunningMan.Player storage ref[] storage ref"
                          }
                        },
                        "id": 896,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "15213:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 892,
                      "id": 897,
                      "nodeType": "Return",
                      "src": "15206:29:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "776e11dd",
                "id": 899,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getRoundPlayers",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 889,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 888,
                      "mutability": "mutable",
                      "name": "_round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 899,
                      "src": "15151:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 887,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15151:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15150:16:0"
                },
                "returnParameters": {
                  "id": 892,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 891,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 899,
                      "src": "15187:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 890,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15187:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15186:9:0"
                },
                "scope": 1370,
                "src": "15126:116:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 950,
                  "nodeType": "Block",
                  "src": "15386:286:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 913,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 908,
                          "name": "_round",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 901,
                          "src": "15400:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 912,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 909,
                              "name": "rounds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "15410:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                              }
                            },
                            "id": 910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "15410:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 911,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15426:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "15410:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "15400:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 947,
                      "nodeType": "IfStatement",
                      "src": "15396:252:0",
                      "trueBody": {
                        "id": 946,
                        "nodeType": "Block",
                        "src": "15429:219:0",
                        "statements": [
                          {
                            "body": {
                              "id": 944,
                              "nodeType": "Block",
                              "src": "15492:146:0",
                              "statements": [
                                {
                                  "condition": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_address_payable",
                                      "typeString": "address payable"
                                    },
                                    "id": 934,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 927,
                                            "name": "players",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 750,
                                            "src": "15514:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                              "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                            }
                                          },
                                          "id": 929,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 928,
                                            "name": "_round",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 901,
                                            "src": "15522:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "15514:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                            "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                          }
                                        },
                                        "id": 931,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 930,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 915,
                                          "src": "15530:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "15514:18:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Player_$745_storage",
                                          "typeString": "struct RunningMan.Player storage ref"
                                        }
                                      },
                                      "id": 932,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "addr",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 740,
                                      "src": "15514:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 933,
                                      "name": "_player",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 903,
                                      "src": "15541:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "src": "15514:34:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": null,
                                  "id": 943,
                                  "nodeType": "IfStatement",
                                  "src": "15510:114:0",
                                  "trueBody": {
                                    "id": 942,
                                    "nodeType": "Block",
                                    "src": "15550:74:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "id": 935,
                                                "name": "players",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 750,
                                                "src": "15579:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                  "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                                }
                                              },
                                              "id": 937,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "id": 936,
                                                "name": "_round",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 901,
                                                "src": "15587:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "15579:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                                "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                              }
                                            },
                                            "id": 939,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 938,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 915,
                                              "src": "15595:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "15579:18:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Player_$745_storage",
                                              "typeString": "struct RunningMan.Player storage ref"
                                            }
                                          },
                                          "id": 940,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "balance",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 742,
                                          "src": "15579:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "functionReturnParameters": 907,
                                        "id": 941,
                                        "nodeType": "Return",
                                        "src": "15572:33:0"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 923,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 918,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 915,
                                "src": "15461:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 919,
                                    "name": "players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 750,
                                    "src": "15463:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 921,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 920,
                                    "name": "_round",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 901,
                                    "src": "15471:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "15463:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                    "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                  }
                                },
                                "id": 922,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "15463:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15461:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 945,
                            "initializationExpression": {
                              "assignments": [
                                915
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 915,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 945,
                                  "src": "15448:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 914,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "15448:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 917,
                              "initialValue": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 916,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "15458:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "15448:11:0"
                            },
                            "loopExpression": {
                              "expression": {
                                "argumentTypes": null,
                                "id": 925,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "15487:3:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 924,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 915,
                                  "src": "15487:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 926,
                              "nodeType": "ExpressionStatement",
                              "src": "15487:3:0"
                            },
                            "nodeType": "ForStatement",
                            "src": "15443:195:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "30",
                        "id": 948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "15664:1:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "functionReturnParameters": 907,
                      "id": 949,
                      "nodeType": "Return",
                      "src": "15657:8:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "b0a79459",
                "id": 951,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "getBalance",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 904,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 901,
                      "mutability": "mutable",
                      "name": "_round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 951,
                      "src": "15316:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 900,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15316:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 903,
                      "mutability": "mutable",
                      "name": "_player",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 951,
                      "src": "15332:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      },
                      "typeName": {
                        "id": 902,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15332:15:0",
                        "stateMutability": "payable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15315:41:0"
                },
                "returnParameters": {
                  "id": 907,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 906,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 951,
                      "src": "15377:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 905,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15377:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15376:9:0"
                },
                "scope": 1370,
                "src": "15296:376:0",
                "stateMutability": "view",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1056,
                  "nodeType": "Block",
                  "src": "15708:853:0",
                  "statements": [
                    {
                      "assignments": [
                        955
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 955,
                          "mutability": "mutable",
                          "name": "currentRound",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 1056,
                          "src": "15718:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 954,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "15718:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 958,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 956,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "15741:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15741:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "15718:46:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 966,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 960,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "15782:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 961,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "15782:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 962,
                                  "name": "rounds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 21,
                                  "src": "15795:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                    "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                  }
                                },
                                "id": 964,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 963,
                                  "name": "currentRound",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 955,
                                  "src": "15802:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "15795:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Round_$18_storage",
                                  "typeString": "struct RoundStorage.Round storage ref"
                                }
                              },
                              "id": 965,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "amount",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 17,
                              "src": "15795:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "15782:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4552524f523a20616d6f756e74206e6f7420616c6c6f776564",
                            "id": 967,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "15824:27:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_2ae67a886cfceb61dfda7ad3979c45cf2195f49cbbf3a46668c2c9eaf29d3fc3",
                              "typeString": "literal_string \"ERROR: amount not allowed\""
                            },
                            "value": "ERROR: amount not allowed"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_2ae67a886cfceb61dfda7ad3979c45cf2195f49cbbf3a46668c2c9eaf29d3fc3",
                              "typeString": "literal_string \"ERROR: amount not allowed\""
                            }
                          ],
                          "id": 959,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "15774:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 968,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15774:78:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 969,
                      "nodeType": "ExpressionStatement",
                      "src": "15774:78:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 975,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 970,
                              "name": "rounds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "15866:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                              }
                            },
                            "id": 972,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 971,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 955,
                              "src": "15873:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "15866:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Round_$18_storage",
                              "typeString": "struct RoundStorage.Round storage ref"
                            }
                          },
                          "id": 973,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "endTime",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 13,
                          "src": "15866:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 974,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15897:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "15866:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 986,
                      "nodeType": "IfStatement",
                      "src": "15862:119:0",
                      "trueBody": {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 977,
                                    "name": "rounds",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 21,
                                    "src": "15921:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                      "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                                    }
                                  },
                                  "id": 979,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 978,
                                    "name": "currentRound",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 955,
                                    "src": "15928:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "15921:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Round_$18_storage",
                                    "typeString": "struct RoundStorage.Round storage ref"
                                  }
                                },
                                "id": 980,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "endTime",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 13,
                                "src": "15921:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 981,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -17,
                                "src": "15953:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "15921:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "4552524f523a20726f756e64206973206f766572",
                              "id": 983,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "15958:22:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9589742cc4db9e478a7f8197ebd438237e73768e5575e704e285958e006c254c",
                                "typeString": "literal_string \"ERROR: round is over\""
                              },
                              "value": "ERROR: round is over"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9589742cc4db9e478a7f8197ebd438237e73768e5575e704e285958e006c254c",
                                "typeString": "literal_string \"ERROR: round is over\""
                              }
                            ],
                            "id": 976,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "15913:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 984,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "15913:68:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 985,
                        "nodeType": "ExpressionStatement",
                        "src": "15913:68:0"
                      }
                    },
                    {
                      "assignments": [
                        988
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 988,
                          "mutability": "mutable",
                          "name": "isBet",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 1056,
                          "src": "15992:10:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "typeName": {
                            "id": 987,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "15992:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 989,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "15992:10:0"
                    },
                    {
                      "body": {
                        "id": 1018,
                        "nodeType": "Block",
                        "src": "16067:118:0",
                        "statements": [
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              "id": 1011,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 1003,
                                      "name": "players",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 750,
                                      "src": "16085:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                        "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                      }
                                    },
                                    "id": 1005,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 1004,
                                      "name": "currentRound",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 955,
                                      "src": "16093:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "16085:21:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                      "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                    }
                                  },
                                  "id": 1007,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1006,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 991,
                                    "src": "16107:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "16085:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Player_$745_storage",
                                    "typeString": "struct RunningMan.Player storage ref"
                                  }
                                },
                                "id": 1008,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "addr",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 740,
                                "src": "16085:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1009,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "16118:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1010,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "16118:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "16085:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 1017,
                            "nodeType": "IfStatement",
                            "src": "16081:94:0",
                            "trueBody": {
                              "id": 1016,
                              "nodeType": "Block",
                              "src": "16130:45:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1014,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "id": 1012,
                                      "name": "isBet",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 988,
                                      "src": "16148:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "hexValue": "74727565",
                                      "id": 1013,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "bool",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "16156:4:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      },
                                      "value": "true"
                                    },
                                    "src": "16148:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 1015,
                                  "nodeType": "ExpressionStatement",
                                  "src": "16148:12:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 999,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 994,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 991,
                          "src": "16030:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 995,
                              "name": "players",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 750,
                              "src": "16032:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                              }
                            },
                            "id": 997,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 996,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 955,
                              "src": "16040:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "16032:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                            }
                          },
                          "id": 998,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "16032:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "16030:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1019,
                      "initializationExpression": {
                        "assignments": [
                          991
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 991,
                            "mutability": "mutable",
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "overrides": null,
                            "scope": 1019,
                            "src": "16017:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 990,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "16017:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 993,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 992,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "16027:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "16017:11:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1001,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "16062:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 1000,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 991,
                            "src": "16062:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1002,
                        "nodeType": "ExpressionStatement",
                        "src": "16062:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "16012:173:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 1023,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1021,
                              "name": "isBet",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 988,
                              "src": "16203:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "66616c7365",
                              "id": 1022,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "16212:5:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            "src": "16203:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4552524f523a20616c726561647920626574",
                            "id": 1024,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16219:20:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9b776f4faedbad0a8e9fa2321e35e410b3613d2684b17da6629a3f10e76de7e8",
                              "typeString": "literal_string \"ERROR: already bet\""
                            },
                            "value": "ERROR: already bet"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_9b776f4faedbad0a8e9fa2321e35e410b3613d2684b17da6629a3f10e76de7e8",
                              "typeString": "literal_string \"ERROR: already bet\""
                            }
                          ],
                          "id": 1020,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "16195:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1025,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16195:45:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1026,
                      "nodeType": "ExpressionStatement",
                      "src": "16195:45:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "id": 1028,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "16263:6:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "id": 1027,
                          "name": "isBet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 988,
                          "src": "16264:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1055,
                      "nodeType": "IfStatement",
                      "src": "16259:296:0",
                      "trueBody": {
                        "id": 1054,
                        "nodeType": "Block",
                        "src": "16271:284:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1034,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "16343:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1035,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "16343:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1036,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": -15,
                                        "src": "16380:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 1037,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "value",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "16380:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1038,
                                        "name": "State",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 738,
                                        "src": "16414:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_State_$738_$",
                                          "typeString": "type(enum RunningMan.State)"
                                        }
                                      },
                                      "id": 1039,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "UNDEFINED",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "16414:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_State_$738",
                                        "typeString": "enum RunningMan.State"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      },
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      {
                                        "typeIdentifier": "t_enum$_State_$738",
                                        "typeString": "enum RunningMan.State"
                                      }
                                    ],
                                    "id": 1033,
                                    "name": "Player",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 745,
                                    "src": "16312:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_struct$_Player_$745_storage_ptr_$",
                                      "typeString": "type(struct RunningMan.Player storage pointer)"
                                    }
                                  },
                                  "id": 1040,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "structConstructorCall",
                                  "lValueRequested": false,
                                  "names": [
                                    "addr",
                                    "balance",
                                    "state"
                                  ],
                                  "nodeType": "FunctionCall",
                                  "src": "16312:132:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Player_$745_memory_ptr",
                                    "typeString": "struct RunningMan.Player memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_Player_$745_memory_ptr",
                                    "typeString": "struct RunningMan.Player memory"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 1029,
                                    "name": "players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 750,
                                    "src": "16285:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 1031,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1030,
                                    "name": "currentRound",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 955,
                                    "src": "16293:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "16285:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                    "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                  }
                                },
                                "id": 1032,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "push",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "16285:26:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Player_$745_storage_$returns$__$",
                                  "typeString": "function (struct RunningMan.Player storage ref)"
                                }
                              },
                              "id": 1041,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16285:160:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1042,
                            "nodeType": "ExpressionStatement",
                            "src": "16285:160:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1043,
                                "name": "updateRoundFirstDeposit",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 117,
                                "src": "16460:23:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                  "typeString": "function ()"
                                }
                              },
                              "id": 1044,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16460:25:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1045,
                            "nodeType": "ExpressionStatement",
                            "src": "16460:25:0"
                          },
                          {
                            "eventCall": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1047,
                                  "name": "currentRound",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 955,
                                  "src": "16508:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1048,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "16522:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1049,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "16522:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1050,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": -15,
                                    "src": "16534:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1051,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "16534:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 1046,
                                "name": "Bet",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 32,
                                "src": "16504:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256,address,uint256)"
                                }
                              },
                              "id": 1052,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "16504:40:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1053,
                            "nodeType": "EmitStatement",
                            "src": "16499:45:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "11610c25",
                "id": 1057,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "bet",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 952,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15690:2:0"
                },
                "returnParameters": {
                  "id": 953,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15708:0:0"
                },
                "scope": 1370,
                "src": "15678:883:0",
                "stateMutability": "payable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1063,
                  "nodeType": "Block",
                  "src": "16615:27:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1060,
                          "name": "newRound",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 167,
                          "src": "16625:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1061,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16625:10:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1062,
                      "nodeType": "ExpressionStatement",
                      "src": "16625:10:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1064,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_open",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 1058,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16603:2:0"
                },
                "returnParameters": {
                  "id": 1059,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16615:0:0"
                },
                "scope": 1370,
                "src": "16589:53:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1087,
                  "nodeType": "Block",
                  "src": "16673:184:0",
                  "statements": [
                    {
                      "assignments": [
                        1068
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1068,
                          "mutability": "mutable",
                          "name": "currentRound",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 1087,
                          "src": "16683:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1067,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "16683:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1071,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1069,
                          "name": "getCurrentRoundNumber",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "16706:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 1070,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16706:23:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "16683:46:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1073,
                            "name": "currentRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1068,
                            "src": "16750:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1072,
                          "name": "_calculate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1308,
                          "src": "16739:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 1074,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16739:24:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1075,
                      "nodeType": "ExpressionStatement",
                      "src": "16739:24:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1081,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1076,
                              "name": "rounds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 21,
                              "src": "16773:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Round_$18_storage_$dyn_storage",
                                "typeString": "struct RoundStorage.Round storage ref[] storage ref"
                              }
                            },
                            "id": 1078,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1077,
                              "name": "currentRound",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1068,
                              "src": "16780:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "16773:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Round_$18_storage",
                              "typeString": "struct RoundStorage.Round storage ref"
                            }
                          },
                          "id": 1079,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "finalized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 9,
                          "src": "16773:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1080,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "16806:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "16773:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1082,
                      "nodeType": "ExpressionStatement",
                      "src": "16773:37:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1084,
                            "name": "currentRound",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1068,
                            "src": "16837:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1083,
                          "name": "RoundEnded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "16826:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 1085,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16826:24:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1086,
                      "nodeType": "EmitStatement",
                      "src": "16821:29:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1088,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_end",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 1065,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16661:2:0"
                },
                "returnParameters": {
                  "id": 1066,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16673:0:0"
                },
                "scope": 1370,
                "src": "16648:209:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1307,
                  "nodeType": "Block",
                  "src": "16944:1535:0",
                  "statements": [
                    {
                      "assignments": [
                        1094
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1094,
                          "mutability": "mutable",
                          "name": "onePercent",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 1307,
                          "src": "16954:18:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1093,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "16954:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1101,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        },
                        "id": 1100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "313030",
                          "id": 1095,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "16975:3:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_100_by_1",
                            "typeString": "int_const 100"
                          },
                          "value": "100"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              },
                              "id": 1098,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "hexValue": "3130",
                                "id": 1096,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16980:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_10_by_1",
                                  "typeString": "int_const 10"
                                },
                                "value": "10"
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "**",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "36",
                                "id": 1097,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16984:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_6_by_1",
                                  "typeString": "int_const 6"
                                },
                                "value": "6"
                              },
                              "src": "16980:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000000_by_1",
                                "typeString": "int_const 1000000"
                              }
                            }
                          ],
                          "id": 1099,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "16979:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000_by_1",
                            "typeString": "int_const 1000000"
                          }
                        },
                        "src": "16975:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_100000000_by_1",
                          "typeString": "int_const 100000000"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "16954:32:0"
                    },
                    {
                      "assignments": [
                        1103
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1103,
                          "mutability": "mutable",
                          "name": "numberOfWinners",
                          "nodeType": "VariableDeclaration",
                          "overrides": null,
                          "scope": 1307,
                          "src": "16996:23:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1102,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "16996:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1114,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1112,
                            "name": "onePercent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "17065:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1109,
                                "name": "winPercent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 733,
                                "src": "17049:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 1104,
                                    "name": "players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 750,
                                    "src": "17022:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 1106,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1105,
                                    "name": "_round",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1090,
                                    "src": "17030:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "17022:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                    "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                  }
                                },
                                "id": 1107,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17022:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "mul",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 433,
                              "src": "17022:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1110,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17022:38:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1111,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 450,
                          "src": "17022:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17022:54:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "16996:80:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1115,
                          "name": "numberOfWinners",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1103,
                          "src": "17091:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "17110:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "17091:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 1305,
                        "nodeType": "Block",
                        "src": "17446:1027:0",
                        "statements": [
                          {
                            "assignments": [
                              1162
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1162,
                                "mutability": "mutable",
                                "name": "totalReward",
                                "nodeType": "VariableDeclaration",
                                "overrides": null,
                                "scope": 1305,
                                "src": "17460:19:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1161,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17460:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 1163,
                            "initialValue": null,
                            "nodeType": "VariableDeclarationStatement",
                            "src": "17460:19:0"
                          },
                          {
                            "body": {
                              "id": 1215,
                              "nodeType": "Block",
                              "src": "17542:293:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1187,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "id": 1177,
                                      "name": "totalReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1162,
                                      "src": "17560:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "expression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "id": 1180,
                                                "name": "players",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 750,
                                                "src": "17590:7:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                  "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                                }
                                              },
                                              "id": 1182,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "id": 1181,
                                                "name": "_round",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1090,
                                                "src": "17598:6:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "17590:15:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                                "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                              }
                                            },
                                            "id": 1184,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 1183,
                                              "name": "i",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1165,
                                              "src": "17606:1:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "17590:18:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_Player_$745_storage",
                                              "typeString": "struct RunningMan.Player storage ref"
                                            }
                                          },
                                          "id": 1185,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "balance",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 742,
                                          "src": "17590:26:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1178,
                                          "name": "totalReward",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1162,
                                          "src": "17574:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1179,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "add",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 353,
                                        "src": "17574:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1186,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "17574:43:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17560:57:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1188,
                                  "nodeType": "ExpressionStatement",
                                  "src": "17560:57:0"
                                },
                                {
                                  "condition": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1191,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 1189,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1165,
                                      "src": "17639:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 1190,
                                      "name": "numberOfWinners",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1103,
                                      "src": "17643:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "17639:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseBody": {
                                    "id": 1213,
                                    "nodeType": "Block",
                                    "src": "17743:78:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1211,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1203,
                                                  "name": "players",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 750,
                                                  "src": "17765:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                    "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                                  }
                                                },
                                                "id": 1206,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1204,
                                                  "name": "_round",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1090,
                                                  "src": "17773:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "17765:15:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                                  "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                                }
                                              },
                                              "id": 1207,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "id": 1205,
                                                "name": "i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1165,
                                                "src": "17781:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "17765:18:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Player_$745_storage",
                                                "typeString": "struct RunningMan.Player storage ref"
                                              }
                                            },
                                            "id": 1208,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "memberName": "state",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 744,
                                            "src": "17765:24:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_State_$738",
                                              "typeString": "enum RunningMan.State"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 1209,
                                              "name": "State",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 738,
                                              "src": "17792:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_enum$_State_$738_$",
                                                "typeString": "type(enum RunningMan.State)"
                                              }
                                            },
                                            "id": 1210,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "LOSE",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": null,
                                            "src": "17792:10:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_State_$738",
                                              "typeString": "enum RunningMan.State"
                                            }
                                          },
                                          "src": "17765:37:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_State_$738",
                                            "typeString": "enum RunningMan.State"
                                          }
                                        },
                                        "id": 1212,
                                        "nodeType": "ExpressionStatement",
                                        "src": "17765:37:0"
                                      }
                                    ]
                                  },
                                  "id": 1214,
                                  "nodeType": "IfStatement",
                                  "src": "17635:186:0",
                                  "trueBody": {
                                    "id": 1202,
                                    "nodeType": "Block",
                                    "src": "17660:77:0",
                                    "statements": [
                                      {
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1200,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftHandSide": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "baseExpression": {
                                                "argumentTypes": null,
                                                "baseExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1192,
                                                  "name": "players",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 750,
                                                  "src": "17682:7:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                    "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                                  }
                                                },
                                                "id": 1195,
                                                "indexExpression": {
                                                  "argumentTypes": null,
                                                  "id": 1193,
                                                  "name": "_round",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 1090,
                                                  "src": "17690:6:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "isConstant": false,
                                                "isLValue": true,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "IndexAccess",
                                                "src": "17682:15:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                                  "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                                }
                                              },
                                              "id": 1196,
                                              "indexExpression": {
                                                "argumentTypes": null,
                                                "id": 1194,
                                                "name": "i",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1165,
                                                "src": "17698:1:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "17682:18:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Player_$745_storage",
                                                "typeString": "struct RunningMan.Player storage ref"
                                              }
                                            },
                                            "id": 1197,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": true,
                                            "memberName": "state",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 744,
                                            "src": "17682:24:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_State_$738",
                                              "typeString": "enum RunningMan.State"
                                            }
                                          },
                                          "nodeType": "Assignment",
                                          "operator": "=",
                                          "rightHandSide": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 1198,
                                              "name": "State",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 738,
                                              "src": "17709:5:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_enum$_State_$738_$",
                                                "typeString": "type(enum RunningMan.State)"
                                              }
                                            },
                                            "id": 1199,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "memberName": "WIN",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": null,
                                            "src": "17709:9:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_enum$_State_$738",
                                              "typeString": "enum RunningMan.State"
                                            }
                                          },
                                          "src": "17682:36:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_enum$_State_$738",
                                            "typeString": "enum RunningMan.State"
                                          }
                                        },
                                        "id": 1201,
                                        "nodeType": "ExpressionStatement",
                                        "src": "17682:36:0"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1168,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1165,
                                "src": "17511:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 1169,
                                    "name": "players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 750,
                                    "src": "17513:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 1171,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1170,
                                    "name": "_round",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1090,
                                    "src": "17521:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "17513:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                    "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                  }
                                },
                                "id": 1172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17513:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "17511:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1216,
                            "initializationExpression": {
                              "assignments": [
                                1165
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1165,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1216,
                                  "src": "17498:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1164,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "17498:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1167,
                              "initialValue": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1166,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17508:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "17498:11:0"
                            },
                            "loopExpression": {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1175,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "17537:3:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 1174,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1165,
                                  "src": "17537:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1176,
                              "nodeType": "ExpressionStatement",
                              "src": "17537:3:0"
                            },
                            "nodeType": "ForStatement",
                            "src": "17493:342:0"
                          },
                          {
                            "assignments": [
                              1218
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1218,
                                "mutability": "mutable",
                                "name": "feeAmount",
                                "nodeType": "VariableDeclaration",
                                "overrides": null,
                                "scope": 1305,
                                "src": "17849:17:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1217,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "17849:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 1231,
                            "initialValue": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_rational_1000000_by_1",
                                    "typeString": "int_const 1000000"
                                  },
                                  "id": 1229,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "3130",
                                    "id": 1227,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17903:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10_by_1",
                                      "typeString": "int_const 10"
                                    },
                                    "value": "10"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "36",
                                    "id": 1228,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "17907:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_6_by_1",
                                      "typeString": "int_const 6"
                                    },
                                    "value": "6"
                                  },
                                  "src": "17903:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000_by_1",
                                    "typeString": "int_const 1000000"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_1000000_by_1",
                                    "typeString": "int_const 1000000"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "hexValue": "313030",
                                      "id": 1224,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "17894:3:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      },
                                      "value": "100"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_rational_100_by_1",
                                        "typeString": "int_const 100"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 1221,
                                          "name": "fee",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 3,
                                          "src": "17885:3:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1219,
                                          "name": "totalReward",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1162,
                                          "src": "17869:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1220,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "mul",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 433,
                                        "src": "17869:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1222,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "17869:20:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1223,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "div",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 450,
                                    "src": "17869:24:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                      "typeString": "function (uint256,uint256) pure returns (uint256)"
                                    }
                                  },
                                  "id": 1225,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17869:29:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1226,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 450,
                                "src": "17869:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1230,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17869:40:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "17849:60:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1235,
                                    "name": "owner",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 655,
                                    "src": "17954:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                      "typeString": "function () view returns (address)"
                                    }
                                  },
                                  "id": 1236,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "17954:7:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1237,
                                  "name": "feeAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1218,
                                  "src": "17963:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1232,
                                  "name": "TransferHelper",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 326,
                                  "src": "17923:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_TransferHelper_$326_$",
                                    "typeString": "type(library TransferHelper)"
                                  }
                                },
                                "id": 1234,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "safeTransferETH",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 325,
                                "src": "17923:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                  "typeString": "function (address,uint256)"
                                }
                              },
                              "id": 1238,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17923:50:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1239,
                            "nodeType": "ExpressionStatement",
                            "src": "17923:50:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 1245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "id": 1240,
                                "name": "totalReward",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1162,
                                "src": "17987:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1243,
                                    "name": "feeAmount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1218,
                                    "src": "18017:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1241,
                                    "name": "totalReward",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1162,
                                    "src": "18001:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1242,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 370,
                                  "src": "18001:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 1244,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "18001:26:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "17987:40:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1246,
                            "nodeType": "ExpressionStatement",
                            "src": "17987:40:0"
                          },
                          {
                            "assignments": [
                              1248
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 1248,
                                "mutability": "mutable",
                                "name": "winAmount",
                                "nodeType": "VariableDeclaration",
                                "overrides": null,
                                "scope": 1305,
                                "src": "18042:17:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 1247,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "18042:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 1253,
                            "initialValue": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1251,
                                  "name": "numberOfWinners",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1103,
                                  "src": "18078:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1249,
                                  "name": "totalReward",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1162,
                                  "src": "18062:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1250,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "div",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 450,
                                "src": "18062:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 1252,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18062:32:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "18042:52:0"
                          },
                          {
                            "body": {
                              "id": 1290,
                              "nodeType": "Block",
                              "src": "18150:193:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1271,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 1264,
                                            "name": "players",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 750,
                                            "src": "18168:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                              "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                            }
                                          },
                                          "id": 1267,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 1265,
                                            "name": "_round",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1090,
                                            "src": "18176:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "18168:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                            "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                          }
                                        },
                                        "id": 1268,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 1266,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1255,
                                          "src": "18184:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "18168:18:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Player_$745_storage",
                                          "typeString": "struct RunningMan.Player storage ref"
                                        }
                                      },
                                      "id": 1269,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberName": "balance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 742,
                                      "src": "18168:26:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "id": 1270,
                                      "name": "winAmount",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1248,
                                      "src": "18197:9:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "18168:38:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1272,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18168:38:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 1274,
                                              "name": "players",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 750,
                                              "src": "18235:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                              }
                                            },
                                            "id": 1276,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 1275,
                                              "name": "_round",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1090,
                                              "src": "18243:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "18235:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                            }
                                          },
                                          "id": 1278,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 1277,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1255,
                                            "src": "18251:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "18235:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Player_$745_storage",
                                            "typeString": "struct RunningMan.Player storage ref"
                                          }
                                        },
                                        "id": 1279,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "addr",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 740,
                                        "src": "18235:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 1280,
                                        "name": "winAmount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1248,
                                        "src": "18260:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 1273,
                                      "name": "addBalance",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 571,
                                      "src": "18224:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256)"
                                      }
                                    },
                                    "id": 1281,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "18224:46:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 1282,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18224:46:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1288,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "id": 1283,
                                      "name": "totalReward",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1162,
                                      "src": "18288:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 1286,
                                          "name": "winAmount",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1248,
                                          "src": "18318:9:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 1284,
                                          "name": "totalReward",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1162,
                                          "src": "18302:11:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 1285,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "sub",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 370,
                                        "src": "18302:15:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 1287,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "18302:26:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "18288:40:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 1289,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18288:40:0"
                                }
                              ]
                            },
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1260,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1258,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1255,
                                "src": "18126:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1259,
                                "name": "numberOfWinners",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1103,
                                "src": "18128:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "18126:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1291,
                            "initializationExpression": {
                              "assignments": [
                                1255
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1255,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1291,
                                  "src": "18113:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1254,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "18113:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1257,
                              "initialValue": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1256,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "18123:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "18113:11:0"
                            },
                            "loopExpression": {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1262,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "18145:3:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 1261,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1255,
                                  "src": "18145:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1263,
                              "nodeType": "ExpressionStatement",
                              "src": "18145:3:0"
                            },
                            "nodeType": "ForStatement",
                            "src": "18108:235:0"
                          },
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1292,
                                "name": "totalReward",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1162,
                                "src": "18361:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1293,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "18375:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "18361:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 1304,
                            "nodeType": "IfStatement",
                            "src": "18357:106:0",
                            "trueBody": {
                              "id": 1303,
                              "nodeType": "Block",
                              "src": "18378:85:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "arguments": [],
                                        "expression": {
                                          "argumentTypes": [],
                                          "id": 1298,
                                          "name": "owner",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 655,
                                          "src": "18427:5:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                            "typeString": "function () view returns (address)"
                                          }
                                        },
                                        "id": 1299,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "18427:7:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 1300,
                                        "name": "totalReward",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1162,
                                        "src": "18436:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1295,
                                        "name": "TransferHelper",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 326,
                                        "src": "18396:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_TransferHelper_$326_$",
                                          "typeString": "type(library TransferHelper)"
                                        }
                                      },
                                      "id": 1297,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "safeTransferETH",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 325,
                                      "src": "18396:30:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256)"
                                      }
                                    },
                                    "id": 1301,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "18396:52:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 1302,
                                  "nodeType": "ExpressionStatement",
                                  "src": "18396:52:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "id": 1306,
                      "nodeType": "IfStatement",
                      "src": "17087:1386:0",
                      "trueBody": {
                        "id": 1160,
                        "nodeType": "Block",
                        "src": "17113:327:0",
                        "statements": [
                          {
                            "body": {
                              "id": 1158,
                              "nodeType": "Block",
                              "src": "17257:173:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 1134,
                                              "name": "players",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 750,
                                              "src": "17306:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                              }
                                            },
                                            "id": 1136,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 1135,
                                              "name": "_round",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1090,
                                              "src": "17314:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "17306:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                            }
                                          },
                                          "id": 1138,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 1137,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1119,
                                            "src": "17322:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "17306:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Player_$745_storage",
                                            "typeString": "struct RunningMan.Player storage ref"
                                          }
                                        },
                                        "id": 1139,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "addr",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 740,
                                        "src": "17306:23:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "expression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "baseExpression": {
                                              "argumentTypes": null,
                                              "id": 1140,
                                              "name": "players",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 750,
                                              "src": "17331:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                                "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                              }
                                            },
                                            "id": 1142,
                                            "indexExpression": {
                                              "argumentTypes": null,
                                              "id": 1141,
                                              "name": "_round",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1090,
                                              "src": "17339:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "17331:15:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                              "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                            }
                                          },
                                          "id": 1144,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 1143,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1119,
                                            "src": "17347:1:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "17331:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_Player_$745_storage",
                                            "typeString": "struct RunningMan.Player storage ref"
                                          }
                                        },
                                        "id": 1145,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "balance",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 742,
                                        "src": "17331:26:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1131,
                                        "name": "TransferHelper",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 326,
                                        "src": "17275:14:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_contract$_TransferHelper_$326_$",
                                          "typeString": "type(library TransferHelper)"
                                        }
                                      },
                                      "id": 1133,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "safeTransferETH",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 325,
                                      "src": "17275:30:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256)"
                                      }
                                    },
                                    "id": 1146,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "17275:83:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 1147,
                                  "nodeType": "ExpressionStatement",
                                  "src": "17275:83:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 1156,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftHandSide": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "baseExpression": {
                                          "argumentTypes": null,
                                          "baseExpression": {
                                            "argumentTypes": null,
                                            "id": 1148,
                                            "name": "players",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 750,
                                            "src": "17376:7:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                              "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                            }
                                          },
                                          "id": 1151,
                                          "indexExpression": {
                                            "argumentTypes": null,
                                            "id": 1149,
                                            "name": "_round",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1090,
                                            "src": "17384:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "17376:15:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                            "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                          }
                                        },
                                        "id": 1152,
                                        "indexExpression": {
                                          "argumentTypes": null,
                                          "id": 1150,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1119,
                                          "src": "17392:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "17376:18:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_Player_$745_storage",
                                          "typeString": "struct RunningMan.Player storage ref"
                                        }
                                      },
                                      "id": 1153,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": true,
                                      "memberName": "state",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 744,
                                      "src": "17376:24:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_State_$738",
                                        "typeString": "enum RunningMan.State"
                                      }
                                    },
                                    "nodeType": "Assignment",
                                    "operator": "=",
                                    "rightHandSide": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 1154,
                                        "name": "State",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 738,
                                        "src": "17403:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_enum$_State_$738_$",
                                          "typeString": "type(enum RunningMan.State)"
                                        }
                                      },
                                      "id": 1155,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberName": "REFUND",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "17403:12:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_enum$_State_$738",
                                        "typeString": "enum RunningMan.State"
                                      }
                                    },
                                    "src": "17376:39:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_enum$_State_$738",
                                      "typeString": "enum RunningMan.State"
                                    }
                                  },
                                  "id": 1157,
                                  "nodeType": "ExpressionStatement",
                                  "src": "17376:39:0"
                                }
                              ]
                            },
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1127,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1122,
                                "name": "i",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1119,
                                "src": "17226:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 1123,
                                    "name": "players",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 750,
                                    "src": "17228:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_struct$_Player_$745_storage_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => struct RunningMan.Player storage ref[] storage ref)"
                                    }
                                  },
                                  "id": 1125,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 1124,
                                    "name": "_round",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1090,
                                    "src": "17236:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "17228:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Player_$745_storage_$dyn_storage",
                                    "typeString": "struct RunningMan.Player storage ref[] storage ref"
                                  }
                                },
                                "id": 1126,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17228:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "17226:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 1159,
                            "initializationExpression": {
                              "assignments": [
                                1119
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1119,
                                  "mutability": "mutable",
                                  "name": "i",
                                  "nodeType": "VariableDeclaration",
                                  "overrides": null,
                                  "scope": 1159,
                                  "src": "17213:9:0",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1118,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "17213:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "value": null,
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1121,
                              "initialValue": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1120,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17223:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "17213:11:0"
                            },
                            "loopExpression": {
                              "expression": {
                                "argumentTypes": null,
                                "id": 1129,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "17252:3:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "id": 1128,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1119,
                                  "src": "17252:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1130,
                              "nodeType": "ExpressionStatement",
                              "src": "17252:3:0"
                            },
                            "nodeType": "ForStatement",
                            "src": "17208:222:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": null,
                "id": 1308,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_calculate",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 1091,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1090,
                      "mutability": "mutable",
                      "name": "_round",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1308,
                      "src": "16919:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1089,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "16919:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16918:16:0"
                },
                "returnParameters": {
                  "id": 1092,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16944:0:0"
                },
                "scope": 1370,
                "src": "16899:1580:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1337,
                  "nodeType": "Block",
                  "src": "18592:119:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1323,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1321,
                          "name": "fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "18602:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1322,
                          "name": "_fee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1310,
                          "src": "18608:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "18602:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1324,
                      "nodeType": "ExpressionStatement",
                      "src": "18602:10:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1325,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5,
                          "src": "18622:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1326,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1312,
                          "src": "18631:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "18622:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1328,
                      "nodeType": "ExpressionStatement",
                      "src": "18622:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1331,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1329,
                          "name": "roundTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7,
                          "src": "18648:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1330,
                          "name": "_roundTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1314,
                          "src": "18660:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "18648:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1332,
                      "nodeType": "ExpressionStatement",
                      "src": "18648:22:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1333,
                          "name": "winPercent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 733,
                          "src": "18680:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1334,
                          "name": "_winPercent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1316,
                          "src": "18693:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "18680:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1336,
                      "nodeType": "ExpressionStatement",
                      "src": "18680:24:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "247d9bb9",
                "id": 1338,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1319,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1318,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 668,
                      "src": "18582:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18582:9:0"
                  }
                ],
                "name": "setRules",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 1317,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1310,
                      "mutability": "mutable",
                      "name": "_fee",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1338,
                      "src": "18503:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1309,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18503:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1312,
                      "mutability": "mutable",
                      "name": "_amount",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1338,
                      "src": "18517:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1311,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18517:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1314,
                      "mutability": "mutable",
                      "name": "_roundTime",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1338,
                      "src": "18534:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1313,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18534:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1316,
                      "mutability": "mutable",
                      "name": "_winPercent",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1338,
                      "src": "18554:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1315,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "18554:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18502:72:0"
                },
                "returnParameters": {
                  "id": 1320,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18592:0:0"
                },
                "scope": 1370,
                "src": "18485:226:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "baseFunctions": [
                  591
                ],
                "body": {
                  "id": 1350,
                  "nodeType": "Block",
                  "src": "18787:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1346,
                          "name": "maintainer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "18797:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1347,
                          "name": "_maintainer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1340,
                          "src": "18810:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "18797:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1349,
                      "nodeType": "ExpressionStatement",
                      "src": "18797:24:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "13ea5d29",
                "id": 1351,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1344,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1343,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 668,
                      "src": "18777:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18777:9:0"
                  }
                ],
                "name": "setMaintainer",
                "nodeType": "FunctionDefinition",
                "overrides": {
                  "id": 1342,
                  "nodeType": "OverrideSpecifier",
                  "overrides": [],
                  "src": "18768:8:0"
                },
                "parameters": {
                  "id": 1341,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1340,
                      "mutability": "mutable",
                      "name": "_maintainer",
                      "nodeType": "VariableDeclaration",
                      "overrides": null,
                      "scope": 1351,
                      "src": "18740:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1339,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "18740:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18739:21:0"
                },
                "returnParameters": {
                  "id": 1345,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18787:0:0"
                },
                "scope": 1370,
                "src": "18717:111:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1368,
                  "nodeType": "Block",
                  "src": "18949:98:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1357,
                              "name": "roundOver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 146,
                              "src": "18967:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                "typeString": "function () view returns (bool)"
                              }
                            },
                            "id": 1358,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "18967:11:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4552524f523a20726f756e64206973206e6f74206f766572",
                            "id": 1359,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18980:26:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_07aeeb9395c002aa24b2274404cc289b9f703ea1116b21b4cd5b295aeaee65dd",
                              "typeString": "literal_string \"ERROR: round is not over\""
                            },
                            "value": "ERROR: round is not over"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_07aeeb9395c002aa24b2274404cc289b9f703ea1116b21b4cd5b295aeaee65dd",
                              "typeString": "literal_string \"ERROR: round is not over\""
                            }
                          ],
                          "id": 1356,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            -18,
                            -18
                          ],
                          "referencedDeclaration": -18,
                          "src": "18959:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18959:48:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1361,
                      "nodeType": "ExpressionStatement",
                      "src": "18959:48:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1362,
                          "name": "_end",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1088,
                          "src": "19017:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1363,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19017:6:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1364,
                      "nodeType": "ExpressionStatement",
                      "src": "19017:6:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1365,
                          "name": "_open",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1064,
                          "src": "19033:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1366,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19033:7:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1367,
                      "nodeType": "ExpressionStatement",
                      "src": "19033:7:0"
                    }
                  ]
                },
                "documentation": null,
                "functionSelector": "d826f88f",
                "id": 1369,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1354,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1353,
                      "name": "onlyMaintainer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 586,
                      "src": "18934:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18934:14:0"
                  }
                ],
                "name": "reset",
                "nodeType": "FunctionDefinition",
                "overrides": null,
                "parameters": {
                  "id": 1352,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18924:2:0"
                },
                "returnParameters": {
                  "id": 1355,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18949:0:0"
                },
                "scope": 1370,
                "src": "18910:137:0",
                "stateMutability": "nonpayable",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 1371,
            "src": "13612:5437:0"
          }
        ],
        "src": "170:18879:0"
      },
      "id": 0
    }
  }
}