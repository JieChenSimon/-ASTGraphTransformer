{
  "contracts": {
    "source code": {
      "C10Token": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405266b1a2bc2ec50000600d556005600e55670de0b6b3a7640000600f55603260105560326011553480156200003757600080fd5b5060405160408062002c6a833981018060405260408110156200005957600080fd5b508051602091820151604080518082018252600f81527f43727970746f3130204865646765640000000000000000000000000000000000818601908152825180840190935260038084527f4331300000000000000000000000000000000000000000000000000000000000968401969096528151949593949193601292620000e29290620003ee565b508151620000f8906004906020850190620003ee565b506005805460ff191660ff929092169190911761010060a860020a0319166101003381029190911791829055604051600160a060020a0391909204169250600091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a36200017333640100000000620002bb810204565b6007805460ff1916905562000191336401000000006200030d810204565b604080518082019091528281526103e860209091018190526012839055601355816200021e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964207072696365206e756d657261746f72000000000000000000604482015290519081900360640190fd5b600160a060020a0381166200029457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c69642077686974656c697374206164647265737300000000000000604482015290519081900360640190fd5b60148054600160a060020a031916600160a060020a03929092169190911790555062000493565b620002d6600682640100000000620026e26200035f82021704565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b62000328600882640100000000620026e26200035f82021704565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a0381166200037357600080fd5b620003888282640100000000620003b8810204565b156200039357600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a038216620003ce57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200043157805160ff191683800117855562000461565b8280016001018555821562000461579182015b828111156200046157825182559160200191906001019062000444565b506200046f92915062000473565b5090565b6200049091905b808211156200046f57600081556001016200047a565b90565b6127c780620004a36000396000f3fe6080604052600436106102cb576000357c0100000000000000000000000000000000000000000000000000000000900480638456cb5911610192578063a6f2ae3a116100f9578063cf60402f116100b2578063df8de3e71161008c578063df8de3e714610a87578063e8078d9414610aad578063f2fde38b14610ab5578063f3f4370314610ae8576102cb565b8063cf60402f146109f8578063dbb2455414610a22578063dd62ed3e14610a4c576102cb565b8063a6f2ae3a14610930578063a9059cbb14610938578063aa271e1a14610971578063c239f6ff146109a4578063cc9be27a146109b9578063cf0aed0e146109ce576102cb565b8063983b2d561161014b578063983b2d561461082d57806398650275146108605780639c8f9f23146108755780639ee679e81461089f578063a035b1fe146108c9578063a457c2d7146108f7576102cb565b80638456cb591461079a57806384900b04146107af5780638d6cc56d146107c45780638da5cb5b146107ee5780638f32d59b1461080357806395d89b4114610818576102cb565b806346fbf68e116102365780636b2c0f55116101ef5780636b2c0f551461069e5780636ef8d66d146106d157806370a08231146106e6578063715018a61461071957806379cc67901461072e57806382dc1ec414610767576102cb565b806346fbf68e1461058357806354ffbddb146105b65780635c975abb146105fc5780635cc07076146106115780636130aabf1461063b578063640c254414610674576102cb565b806331a4cbb61161028857806331a4cbb61461047557806339509351146104a85780633f4ba83a146104e157806340c10f19146104f657806342966c681461052f578063454adff914610559576102cb565b806306fdde03146102d6578063095ea7b31461036057806318160ddd146103ad57806323b872dd146103d45780633092afd514610417578063313ce5671461044a575b6102d433610b1b565b005b3480156102e257600080fd5b506102eb610d56565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561032557818101518382015260200161030d565b50505050905090810190601f1680156103525780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036c57600080fd5b506103996004803603604081101561038357600080fd5b50600160a060020a038135169060200135610dec565b604080519115158252519081900360200190f35b3480156103b957600080fd5b506103c2610e57565b60408051918252519081900360200190f35b3480156103e057600080fd5b50610399600480360360608110156103f757600080fd5b50600160a060020a03813581169160208101359091169060400135610e5d565b34801561042357600080fd5b506102d46004803603602081101561043a57600080fd5b5035600160a060020a0316610f14565b34801561045657600080fd5b5061045f610f92565b6040805160ff9092168252519081900360200190f35b34801561048157600080fd5b506103c26004803603602081101561049857600080fd5b5035600160a060020a0316610f9b565b3480156104b457600080fd5b50610399600480360360408110156104cb57600080fd5b50600160a060020a038135169060200135610fad565b3480156104ed57600080fd5b506102d4611049565b34801561050257600080fd5b506103996004803603604081101561051957600080fd5b50600160a060020a0381351690602001356110a9565b34801561053b57600080fd5b506102d46004803603602081101561055257600080fd5b50356110e0565b34801561056557600080fd5b506102d46004803603602081101561057c57600080fd5b50356110ea565b34801561058f57600080fd5b50610399600480360360208110156105a657600080fd5b5035600160a060020a0316611158565b3480156105c257600080fd5b506105e0600480360360208110156105d957600080fd5b503561116b565b60408051600160a060020a039092168252519081900360200190f35b34801561060857600080fd5b50610399611192565b34801561061d57600080fd5b506105e06004803603602081101561063457600080fd5b503561119b565b34801561064757600080fd5b506102d46004803603604081101561065e57600080fd5b50600160a060020a0381351690602001356111a8565b34801561068057600080fd5b506102d46004803603602081101561069757600080fd5b50356111c7565b3480156106aa57600080fd5b506102d4600480360360208110156106c157600080fd5b5035600160a060020a0316611235565b3480156106dd57600080fd5b506102d46112b0565b3480156106f257600080fd5b506103c26004803603602081101561070957600080fd5b5035600160a060020a03166112bb565b34801561072557600080fd5b506102d46112d6565b34801561073a57600080fd5b506102d46004803603604081101561075157600080fd5b50600160a060020a038135169060200135611344565b34801561077357600080fd5b506102d46004803603602081101561078a57600080fd5b5035600160a060020a031661134e565b3480156107a657600080fd5b506102d4611369565b3480156107bb57600080fd5b506105e06113cd565b3480156107d057600080fd5b506102d4600480360360208110156107e757600080fd5b50356113dc565b3480156107fa57600080fd5b506105e061149f565b34801561080f57600080fd5b506103996114b3565b34801561082457600080fd5b506102eb6114c9565b34801561083957600080fd5b506102d46004803603602081101561085057600080fd5b5035600160a060020a031661152a565b34801561086c57600080fd5b506102d4611545565b34801561088157600080fd5b506102d46004803603602081101561089857600080fd5b503561154e565b3480156108ab57600080fd5b506102d4600480360360208110156108c257600080fd5b503561161c565b3480156108d557600080fd5b506108de61189c565b6040805192835260208301919091528051918290030190f35b34801561090357600080fd5b506103996004803603604081101561091a57600080fd5b50600160a060020a0381351690602001356118a5565b6102d46118ee565b34801561094457600080fd5b506103996004803603604081101561095b57600080fd5b50600160a060020a0381351690602001356118f7565b34801561097d57600080fd5b506103996004803603602081101561099457600080fd5b5035600160a060020a0316611904565b3480156109b057600080fd5b506103c2611917565b3480156109c557600080fd5b506103c261191d565b3480156109da57600080fd5b506102d4600480360360208110156109f157600080fd5b5035611923565b348015610a0457600080fd5b506102d460048036036020811015610a1b57600080fd5b5035611991565b348015610a2e57600080fd5b506102d460048036036020811015610a4557600080fd5b50356119ff565b348015610a5857600080fd5b506103c260048036036040811015610a6f57600080fd5b50600160a060020a0381358116916020013516611a6e565b6102d460048036036020811015610a9d57600080fd5b5035600160a060020a0316611a99565b6102d4611d10565b348015610ac157600080fd5b506102d460048036036020811015610ad857600080fd5b5035600160a060020a0316611d9d565b348015610af457600080fd5b506103c260048036036020811015610b0b57600080fd5b5035600160a060020a0316611db7565b60075460ff1615610b2b57600080fd5b601454604080517f3af32abf0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691633af32abf91602480820192602092909190829003018186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d6020811015610bb957600080fd5b5051610c0f576040805160e560020a62461bcd02815260206004820152601360248201527f4d7573742062652077686974656c697374656400000000000000000000000000604482015290519081900360640190fd5b600160a060020a038116610c1f57fe5b600d54341015610c79576040805160e560020a62461bcd02815260206004820152601360248201527f4d696e696d756d20776569206e6f74206d657400000000000000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526009602052604090205480610cf057600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a801805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b610d00813463ffffffff611dc916565b600160a060020a038316600081815260096020908152604091829020939093558051348152905191927f9936746a4565f9766fa768f88f56a7487c78780ac179562773d1c75c5269537e92918290030190a25050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610de25780601f10610db757610100808354040283529160200191610de2565b820191906000526020600020905b815481529060010190602001808311610dc557829003601f168201915b5050505050905090565b6000600160a060020a038316610e0157600080fd5b336000818152600160209081526040808320600160a060020a0388168085529083529281902086905580518681529051929392600080516020612756833981519152929181900390910190a35060015b92915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610e91908363ffffffff611de216565b600160a060020a0385166000908152600160209081526040808320338452909152902055610ec0848484611df7565b600160a060020a038416600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020612756833981519152929181900390910190a35060019392505050565b610f1c6114b3565b610f2557600080fd5b600160a060020a038116331415610f86576040805160e560020a62461bcd02815260206004820152601260248201527f5573652072656e6f756e63654d696e7465720000000000000000000000000000604482015290519081900360640190fd5b610f8f81611ec2565b50565b60055460ff1690565b60096020526000908152604090205481565b6000600160a060020a038316610fc257600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610ff6908363ffffffff611dc916565b336000818152600160209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020612756833981519152929081900390910190a350600192915050565b61105233611158565b61105b57600080fd5b60075460ff1661106a57600080fd5b6007805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b60006110b433611904565b6110bd57600080fd5b60075460ff16156110cd57600080fd5b6110d78383611f0a565b50600192915050565b610f8f3382611fb2565b6110f26114b3565b6110fb57600080fd5b60008111611153576040805160e560020a62461bcd02815260206004820152601660248201527f4d7573742062652067726561746572207468616e203000000000000000000000604482015290519081900360640190fd5b601155565b6000610e5160068363ffffffff61205916565b600a818154811061117857fe5b600091825260209091200154600160a060020a0316905081565b60075460ff1690565b600c818154811061117857fe5b6111b06114b3565b6111b957600080fd5b6111c38282611fb2565b5050565b6111cf6114b3565b6111d857600080fd5b60008111611230576040805160e560020a62461bcd02815260206004820152601660248201527f4d7573742062652067726561746572207468616e203000000000000000000000604482015290519081900360640190fd5b601055565b61123d6114b3565b61124657600080fd5b600160a060020a0381163314156112a7576040805160e560020a62461bcd02815260206004820152601260248201527f5573652072656e6f756e63655061757365720000000000000000000000000000604482015290519081900360640190fd5b610f8f8161208e565b6112b93361208e565b565b600160a060020a031660009081526020819052604090205490565b6112de6114b3565b6112e757600080fd5b6005546040516000916101009004600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6111c382826120d6565b61135733611158565b61136057600080fd5b610f8f81612186565b61137233611158565b61137b57600080fd5b60075460ff161561138b57600080fd5b6007805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b601454600160a060020a031681565b6113e533611904565b6113ee57600080fd5b60008111611446576040805160e560020a62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b60128190556114536121ce565b61145b612389565b60125460135460408051928352602083019190915280517f92664190cca12aca9cd5309d87194bdda75bb51362d71c06e1a6f75c7c7657119281900390910190a150565b6005546101009004600160a060020a031690565b6005546101009004600160a060020a0316331490565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610de25780601f10610db757610100808354040283529160200191610de2565b61153333611904565b61153c57600080fd5b610f8f816125cb565b6112b933611ec2565b6115566114b3565b61155f57600080fd5b30318111156115b8576040805160e560020a62461bcd02815260206004820152601460248201527f496e73756666696369656e742062616c616e6365000000000000000000000000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f193505050501580156115e5573d6000803e3d6000fd5b506040805182815290517f9a5a8a32afd899e7f95003c6e21c9fab2d50e11992439d14472229180c60c7aa9181900360200190a150565b60075460ff161561162c57600080fd5b601454604080517f3af32abf0000000000000000000000000000000000000000000000000000000081523360048201529051600160a060020a0390921691633af32abf91602480820192602092909190829003018186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d60208110156116ba57600080fd5b5051611710576040805160e560020a62461bcd02815260206004820152601360248201527f4d7573742062652077686974656c697374656400000000000000000000000000604482015290519081900360640190fd5b338161171b826112bb565b101561175b5760405160e560020a62461bcd0281526004018080602001828103825260268152602001806127766026913960400191505060405180910390fd5b600f548210156117b5576040805160e560020a62461bcd02815260206004820152600e60248201527f546f6f2066657720746f6b656e73000000000000000000000000000000000000604482015290519081900360640190fd5b6117be826110e0565b600160a060020a0381166000908152600b60205260409020548061183557600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384161790555b611845818463ffffffff611dc916565b600160a060020a0383166000818152600b6020908152604091829020939093558051868152905191927f17040713250ec5f668a1c39e7939900e78558350dbaff0ebef34268dfa8ea4ac92918290030190a2505050565b60125460135482565b6000600160a060020a0383166118ba57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610ff6908363ffffffff611de216565b6112b933610b1b565b60006110d7338484611df7565b6000610e5160088363ffffffff61205916565b600c5490565b600a5490565b61192b6114b3565b61193457600080fd5b6000811161198c576040805160e560020a62461bcd02815260206004820152601e60248201527f4d696e696d756d206d7573742062652067726561746572207468616e20300000604482015290519081900360640190fd5b600d55565b6119996114b3565b6119a257600080fd5b600081116119fa576040805160e560020a62461bcd02815260206004820152601e60248201527f4d696e696d756d206d7573742062652067726561746572207468616e20300000604482015290519081900360640190fd5b600f55565b611a0833611904565b611a1157600080fd5b60008111611a69576040805160e560020a62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b601355565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b611aa16114b3565b611aaa57600080fd5b600160a060020a038116611b08576040805160e560020a62461bcd02815260206004820152600f60248201527f496e76616c696420616464726573730000000000000000000000000000000000604482015290519081900360640190fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600091600160a060020a038416916370a0823191602480820192602092909190829003018186803b158015611b6b57600080fd5b505afa158015611b7f573d6000803e3d6000fd5b505050506040513d6020811015611b9557600080fd5b50519050600160a060020a03821663a9059cbb611bb061149f565b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038716916370a08231916024808301926020929190829003018186803b158015611c0f57600080fd5b505afa158015611c23573d6000803e3d6000fd5b505050506040513d6020811015611c3957600080fd5b5051604080517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152600160a060020a03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611ca157600080fd5b505af1158015611cb5573d6000803e3d6000fd5b505050506040513d6020811015611ccb57600080fd5b5050604080518281529051600160a060020a038416917f896e034966eaaf1adc54acc0f257056febbd300c9e47182cf761982cf1f5e430919081900360200190a25050565b60003411611d68576040805160e560020a62461bcd02815260206004820152601660248201527f4d75737420626520706f7369746976652076616c756500000000000000000000604482015290519081900360640190fd5b6040805134815290517ff53d9d58a7ff16a2e1360446f1c4b5e81a427d3efd25615be081f4003662400a9181900360200190a1565b611da56114b3565b611dae57600080fd5b610f8f81612613565b600b6020526000908152604090205481565b600082820183811015611ddb57600080fd5b9392505050565b600082821115611df157600080fd5b50900390565b600160a060020a038216611e0a57600080fd5b600160a060020a038316600090815260208190526040902054611e33908263ffffffff611de216565b600160a060020a038085166000908152602081905260408082209390935590841681522054611e68908263ffffffff611dc916565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b611ed360088263ffffffff61269a16565b604051600160a060020a038216907fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669290600090a250565b600160a060020a038216611f1d57600080fd5b600254611f30908263ffffffff611dc916565b600255600160a060020a038216600090815260208190526040902054611f5c908263ffffffff611dc916565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216611fc557600080fd5b600254611fd8908263ffffffff611de216565b600255600160a060020a038216600090815260208190526040902054612004908263ffffffff611de216565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000600160a060020a03821661206e57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61209f60068263ffffffff61269a16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b600160a060020a038216600090815260016020908152604080832033845290915290205461210a908263ffffffff611de216565b600160a060020a03831660009081526001602090815260408083203384529091529020556121388282611fb2565b600160a060020a038216600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020612756833981519152929181900390910190a35050565b61219760068263ffffffff6126e216565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b601054600a5460009110156121e5576010546121e9565b600a545b905060006121f561149f565b9050815b8015612384576000600a600183038154811061221157fe5b6000918252602080832090910154600160a060020a031680835260099091526040822054600e5491935091906103e89061225290849063ffffffff61272e16565b8161225957fe5b049050600061226e838363ffffffff611de216565b60135460125491925060009161228b90849063ffffffff61272e16565b8161229257fe5b600160a060020a038716600090815260096020526040812055600a805492909104925090806122bd57fe5b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055909101909155604051600160a060020a0389169185156108fc02918691818181858888f19350505050158015612323573d6000803e3d6000fd5b5061232e85826110a9565b5060408051828152602081018490528151600160a060020a038816927fc91a3666a5b4764b69624fd864f5f18d75169482bacba07da1dbf4be975f83e2928290030190a2505060001990930192506121f9915050565b505050565b601154600c5460009110156123a0576011546123a4565b600c545b905060006123b061149f565b9050815b8015612384576000600c60018303815481106123cc57fe5b6000918252602080832090910154600160a060020a0316808352600b909152604090912054909150806123fb57fe5b6012546013546000919061241690849063ffffffff61272e16565b8161241d57fe5b600160a060020a0385166000908152600b6020526040812055600c8054929091049250908061244857fe5b6000828152602090208101600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055019055303181116125705760006103e8612499600e548461272e90919063ffffffff16565b816124a057fe5b04905060006124b5838363ffffffff611de216565b604051909150600160a060020a0386169082156108fc029083906000818181858888f193505050501580156124ee573d6000803e3d6000fd5b50604051600160a060020a0388169083156108fc029084906000818181858888f19350505050158015612525573d6000803e3d6000fd5b5060408051858152602081018390528151600160a060020a038816927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a250506125bf565b61257a83836110a9565b5060408051838152600060208201528151600160a060020a038616927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568928290030190a25b505050600019016123b4565b6125dc60088263ffffffff6126e216565b604051600160a060020a038216907f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f690600090a250565b600160a060020a03811661262657600080fd5b600554604051600160a060020a0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a360058054600160a060020a039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b600160a060020a0381166126ad57600080fd5b6126b78282612059565b6126c057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381166126f557600080fd5b6126ff8282612059565b1561270957600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b60008261273d57506000610e51565b8282028284828161274a57fe5b0414611ddb57600080fdfe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92543616e6e6f74207769746864726177206d6f7265207468616e2062616c616e63652068656c64a165627a7a723058201b9b51359a369ba1c9ee51885bb257749041e4662d80c21e0f58407e3087f9ba0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH7 0xB1A2BC2EC50000 PUSH1 0xD SSTORE PUSH1 0x5 PUSH1 0xE SSTORE PUSH8 0xDE0B6B3A7640000 PUSH1 0xF SSTORE PUSH1 0x32 PUSH1 0x10 SSTORE PUSH1 0x32 PUSH1 0x11 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x40 DUP1 PUSH3 0x2C6A DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH1 0x40 DUP2 LT ISZERO PUSH3 0x59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD MLOAD PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0xF DUP2 MSTORE PUSH32 0x43727970746F3130204865646765640000000000000000000000000000000000 DUP2 DUP7 ADD SWAP1 DUP2 MSTORE DUP3 MLOAD DUP1 DUP5 ADD SWAP1 SWAP4 MSTORE PUSH1 0x3 DUP1 DUP5 MSTORE PUSH32 0x4331300000000000000000000000000000000000000000000000000000000000 SWAP7 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP2 MLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP2 SWAP4 PUSH1 0x12 SWAP3 PUSH3 0xE2 SWAP3 SWAP1 PUSH3 0x3EE JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0xF8 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x3EE JUMP JUMPDEST POP PUSH1 0x5 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 0x100 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND PUSH2 0x100 CALLER DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP3 DIV AND SWAP3 POP PUSH1 0x0 SWAP2 POP PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH3 0x173 CALLER PUSH5 0x100000000 PUSH3 0x2BB DUP2 MUL DIV JUMP JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH3 0x191 CALLER PUSH5 0x100000000 PUSH3 0x30D DUP2 MUL DIV JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP3 DUP2 MSTORE PUSH2 0x3E8 PUSH1 0x20 SWAP1 SWAP2 ADD DUP2 SWAP1 MSTORE PUSH1 0x12 DUP4 SWAP1 SSTORE PUSH1 0x13 SSTORE DUP2 PUSH3 0x21E JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207072696365206E756D657261746F72000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH3 0x294 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642077686974656C697374206164647265737300000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x493 JUMP JUMPDEST PUSH3 0x2D6 PUSH1 0x6 DUP3 PUSH5 0x100000000 PUSH3 0x26E2 PUSH3 0x35F DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x6719D08C1888103BEA251A4ED56406BD0C3E69723C8A1686E017E7BBE159B6F8 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH3 0x328 PUSH1 0x8 DUP3 PUSH5 0x100000000 PUSH3 0x26E2 PUSH3 0x35F DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x6AE172837EA30B801FBFCDD4108AA1D5BF8FF775444FD70256B44E6BF3DFC3F6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH3 0x373 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x388 DUP3 DUP3 PUSH5 0x100000000 PUSH3 0x3B8 DUP2 MUL DIV JUMP JUMPDEST ISZERO PUSH3 0x393 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH3 0x3CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x431 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x461 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x461 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x461 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x444 JUMP JUMPDEST POP PUSH3 0x46F SWAP3 SWAP2 POP PUSH3 0x473 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x490 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x46F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x47A JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x27C7 DUP1 PUSH3 0x4A3 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2CB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x8456CB59 GT PUSH2 0x192 JUMPI DUP1 PUSH4 0xA6F2AE3A GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xCF60402F GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0xDF8DE3E7 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDF8DE3E7 EQ PUSH2 0xA87 JUMPI DUP1 PUSH4 0xE8078D94 EQ PUSH2 0xAAD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xAB5 JUMPI DUP1 PUSH4 0xF3F43703 EQ PUSH2 0xAE8 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0xCF60402F EQ PUSH2 0x9F8 JUMPI DUP1 PUSH4 0xDBB24554 EQ PUSH2 0xA22 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0xA4C JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0xA6F2AE3A EQ PUSH2 0x930 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x938 JUMPI DUP1 PUSH4 0xAA271E1A EQ PUSH2 0x971 JUMPI DUP1 PUSH4 0xC239F6FF EQ PUSH2 0x9A4 JUMPI DUP1 PUSH4 0xCC9BE27A EQ PUSH2 0x9B9 JUMPI DUP1 PUSH4 0xCF0AED0E EQ PUSH2 0x9CE JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x983B2D56 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x983B2D56 EQ PUSH2 0x82D JUMPI DUP1 PUSH4 0x98650275 EQ PUSH2 0x860 JUMPI DUP1 PUSH4 0x9C8F9F23 EQ PUSH2 0x875 JUMPI DUP1 PUSH4 0x9EE679E8 EQ PUSH2 0x89F JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x8C9 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x8F7 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x79A JUMPI DUP1 PUSH4 0x84900B04 EQ PUSH2 0x7AF JUMPI DUP1 PUSH4 0x8D6CC56D EQ PUSH2 0x7C4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x7EE JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x803 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x818 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x46FBF68E GT PUSH2 0x236 JUMPI DUP1 PUSH4 0x6B2C0F55 GT PUSH2 0x1EF JUMPI DUP1 PUSH4 0x6B2C0F55 EQ PUSH2 0x69E JUMPI DUP1 PUSH4 0x6EF8D66D EQ PUSH2 0x6D1 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6E6 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x719 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x72E JUMPI DUP1 PUSH4 0x82DC1EC4 EQ PUSH2 0x767 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x46FBF68E EQ PUSH2 0x583 JUMPI DUP1 PUSH4 0x54FFBDDB EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x5FC JUMPI DUP1 PUSH4 0x5CC07076 EQ PUSH2 0x611 JUMPI DUP1 PUSH4 0x6130AABF EQ PUSH2 0x63B JUMPI DUP1 PUSH4 0x640C2544 EQ PUSH2 0x674 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x31A4CBB6 GT PUSH2 0x288 JUMPI DUP1 PUSH4 0x31A4CBB6 EQ PUSH2 0x475 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x4E1 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x4F6 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x52F JUMPI DUP1 PUSH4 0x454ADFF9 EQ PUSH2 0x559 JUMPI PUSH2 0x2CB JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x360 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x3AD JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x3092AFD5 EQ PUSH2 0x417 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x44A JUMPI JUMPDEST PUSH2 0x2D4 CALLER PUSH2 0xB1B JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x325 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x30D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x352 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xDEC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH2 0xE57 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0xE5D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x43A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0xF14 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x45F PUSH2 0xF92 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0xF9B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x4CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0xFAD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x1049 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x502 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x519 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x10A9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x565 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x57C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x10EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x58F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1158 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x116B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x608 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH2 0x1192 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E0 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x119B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x647 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x65E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x11A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x680 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x697 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x11C7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x6C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1235 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x12B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x12BB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x12D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x73A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x1344 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x773 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x134E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7A6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x1369 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E0 PUSH2 0x13CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x13DC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5E0 PUSH2 0x149F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x80F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH2 0x14B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x824 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x14C9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x850 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x152A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x86C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH2 0x1545 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x898 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x154E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x8C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x161C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8DE PUSH2 0x189C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x903 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x91A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x18A5 JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x18EE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x95B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x18F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x97D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x399 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x994 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1904 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH2 0x1917 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH2 0x191D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1923 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA04 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x1991 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x19FF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA6F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x1A6E JUMP JUMPDEST PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xA9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1A99 JUMP JUMPDEST PUSH2 0x2D4 PUSH2 0x1D10 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D4 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xAD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1D9D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1DB7 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x3AF32ABF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3AF32ABF SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xBB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0xC0F JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652077686974656C697374656400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0xC1F JUMPI INVALID JUMPDEST PUSH1 0xD SLOAD CALLVALUE LT ISZERO PUSH2 0xC79 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D756D20776569206E6F74206D657400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0xCF0 JUMPI PUSH1 0xA DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xC65A7BB8D6351C1CF70C95A316CC6A92839C986682D98BC35F958F4883F9D2A8 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0xD00 DUP2 CALLVALUE PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD CALLVALUE DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 0x9936746A4565F9766FA768F88F56A7487C78780AC179562773D1C75C5269537E SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDE2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDB7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDE2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xDC5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0xE01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2756 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xE91 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0xEC0 DUP5 DUP5 DUP5 PUSH2 0x1DF7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2756 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xF1C PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0xF25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND CALLER EQ ISZERO PUSH2 0xF86 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573652072656E6F756E63654D696E7465720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF8F DUP2 PUSH2 0x1EC2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0xFC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xFF6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2756 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1052 CALLER PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x105B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND PUSH2 0x106A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10B4 CALLER PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x10BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x10CD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D7 DUP4 DUP4 PUSH2 0x1F0A JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xF8F CALLER DUP3 PUSH2 0x1FB2 JUMP JUMPDEST PUSH2 0x10F2 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x10FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1153 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652067726561746572207468616E203000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x11 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE51 PUSH1 0x6 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2059 AND JUMP JUMPDEST PUSH1 0xA DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1178 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0xC DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1178 JUMPI INVALID JUMPDEST PUSH2 0x11B0 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x11B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11C3 DUP3 DUP3 PUSH2 0x1FB2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x11CF PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x11D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1230 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652067726561746572207468616E203000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH2 0x123D PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x12A7 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x12 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573652072656E6F756E63655061757365720000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0xF8F DUP2 PUSH2 0x208E JUMP JUMPDEST PUSH2 0x12B9 CALLER PUSH2 0x208E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x12DE PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x12E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x11C3 DUP3 DUP3 PUSH2 0x20D6 JUMP JUMPDEST PUSH2 0x1357 CALLER PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x1360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF8F DUP2 PUSH2 0x2186 JUMP JUMPDEST PUSH2 0x1372 CALLER PUSH2 0x1158 JUMP JUMPDEST PUSH2 0x137B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x138B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x40 DUP1 MLOAD CALLER DUP2 MSTORE SWAP1 MLOAD PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 0x13E5 CALLER PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x13EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1446 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420626520706F7369746976652076616C756500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x12 DUP2 SWAP1 SSTORE PUSH2 0x1453 PUSH2 0x21CE JUMP JUMPDEST PUSH2 0x145B PUSH2 0x2389 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD PUSH32 0x92664190CCA12ACA9CD5309D87194BDDA75BB51362D71C06E1A6F75C7C765711 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x1F PUSH1 0x2 PUSH1 0x0 NOT PUSH2 0x100 PUSH1 0x1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 0x60 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0xDE2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xDB7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xDE2 JUMP JUMPDEST PUSH2 0x1533 CALLER PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x153C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF8F DUP2 PUSH2 0x25CB JUMP JUMPDEST PUSH2 0x12B9 CALLER PUSH2 0x1EC2 JUMP JUMPDEST PUSH2 0x1556 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x155F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST ADDRESS BALANCE DUP2 GT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E742062616C616E6365000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x15E5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH32 0x9A5A8A32AFD899E7F95003C6E21C9FAB2D50E11992439D14472229180C60C7AA SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x162C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x3AF32ABF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0x3AF32ABF SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 0x1710 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D7573742062652077686974656C697374656400000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST CALLER DUP2 PUSH2 0x171B DUP3 PUSH2 0x12BB JUMP JUMPDEST LT ISZERO PUSH2 0x175B JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x2776 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0xF SLOAD DUP3 LT ISZERO PUSH2 0x17B5 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x546F6F2066657720746F6B656E73000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x17BE DUP3 PUSH2 0x10E0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 PUSH2 0x1835 JUMPI PUSH1 0xC DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE PUSH1 0x0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xDF6966C971051C3D54EC59162606531493A51404A002842F56009D7E5CF4A8C7 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x1845 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 0x17040713250EC5F668A1C39E7939900E78558350DBAFF0EBEF34268DFA8EA4AC SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD DUP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x18BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0xFF6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH2 0x12B9 CALLER PUSH2 0xB1B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10D7 CALLER DUP5 DUP5 PUSH2 0x1DF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE51 PUSH1 0x8 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2059 AND JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0xA SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x192B PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1934 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x198C JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D756D206D7573742062652067726561746572207468616E20300000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xD SSTORE JUMP JUMPDEST PUSH2 0x1999 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x19A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x19FA JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696E696D756D206D7573742062652067726561746572207468616E20300000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0xF SSTORE JUMP JUMPDEST PUSH2 0x1A08 CALLER PUSH2 0x1904 JUMP JUMPDEST PUSH2 0x1A11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x1A69 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420626520706F7369746976652076616C756500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x13 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1AA1 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1AAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x1B08 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420616464726573730000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP3 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1B6B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B7F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH4 0xA9059CBB PUSH2 0x1BB0 PUSH2 0x149F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND SWAP2 PUSH4 0x70A08231 SWAP2 PUSH1 0x24 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C23 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1C39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 0x40 DUP1 MLOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH4 0xFFFFFFFF DUP7 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE MLOAD PUSH1 0x44 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1CA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1CB5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1CCB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND SWAP2 PUSH32 0x896E034966EAAF1ADC54ACC0F257056FEBBD300C9E47182CF761982CF1F5E430 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLVALUE GT PUSH2 0x1D68 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D75737420626520706F7369746976652076616C756500000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD CALLVALUE DUP2 MSTORE SWAP1 MLOAD PUSH32 0xF53D9D58A7FF16A2E1360446F1C4B5E81A427D3EFD25615BE081F4003662400A SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH2 0x1DA5 PUSH2 0x14B3 JUMP JUMPDEST PUSH2 0x1DAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF8F DUP2 PUSH2 0x2613 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x1DDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x1DF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x1E0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1E33 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1E68 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1ED3 PUSH1 0x8 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x269A AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xE94479A9F7E1952CC78F2D6BAAB678ADC1B772D936C6583DEF489E524CB66692 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x1F1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1F30 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1F5C SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DC9 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x1FC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x1FD8 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2004 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x209F PUSH1 0x6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x269A AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xCD265EBAF09DF2871CC7BD4133404A235BA12EFF2041BB89D9C714A2621C7C7E SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x210A SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x2138 DUP3 DUP3 PUSH2 0x1FB2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2756 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 0x2197 PUSH1 0x6 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x26E2 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x6719D08C1888103BEA251A4ED56406BD0C3E69723C8A1686E017E7BBE159B6F8 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0xA SLOAD PUSH1 0x0 SWAP2 LT ISZERO PUSH2 0x21E5 JUMPI PUSH1 0x10 SLOAD PUSH2 0x21E9 JUMP JUMPDEST PUSH1 0xA SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x21F5 PUSH2 0x149F JUMP JUMPDEST SWAP1 POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x2384 JUMPI PUSH1 0x0 PUSH1 0xA PUSH1 0x1 DUP4 SUB DUP2 SLOAD DUP2 LT PUSH2 0x2211 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP1 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD PUSH1 0xE SLOAD SWAP2 SWAP4 POP SWAP2 SWAP1 PUSH2 0x3E8 SWAP1 PUSH2 0x2252 SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x272E AND JUMP JUMPDEST DUP2 PUSH2 0x2259 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x226E DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x13 SLOAD PUSH1 0x12 SLOAD SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x228B SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x272E AND JUMP JUMPDEST DUP2 PUSH2 0x2292 JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0xA DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP3 POP SWAP1 DUP1 PUSH2 0x22BD JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 DUP3 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE SWAP1 SWAP2 ADD SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND SWAP2 DUP6 ISZERO PUSH2 0x8FC MUL SWAP2 DUP7 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2323 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH2 0x232E DUP6 DUP3 PUSH2 0x10A9 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND SWAP3 PUSH32 0xC91A3666A5B4764B69624FD864F5F18D75169482BACBA07DA1DBF4BE975F83E2 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP PUSH1 0x0 NOT SWAP1 SWAP4 ADD SWAP3 POP PUSH2 0x21F9 SWAP2 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0xC SLOAD PUSH1 0x0 SWAP2 LT ISZERO PUSH2 0x23A0 JUMPI PUSH1 0x11 SLOAD PUSH2 0x23A4 JUMP JUMPDEST PUSH1 0xC SLOAD JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x23B0 PUSH2 0x149F JUMP JUMPDEST SWAP1 POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x2384 JUMPI PUSH1 0x0 PUSH1 0xC PUSH1 0x1 DUP4 SUB DUP2 SLOAD DUP2 LT PUSH2 0x23CC JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP1 DUP4 MSTORE PUSH1 0xB SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 PUSH2 0x23FB JUMPI INVALID JUMPDEST PUSH1 0x12 SLOAD PUSH1 0x13 SLOAD PUSH1 0x0 SWAP2 SWAP1 PUSH2 0x2416 SWAP1 DUP5 SWAP1 PUSH4 0xFFFFFFFF PUSH2 0x272E AND JUMP JUMPDEST DUP2 PUSH2 0x241D JUMPI INVALID JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0xC DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP3 POP SWAP1 DUP1 PUSH2 0x2448 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE ADDRESS BALANCE DUP2 GT PUSH2 0x2570 JUMPI PUSH1 0x0 PUSH2 0x3E8 PUSH2 0x2499 PUSH1 0xE SLOAD DUP5 PUSH2 0x272E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP2 PUSH2 0x24A0 JUMPI INVALID JUMPDEST DIV SWAP1 POP PUSH1 0x0 PUSH2 0x24B5 DUP4 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x1DE2 AND JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND SWAP1 DUP3 ISZERO PUSH2 0x8FC MUL SWAP1 DUP4 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x24EE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND SWAP1 DUP4 ISZERO PUSH2 0x8FC MUL SWAP1 DUP5 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x2525 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND SWAP3 PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x257A DUP4 DUP4 PUSH2 0x10A9 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND SWAP3 PUSH32 0xF279E6A1F5E320CCA91135676D9CB6E44CA8A08C0B88342BCDB1144F6511B568 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 JUMPDEST POP POP POP PUSH1 0x0 NOT ADD PUSH2 0x23B4 JUMP JUMPDEST PUSH2 0x25DC PUSH1 0x8 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x26E2 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x6AE172837EA30B801FBFCDD4108AA1D5BF8FF775444FD70256B44E6BF3DFC3F6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x2626 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP3 PUSH2 0x100 SWAP1 DIV AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH21 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x26AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26B7 DUP3 DUP3 PUSH2 0x2059 JUMP JUMPDEST PUSH2 0x26C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x26F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x26FF DUP3 DUP3 PUSH2 0x2059 JUMP JUMPDEST ISZERO PUSH2 0x2709 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x273D JUMPI POP PUSH1 0x0 PUSH2 0xE51 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 0x274A JUMPI INVALID JUMPDEST DIV EQ PUSH2 0x1DDB JUMPI PUSH1 0x0 DUP1 REVERT INVALID DUP13 JUMPDEST 0xe1 0xe5 0xeb 0xec PUSH30 0x5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B92543616E6E6F PUSH21 0x207769746864726177206D6F7265207468616E2062 PUSH2 0x6C61 PUSH15 0x63652068656C64A165627A7A723058 KECCAK256 SHL SWAP12 MLOAD CALLDATALOAD SWAP11 CALLDATASIZE SWAP12 LOG1 0xc9 0xee MLOAD DUP9 JUMPDEST 0xb2 JUMPI PUSH21 0x9041E4662D80C21E0F58407E3087F9BA0029000000 ",
            "sourceMap": "25051:10820:0:-;;;25647:9;25618:38;;25686:1;25663:24;;25752:7;25715:44;;25804:2;25766:40;;25851:2;25813:40;;26571:462;8:9:-1;5:2;;;30:1;27;20:12;5:2;26571:462:0;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;26571:462:0;;;;;;;;1614:167;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1703:12;;26571:462;;;;1614:167;;26694:2;;1703:12;;1614:167;1703:12;:::i;:::-;-1:-1:-1;1726:16:0;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;1753:9:0;:20;;-1:-1:-1;;1753:20:0;;;;;;;;;;-1:-1:-1;;;;;;19669:19:0;1753:20;19678:10;19669:19;;;;;;;;;;19704:40;;-1:-1:-1;;;;;19737:6:0;;;;;;-1:-1:-1;;;;19704:40:0;;-1:-1:-1;;19704:40:0;16976:22;16987:10;16976;;;;:22;:::i;:::-;18075:7;:15;;-1:-1:-1;;18075:15:0;;;15933:22;15944:10;15933;;;;:22;:::i;:::-;26773:32;;;;;;;;;;;;26800:4;26773:32;;;;;;;26765:5;:40;;;;;26828:23;26820:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;26902:36:0;;26894:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;26983:17;:42;;-1:-1:-1;;;;;;26983:42:0;-1:-1:-1;;;;;26983:42:0;;;;;;;;;;-1:-1:-1;25051:10820:0;;17406:122;17463:21;:8;17476:7;17463:12;;;;;;:21;:::i;:::-;17500:20;;-1:-1:-1;;;;;17500:20:0;;;;;;;;17406:122;:::o;16363:::-;16420:21;:8;16433:7;16420:12;;;;;;:21;:::i;:::-;16457:20;;-1:-1:-1;;;;;16457:20:0;;;;;;;;16363:122;:::o;14867:186::-;-1:-1:-1;;;;;14944:21:0;;14936:30;;;;;;14986:18;14990:4;14996:7;14986:3;;;;:18;:::i;:::-;14985:19;14977:28;;;;;;-1:-1:-1;;;;;15018:20:0;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;15018:27:0;15041:4;15018:27;;;14867:186::o;15415:165::-;15487:4;-1:-1:-1;;;;;15512:21:0;;15504:30;;;;;;-1:-1:-1;;;;;;15552:20:0;:11;:20;;;;;;;;;;;;;;;15415:165::o;25051:10820::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25051:10820:0;;;-1:-1:-1;25051:10820:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingBuys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxWithdrawalsPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxWithdrawalsPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnForParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMaxAllocationsPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxAllocationsPerTx\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistContract\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newNumerator\",\"type\":\"uint256\"}],\"name\":\"updatePrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amountTokensToWithdraw\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"name\":\"numerator\",\"type\":\"uint256\"},{\"name\":\"denominator\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberWithdrawalsPending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberBuysPending\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinimumWei\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyValue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinTokenRedemption\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokenRedemption\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newDenominator\",\"type\":\"uint256\"}],\"name\":\"updatePriceDenominator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"priceNumeratorInput\",\"type\":\"uint256\"},{\"name\":\"whitelistContractInput\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"numerator\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"DepositReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"TokensIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"burn(uint256)\":{\"details\":\"Burns a specific amount of tokens.\",\"params\":{\"value\":\"The amount of token to be burned.\"}},\"burnForParticipant(address,uint256)\":{\"details\":\"Allows the owner to burn a specific amount of tokens on a participant's behalf.\",\"params\":{\"value\":\"The amount of tokens to be burned.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Burns a specific amount of tokens from the target address and decrements allowance\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"value\":\"uint256 The amount of token to be burned\"}},\"buy()\":{\"details\":\"Explicitly buy via contract.\"},\"decimals()\":{\"return\":\"the number of decimals of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens when not paused.\",\"params\":{\"to\":\"The address that will receive the minted tokens.\",\"value\":\"The amount of tokens to mint.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"name()\":{\"return\":\"the name of the token.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"paused()\":{\"return\":\"true if the contract is paused, false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"requestWithdrawal(uint256)\":{\"details\":\"withdrawn tokens are burnt.\",\"params\":{\"amountTokensToWithdraw\":\"The number of tokens to withdraw.\"}},\"setMaxAllocationsPerTx(uint256)\":{\"details\":\"Allows us to configure batch sizes and avoid running out of gas.\"},\"setMaxWithdrawalsPerTx(uint256)\":{\"details\":\"Allows us to configure batch sizes and avoid running out of gas.\"},\"symbol()\":{\"return\":\"the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}}},\"userdoc\":{\"methods\":{\"addLiquidity()\":{\"notice\":\"Adds liquidity to the contract, allowing anyone to deposit ETH\"},\"claimTokens(address)\":{\"notice\":\"Allows owner to claim any ERC20 tokens.\"},\"numberBuysPending()\":{\"notice\":\"returns the number of pending buys, waiting for token issuance.\"},\"numberWithdrawalsPending()\":{\"notice\":\"returns the number of withdrawals pending.\"},\"removeLiquidity(uint256)\":{\"notice\":\"Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\"},\"removeMinter(address)\":{\"notice\":\"Allow the owner to remove a minter\"},\"removePauser(address)\":{\"notice\":\"Allow the owner to remove a pauser\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"requestWithdrawal(uint256)\":{\"notice\":\"Whitelisted token holders can request token redemption, and withdraw ETH.\"},\"setMaxAllocationsPerTx(uint256)\":{\"notice\":\"Sets the maximum number of allocations in a single transaction.\"},\"setMaxWithdrawalsPerTx(uint256)\":{\"notice\":\"Sets the maximum number of withdrawals in a single transaction.\"},\"setMinimumBuyValue(uint256)\":{\"notice\":\"Sets the minimum wei when buying tokens.\"},\"setMinimumTokenRedemption(uint256)\":{\"notice\":\"Sets the minimum number of tokens to redeem.\"},\"updatePrice(uint256)\":{\"notice\":\"Updates the price numerator.\"},\"updatePriceDenominator(uint256)\":{\"notice\":\"Updates the price denominator.\"}},\"notice\":\"Contract for CRYPTO10 Hedged (C10) fund.  \"}},\"settings\":{\"compilationTarget\":{\"source code\":\"C10Token\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "ERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b506105d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161007857806370a0823114610166578063a457c2d71461018c578063a9059cbb146101b8578063dd62ed3e146101e4576100a5565b8063095ea7b3146100aa57806318160ddd146100ea57806323b872dd14610104578063395093511461013a575b600080fd5b6100d6600480360360408110156100c057600080fd5b50600160a060020a038135169060200135610212565b604080519115158252519081900360200190f35b6100f261028e565b60408051918252519081900360200190f35b6100d66004803603606081101561011a57600080fd5b50600160a060020a03813581169160208101359091169060400135610294565b6100d66004803603604081101561015057600080fd5b50600160a060020a03813516906020013561035d565b6100f26004803603602081101561017c57600080fd5b5035600160a060020a031661040b565b6100d6600480360360408110156101a257600080fd5b50600160a060020a038135169060200135610426565b6100d6600480360360408110156101ce57600080fd5b50600160a060020a03813516906020013561046f565b6100f2600480360360408110156101fa57600080fd5b50600160a060020a0381358116916020013516610485565b6000600160a060020a03831661022757600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546102c8908363ffffffff6104b016565b600160a060020a03851660009081526001602090815260408083203384529091529020556102f78484846104c5565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a03831661037257600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103a6908363ffffffff61059016565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a03831661043b57600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103a6908363ffffffff6104b016565b600061047c3384846104c5565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156104bf57600080fd5b50900390565b600160a060020a0382166104d857600080fd5b600160a060020a038316600090815260208190526040902054610501908263ffffffff6104b016565b600160a060020a038085166000908152602081905260408082209390935590841681522054610536908263ffffffff61059016565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105a257600080fd5b939250505056fea165627a7a7230582013d037451c17b977be950461ef2d66eac2a27060c9aefb8f368f0d94b7b0c35d0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D5 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x70A08231 GT PUSH2 0x78 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x166 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1B8 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1E4 JUMPI PUSH2 0xA5 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x13A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x212 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xF2 PUSH2 0x28E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x294 JUMP JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x150 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x35D JUMP JUMPDEST PUSH2 0xF2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x17C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x40B JUMP JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x426 JUMP JUMPDEST PUSH2 0xD6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x46F JUMP JUMPDEST PUSH2 0xF2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x485 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x227 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x2C8 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4B0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x2F7 DUP5 DUP5 DUP5 PUSH2 0x4C5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3A6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x590 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x43B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3A6 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4B0 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x47C CALLER DUP5 DUP5 PUSH2 0x4C5 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x4BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x501 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x4B0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x536 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x590 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x5A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SGT 0xd0 CALLDATACOPY GASLIMIT SHR OR 0xb9 PUSH24 0xBE950461EF2D66EAC2A27060C9AEFB8F368F0D94B7B0C35D STOP 0x29 ",
            "sourceMap": "4928:7116:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4928:7116:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Implementation of the basic standard token. https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol  * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for all accounts just by listening to said events. Note that this isn't required by the specification, and other compliant implementations may not do it.\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Standard ERC20 token \"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"ERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "ERC20Burnable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b50610792806100206000396000f3fe608060405234801561001057600080fd5b50600436106100bb576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161008357806370a082311461019b57806379cc6790146101c1578063a457c2d7146101ed578063a9059cbb14610219578063dd62ed3e14610245576100bb565b8063095ea7b3146100c057806318160ddd1461010057806323b872dd1461011a578063395093511461015057806342966c681461017c575b600080fd5b6100ec600480360360408110156100d657600080fd5b50600160a060020a038135169060200135610273565b604080519115158252519081900360200190f35b6101086102dd565b60408051918252519081900360200190f35b6100ec6004803603606081101561013057600080fd5b50600160a060020a038135811691602081013590911690604001356102e3565b6100ec6004803603604081101561016657600080fd5b50600160a060020a03813516906020013561039a565b6101996004803603602081101561019257600080fd5b5035610436565b005b610108600480360360208110156101b157600080fd5b5035600160a060020a0316610443565b610199600480360360408110156101d757600080fd5b50600160a060020a03813516906020013561045e565b6100ec6004803603604081101561020357600080fd5b50600160a060020a03813516906020013561046c565b6100ec6004803603604081101561022f57600080fd5b50600160a060020a0381351690602001356104b5565b6101086004803603604081101561025b57600080fd5b50600160a060020a03813581169160200135166104cb565b6000600160a060020a03831661028857600080fd5b336000818152600160209081526040808320600160a060020a0388168085529083529281902086905580518681529051929392600080516020610747833981519152929181900390910190a350600192915050565b60025490565b600160a060020a0383166000908152600160209081526040808320338452909152812054610317908363ffffffff6104f616565b600160a060020a038516600090815260016020908152604080832033845290915290205561034684848461050b565b600160a060020a038416600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020610747833981519152929181900390910190a35060019392505050565b6000600160a060020a0383166103af57600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103e3908363ffffffff6105d616565b336000818152600160209081526040808320600160a060020a038916808552908352928190208590558051948552519193600080516020610747833981519152929081900390910190a350600192915050565b61044033826105ef565b50565b600160a060020a031660009081526020819052604090205490565b6104688282610696565b5050565b6000600160a060020a03831661048157600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103e3908363ffffffff6104f616565b60006104c233848461050b565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561050557600080fd5b50900390565b600160a060020a03821661051e57600080fd5b600160a060020a038316600090815260208190526040902054610547908263ffffffff6104f616565b600160a060020a03808516600090815260208190526040808220939093559084168152205461057c908263ffffffff6105d616565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105e857600080fd5b9392505050565b600160a060020a03821661060257600080fd5b600254610615908263ffffffff6104f616565b600255600160a060020a038216600090815260208190526040902054610641908263ffffffff6104f616565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a03821660009081526001602090815260408083203384529091529020546106ca908263ffffffff6104f616565b600160a060020a03831660009081526001602090815260408083203384529091529020556106f882826105ef565b600160a060020a038216600081815260016020908152604080832033808552908352928190205481519081529051929392600080516020610747833981519152929181900390910190a3505056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a7230582058cc9cc56845b4185c5f58ea1ce78d119003cc331da34598b6fb774e5dd474f10029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x792 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBB JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x70A08231 GT PUSH2 0x83 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x245 JUMPI PUSH2 0xBB JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xC0 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x17C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x273 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x130 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 0x40 ADD CALLDATALOAD PUSH2 0x2E3 JUMP JUMPDEST PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x166 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x39A JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x192 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0x436 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x443 JUMP JUMPDEST PUSH2 0x199 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x45E JUMP JUMPDEST PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x203 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x46C JUMP JUMPDEST PUSH2 0xEC PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD PUSH2 0x4B5 JUMP JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x25B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 0x20 ADD CALLDATALOAD AND PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x747 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x317 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x346 DUP5 DUP5 DUP5 PUSH2 0x50B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x747 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x3AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3E3 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x5D6 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x747 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x440 CALLER DUP3 PUSH2 0x5EF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x468 DUP3 DUP3 PUSH2 0x696 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x3E3 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C2 CALLER DUP5 DUP5 PUSH2 0x50B JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x505 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x547 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x57C SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x5D6 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x5E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 SLOAD PUSH2 0x615 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x641 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH2 0x6CA SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x4F6 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE PUSH2 0x6F8 DUP3 DUP3 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x747 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP INVALID DUP13 JUMPDEST 0xe1 0xe5 0xeb 0xec PUSH30 0x5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925A165627A7A PUSH19 0x30582058CC9CC56845B4185C5F58EA1CE78D11 SWAP1 SUB 0xcc CALLER SAR LOG3 GASLIMIT SWAP9 0xb6 0xfb PUSH24 0x4E5DD474F100290000000000000000000000000000000000 ",
            "sourceMap": "12257:596:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12257:596:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Token that can be irreversibly burned (destroyed).\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"burn(uint256)\":{\"details\":\"Burns a specific amount of tokens.\",\"params\":{\"value\":\"The amount of token to be burned.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Burns a specific amount of tokens from the target address and decrements allowance\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"value\":\"uint256 The amount of token to be burned\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Burnable Token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"ERC20Burnable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "ERC20Detailed": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"decimals\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"The decimals are only for visualization purposes. All the operations are done using the smallest and indivisible token unit, just as on Ethereum all the operations are done in wei.\",\"methods\":{\"decimals()\":{\"return\":\"the number of decimals of the token.\"},\"name()\":{\"return\":\"the name of the token.\"},\"symbol()\":{\"return\":\"the symbol of the token.\"}},\"title\":\"ERC20Detailed token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"ERC20Detailed\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "IERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"see https://github.com/ethereum/EIPs/issues/20\",\"methods\":{},\"title\":\"ERC20 interface\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"IERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "InvictusWhitelist": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317808255604051600160a060020a039190911691907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a361006c33640100000000610071810204565b61014a565b61008960018264010000000061063b6100c082021704565b604051600160a060020a038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600160a060020a0381166100d357600080fd5b6100e68282640100000000610115810204565b156100f057600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a03821661012a57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6106fb806101596000396000f3fe608060405234801561001057600080fd5b50600436106100ec576000357c010000000000000000000000000000000000000000000000000000000090048063715018a6116100a95780638f32d59b116100835780638f32d59b1461021f578063bb5f747b14610227578063d6cd94731461024d578063f2fde38b14610255576100ec565b8063715018a6146101cd5780637362d9c8146101d55780638da5cb5b146101fb576100ec565b806310154bad146100f1578063291d9549146101195780633af32abf1461013f5780634c5a628c14610179578063643a7695146101815780636897e974146101a7575b600080fd5b6101176004803603602081101561010757600080fd5b5035600160a060020a031661027b565b005b6101176004803603602081101561012f57600080fd5b5035600160a060020a0316610299565b6101656004803603602081101561015557600080fd5b5035600160a060020a03166102b4565b604080519115158252519081900360200190f35b6101176102cd565b6101176004803603602081101561019757600080fd5b5035600160a060020a03166102d8565b610117600480360360208110156101bd57600080fd5b5035600160a060020a0316610300565b610117610392565b610117600480360360208110156101eb57600080fd5b5035600160a060020a03166103fa565b610203610415565b60408051600160a060020a039092168252519081900360200190f35b610165610424565b6101656004803603602081101561023d57600080fd5b5035600160a060020a0316610435565b610117610448565b6101176004803603602081101561026b57600080fd5b5035600160a060020a0316610451565b61028433610435565b61028d57600080fd5b6102968161046b565b50565b6102a233610435565b6102ab57600080fd5b610296816104b3565b60006102c760028363ffffffff6104fb16565b92915050565b6102d633610530565b565b6102e133610435565b6102ea57600080fd5b6102f3816102b4565b610296576102968161027b565b610308610424565b61031157600080fd5b600160a060020a03811633141561038957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5573652072656e6f756e636557686974656c69737441646d696e000000000000604482015290519081900360640190fd5b61029681610530565b61039a610424565b6103a357600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b61040333610435565b61040c57600080fd5b61029681610578565b600054600160a060020a031690565b600054600160a060020a0316331490565b60006102c760018363ffffffff6104fb16565b6102d6336104b3565b610459610424565b61046257600080fd5b610296816105c0565b61047c60028263ffffffff61063b16565b604051600160a060020a038216907fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f90600090a250565b6104c460028263ffffffff61068716565b604051600160a060020a038216907f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b690600090a250565b6000600160a060020a03821661051057600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61054160018263ffffffff61068716565b604051600160a060020a038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b61058960018263ffffffff61063b16565b604051600160a060020a038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600160a060020a0381166105d357600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a03811661064e57600080fd5b61065882826104fb565b1561066257600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a03811661069a57600080fd5b6106a482826104fb565b6106ad57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a7230582066c527563e03f612d28c05b8e522462c8f18fcc04fff5418988c8b161780a9860029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR DUP1 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 PUSH2 0x6C CALLER PUSH5 0x100000000 PUSH2 0x71 DUP2 MUL DIV JUMP JUMPDEST PUSH2 0x14A JUMP JUMPDEST PUSH2 0x89 PUSH1 0x1 DUP3 PUSH5 0x100000000 PUSH2 0x63B PUSH2 0xC0 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x22380C05984257A1CB900161C713DD71D39E74820F1AEA43BD3F1BDD20961299 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE6 DUP3 DUP3 PUSH5 0x100000000 PUSH2 0x115 DUP2 MUL DIV JUMP JUMPDEST ISZERO PUSH2 0xF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x12A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x6FB DUP1 PUSH2 0x159 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEC JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x715018A6 GT PUSH2 0xA9 JUMPI DUP1 PUSH4 0x8F32D59B GT PUSH2 0x83 JUMPI DUP1 PUSH4 0x8F32D59B EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0xBB5F747B EQ PUSH2 0x227 JUMPI DUP1 PUSH4 0xD6CD9473 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x255 JUMPI PUSH2 0xEC JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CD JUMPI DUP1 PUSH4 0x7362D9C8 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1FB JUMPI PUSH2 0xEC JUMP JUMPDEST DUP1 PUSH4 0x10154BAD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x291D9549 EQ PUSH2 0x119 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x4C5A628C EQ PUSH2 0x179 JUMPI DUP1 PUSH4 0x643A7695 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0x6897E974 EQ PUSH2 0x1A7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x107 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x27B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x12F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x299 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x2B4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x117 PUSH2 0x2CD JUMP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x300 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x392 JUMP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x3FA JUMP JUMPDEST PUSH2 0x203 PUSH2 0x415 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x165 PUSH2 0x424 JUMP JUMPDEST PUSH2 0x165 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x435 JUMP JUMPDEST PUSH2 0x117 PUSH2 0x448 JUMP JUMPDEST PUSH2 0x117 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x451 JUMP JUMPDEST PUSH2 0x284 CALLER PUSH2 0x435 JUMP JUMPDEST PUSH2 0x28D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x296 DUP2 PUSH2 0x46B JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2A2 CALLER PUSH2 0x435 JUMP JUMPDEST PUSH2 0x2AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x296 DUP2 PUSH2 0x4B3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C7 PUSH1 0x2 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4FB AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2D6 CALLER PUSH2 0x530 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x2E1 CALLER PUSH2 0x435 JUMP JUMPDEST PUSH2 0x2EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2F3 DUP2 PUSH2 0x2B4 JUMP JUMPDEST PUSH2 0x296 JUMPI PUSH2 0x296 DUP2 PUSH2 0x27B JUMP JUMPDEST PUSH2 0x308 PUSH2 0x424 JUMP JUMPDEST PUSH2 0x311 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND CALLER EQ ISZERO PUSH2 0x389 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5573652072656E6F756E636557686974656C69737441646D696E000000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH2 0x296 DUP2 PUSH2 0x530 JUMP JUMPDEST PUSH2 0x39A PUSH2 0x424 JUMP JUMPDEST PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x403 CALLER PUSH2 0x435 JUMP JUMPDEST PUSH2 0x40C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x296 DUP2 PUSH2 0x578 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C7 PUSH1 0x1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x4FB AND JUMP JUMPDEST PUSH2 0x2D6 CALLER PUSH2 0x4B3 JUMP JUMPDEST PUSH2 0x459 PUSH2 0x424 JUMP JUMPDEST PUSH2 0x462 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x296 DUP2 PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x47C PUSH1 0x2 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x63B AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xEE1504A83B6D4A361F4C1DC78AB59BFA30D6A3B6612C403E86BB01EF2984295F SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x4C4 PUSH1 0x2 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x687 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x270D9B30CF5B0793BBFD54C9D5B94AEB49462B8148399000265144A8722DA6B6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x541 PUSH1 0x1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x687 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xA8EB35E5CA14B3D6F28E4ABF2F128DBAB231A58B56E89BEB5D636115001E165 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x589 PUSH1 0x1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x63B AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x22380C05984257A1CB900161C713DD71D39E74820F1AEA43BD3F1BDD20961299 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x64E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x658 DUP3 DUP3 PUSH2 0x4FB JUMP JUMPDEST ISZERO PUSH2 0x662 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6A4 DUP3 DUP3 PUSH2 0x4FB JUMP JUMPDEST PUSH2 0x6AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH7 0xC527563E03F612 0xd2 DUP13 SDIV 0xb8 0xe5 0x22 0x46 0x2c DUP16 XOR 0xfc 0xc0 0x4f SELFDESTRUCT SLOAD XOR SWAP9 DUP13 DUP12 AND OR DUP1 0xa9 DUP7 STOP 0x29 ",
            "sourceMap": "24307:599:0:-;;;24369:57;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19669:6:0;:19;;-1:-1:-1;;;;;;19669:19:0;19678:10;19669:19;;;;19704:40;;-1:-1:-1;;;;;19737:6:0;;;;;19669;19704:40;;19669:6;;19704:40;21819:30;21838:10;21819:18;;;;:30;:::i;:::-;24307:599;;22329:146;22394:29;:16;22415:7;22394:20;;;;;;:29;:::i;:::-;22439:28;;-1:-1:-1;;;;;22439:28:0;;;;;;;;22329:146;:::o;14867:186::-;-1:-1:-1;;;;;14944:21:0;;14936:30;;;;;;14986:18;14990:4;14996:7;14986:3;;;;:18;:::i;:::-;14985:19;14977:28;;;;;;-1:-1:-1;;;;;15018:20:0;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;15018:27:0;15041:4;15018:27;;;14867:186::o;15415:165::-;15487:4;-1:-1:-1;;;;;15512:21:0;;15504:30;;;;;;-1:-1:-1;;;;;;15552:20:0;:11;:20;;;;;;;;;;;;;;;15415:165::o;24307:599::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"participant\",\"type\":\"address\"}],\"name\":\"verifyParticipant\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"verifyParticipant(address)\":{\"details\":\"override to support legacy name\"}}},\"userdoc\":{\"methods\":{\"removeWhitelistAdmin(address)\":{\"notice\":\"Allow the owner to remove a whitelistAdmin\"},\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"notice\":\"Manages whitelisted addresses.  \"}},\"settings\":{\"compilationTarget\":{\"source code\":\"InvictusWhitelist\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "MinterRole": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"MinterRole\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "Ownable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"The Ownable contract has an owner address, and provides basic authorization control functions, this simplifies the implementation of \\\"user permissions\\\".\",\"methods\":{\"constructor\":{\"details\":\"The Ownable constructor sets the original `owner` of the contract to the sender account.\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Ownable\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"source code\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "Pausable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Base contract which allows children to implement an emergency stop mechanism.\",\"methods\":{\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"paused()\":{\"return\":\"true if the contract is paused, false otherwise.\"},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"Pausable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "PauserRole": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"PauserRole\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "Roles": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f75cf648c2e686f5eb107b2ff5f9e6254a4fe61730d2d16d0f7e4115e47da24d0029",
            "opcodes": "PUSH1 0x4C PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0xf7 0x5c 0xf6 0x48 0xc2 0xe6 DUP7 CREATE2 0xeb LT PUSH28 0x2FF5F9E6254A4FE61730D2D16D0F7E4115E47DA24D00290000000000 ",
            "sourceMap": "14708:875:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing addresses assigned to a Role.\",\"methods\":{},\"title\":\"Roles\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"Roles\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "SafeERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058202e98a603c8df7f5367eb78f5cb04a5f6d4d6f5b08607e7e66382ea49ac102d240029",
            "opcodes": "PUSH1 0x4C PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 0x2e SWAP9 0xa6 SUB 0xc8 0xdf PUSH32 0x5367EB78F5CB04A5F6D4D6F5B08607E7E66382EA49AC102D2400290000000000 ",
            "sourceMap": "13243:1276:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure. To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"methods\":{},\"title\":\"SafeERC20\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"SafeERC20\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "SafeMath": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058203284661785feff3309c41dd29dd7678ad940b112b01d49c218e9221e318fef2a0029",
            "opcodes": "PUSH1 0x4C PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 ORIGIN DUP5 PUSH7 0x1785FEFF3309C4 SAR 0xd2 SWAP14 0xd7 PUSH8 0x8AD940B112B01D49 0xc2 XOR 0xe9 0x22 0x1e BALANCE DUP16 0xef 0x2a STOP 0x29 ",
            "sourceMap": "2455:1784:0:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Unsigned math operations with safety checks that revert on error\",\"methods\":{},\"title\":\"SafeMath\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "WhitelistAdminRole": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\",\"methods\":{},\"title\":\"WhitelistAdminRole\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"WhitelistAdminRole\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      },
      "WhitelistedRole": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60806040526100163364010000000061001b810204565b6100f4565b61003360008264010000000061036b61006a82021704565b604051600160a060020a038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600160a060020a03811661007d57600080fd5b61009082826401000000006100bf810204565b1561009a57600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6000600160a060020a0382166100d457600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b61042b806101036000396000f3fe608060405234801561001057600080fd5b506004361061009a576000357c0100000000000000000000000000000000000000000000000000000000900480634c5a628c116100785780634c5a628c146101275780637362d9c81461012f578063bb5f747b14610155578063d6cd94731461017b5761009a565b806310154bad1461009f578063291d9549146100c75780633af32abf146100ed575b600080fd5b6100c5600480360360208110156100b557600080fd5b5035600160a060020a0316610183565b005b6100c5600480360360208110156100dd57600080fd5b5035600160a060020a03166101a1565b6101136004803603602081101561010357600080fd5b5035600160a060020a03166101bc565b604080519115158252519081900360200190f35b6100c56101d5565b6100c56004803603602081101561014557600080fd5b5035600160a060020a03166101e0565b6101136004803603602081101561016b57600080fd5b5035600160a060020a03166101fb565b6100c561020d565b61018c336101fb565b61019557600080fd5b61019e81610216565b50565b6101aa336101fb565b6101b357600080fd5b61019e8161025e565b60006101cf60018363ffffffff6102a616565b92915050565b6101de336102db565b565b6101e9336101fb565b6101f257600080fd5b61019e81610323565b60006101cf818363ffffffff6102a616565b6101de3361025e565b61022760018263ffffffff61036b16565b604051600160a060020a038216907fee1504a83b6d4a361f4c1dc78ab59bfa30d6a3b6612c403e86bb01ef2984295f90600090a250565b61026f60018263ffffffff6103b716565b604051600160a060020a038216907f270d9b30cf5b0793bbfd54c9d5b94aeb49462b8148399000265144a8722da6b690600090a250565b6000600160a060020a0382166102bb57600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6102ec60008263ffffffff6103b716565b604051600160a060020a038216907f0a8eb35e5ca14b3d6f28e4abf2f128dbab231a58b56e89beb5d636115001e16590600090a250565b61033460008263ffffffff61036b16565b604051600160a060020a038216907f22380c05984257a1cb900161c713dd71d39e74820f1aea43bd3f1bdd2096129990600090a250565b600160a060020a03811661037e57600080fd5b61038882826102a6565b1561039257600080fd5b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b600160a060020a0381166103ca57600080fd5b6103d482826102a6565b6103dd57600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916905556fea165627a7a72305820970885cabd2b3a02adde2816fd4c9a99c38e5a68b413537d1155fef737b459130029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH2 0x16 CALLER PUSH5 0x100000000 PUSH2 0x1B DUP2 MUL DIV JUMP JUMPDEST PUSH2 0xF4 JUMP JUMPDEST PUSH2 0x33 PUSH1 0x0 DUP3 PUSH5 0x100000000 PUSH2 0x36B PUSH2 0x6A DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x22380C05984257A1CB900161C713DD71D39E74820F1AEA43BD3F1BDD20961299 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x90 DUP3 DUP3 PUSH5 0x100000000 PUSH2 0xBF DUP2 MUL DIV JUMP JUMPDEST ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x42B DUP1 PUSH2 0x103 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x9A JUMPI PUSH1 0x0 CALLDATALOAD PUSH29 0x100000000000000000000000000000000000000000000000000000000 SWAP1 DIV DUP1 PUSH4 0x4C5A628C GT PUSH2 0x78 JUMPI DUP1 PUSH4 0x4C5A628C EQ PUSH2 0x127 JUMPI DUP1 PUSH4 0x7362D9C8 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xBB5F747B EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0xD6CD9473 EQ PUSH2 0x17B JUMPI PUSH2 0x9A JUMP JUMPDEST DUP1 PUSH4 0x10154BAD EQ PUSH2 0x9F JUMPI DUP1 PUSH4 0x291D9549 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0x3AF32ABF EQ PUSH2 0xED JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x183 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1A1 JUMP JUMPDEST PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0xC5 PUSH2 0x1D5 JUMP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x145 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1E0 JUMP JUMPDEST PUSH2 0x113 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x16B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH2 0x1FB JUMP JUMPDEST PUSH2 0xC5 PUSH2 0x20D JUMP JUMPDEST PUSH2 0x18C CALLER PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E DUP2 PUSH2 0x216 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x1AA CALLER PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E DUP2 PUSH2 0x25E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF PUSH1 0x1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2A6 AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DE CALLER PUSH2 0x2DB JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x1E9 CALLER PUSH2 0x1FB JUMP JUMPDEST PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x19E DUP2 PUSH2 0x323 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CF DUP2 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x2A6 AND JUMP JUMPDEST PUSH2 0x1DE CALLER PUSH2 0x25E JUMP JUMPDEST PUSH2 0x227 PUSH1 0x1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x36B AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xEE1504A83B6D4A361F4C1DC78AB59BFA30D6A3B6612C403E86BB01EF2984295F SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x26F PUSH1 0x1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x3B7 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x270D9B30CF5B0793BBFD54C9D5B94AEB49462B8148399000265144A8722DA6B6 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH2 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x2EC PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x3B7 AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0xA8EB35E5CA14B3D6F28E4ABF2F128DBAB231A58B56E89BEB5D636115001E165 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 0x334 PUSH1 0x0 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x36B AND JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND SWAP1 PUSH32 0x22380C05984257A1CB900161C713DD71D39E74820F1AEA43BD3F1BDD20961299 SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x388 DUP3 DUP3 PUSH2 0x2A6 JUMP JUMPDEST ISZERO PUSH2 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3D4 DUP3 DUP3 PUSH2 0x2A6 JUMP JUMPDEST PUSH2 0x3DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP INVALID LOG1 PUSH6 0x627A7A723058 KECCAK256 SWAP8 ADDMOD DUP6 0xca 0xbd 0x2b GASPRICE MUL 0xad 0xde 0x28 AND REVERT 0x4c SWAP11 SWAP10 0xc3 DUP15 GAS PUSH9 0xB413537D1155FEF737 0xb4 MSIZE SGT STOP 0x29 ",
            "sourceMap": "23080:1099:0:-;;;21819:30;21838:10;21819:18;;;;:30;:::i;:::-;23080:1099;;22329:146;22394:29;:16;22415:7;22394:20;;;;;;:29;:::i;:::-;22439:28;;-1:-1:-1;;;;;22439:28:0;;;;;;;;22329:146;:::o;14867:186::-;-1:-1:-1;;;;;14944:21:0;;14936:30;;;;;;14986:18;14990:4;14996:7;14986:3;;;;:18;:::i;:::-;14985:19;14977:28;;;;;;-1:-1:-1;;;;;15018:20:0;:11;:20;;;;;;;;;;;:27;;-1:-1:-1;;15018:27:0;15041:4;15018:27;;;14867:186::o;15415:165::-;15487:4;-1:-1:-1;;;;;15512:21:0;;15504:30;;;;;;-1:-1:-1;;;;;;15552:20:0;:11;:20;;;;;;;;;;;;;;;15415:165::o;23080:1099::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.5.6+commit.b259423e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addWhitelistAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isWhitelistAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceWhitelisted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistedRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WhitelistAdminRemoved\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove it), and not Whitelisteds themselves.\",\"methods\":{},\"title\":\"WhitelistedRole\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"WhitelistedRole\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-04-23\\n\\n*/\\n\\n\\n\\n/**\\n\\n * Invictus Capital - CRYPTO10 Hedged\\n\\n * https://invictuscapital.com\\n\\n * MIT License - https://github.com/invictuscapital/smartcontracts/\\n\\n * Uses code from the OpenZeppelin project\\n\\n */\\n\\n\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ninterface IERC20 {\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n\\n\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n\\n\\n    function totalSupply() external view returns (uint256);\\n\\n\\n\\n    function balanceOf(address who) external view returns (uint256);\\n\\n\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Detailed token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract ERC20Detailed is IERC20 {\\n\\n    string private _name;\\n\\n    string private _symbol;\\n\\n    uint8 private _decimals;\\n\\n\\n\\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\\n\\n        _name = name;\\n\\n        _symbol = symbol;\\n\\n        _decimals = decimals;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the name of the token.\\n\\n     */\\n\\n    function name() public view returns (string memory) {\\n\\n        return _name;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the symbol of the token.\\n\\n     */\\n\\n    function symbol() public view returns (string memory) {\\n\\n        return _symbol;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the number of decimals of the token.\\n\\n     */\\n\\n    function decimals() public view returns (uint8) {\\n\\n        return _decimals;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Unsigned math operations with safety checks that revert on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n    /**\\n\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n\\n        // benefit is lost if 'b' is also tested.\\n\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n        if (a == 0) {\\n\\n            return 0;\\n\\n        }\\n\\n\\n\\n        uint256 c = a * b;\\n\\n        require(c / a == b);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n\\n    */\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        // Solidity only automatically asserts when dividing by 0\\n\\n        require(b > 0);\\n\\n        uint256 c = a / b;\\n\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n\\n    */\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b <= a);\\n\\n        uint256 c = a - b;\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n\\n    */\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        uint256 c = a + b;\\n\\n        require(c >= a);\\n\\n\\n\\n        return c;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n\\n    * reverts when dividing by zero.\\n\\n    */\\n\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n        require(b != 0);\\n\\n        return a % b;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\\n\\n * Originally based on code by FirstBlood:\\n\\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n *\\n\\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\\n\\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\\n\\n * compliant implementations may not do it.\\n\\n */\\n\\ncontract ERC20 is IERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    mapping (address => uint256) private _balances;\\n\\n\\n\\n    mapping (address => mapping (address => uint256)) private _allowed;\\n\\n\\n\\n    uint256 private _totalSupply;\\n\\n\\n\\n    /**\\n\\n    * @dev Total number of tokens in existence\\n\\n    */\\n\\n    function totalSupply() public view returns (uint256) {\\n\\n        return _totalSupply;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Gets the balance of the specified address.\\n\\n    * @param owner The address to query the balance of.\\n\\n    * @return An uint256 representing the amount owned by the passed address.\\n\\n    */\\n\\n    function balanceOf(address owner) public view returns (uint256) {\\n\\n        return _balances[owner];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n     * @param owner address The address which owns the funds.\\n\\n     * @param spender address The address which will spend the funds.\\n\\n     * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n     */\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n\\n        return _allowed[owner][spender];\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified address\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function transfer(address to, uint256 value) public returns (bool) {\\n\\n        _transfer(msg.sender, to, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param value The amount of tokens to be spent.\\n\\n     */\\n\\n    function approve(address spender, uint256 value) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = value;\\n\\n        emit Approval(msg.sender, spender, value);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfer tokens from one address to another.\\n\\n     * Note that while this function emits an Approval event, this is not required as per the specification,\\n\\n     * and other compliant implementations may not emit the event.\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param to address The address which you want to transfer to\\n\\n     * @param value uint256 the amount of tokens to be transferred\\n\\n     */\\n\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\n\\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\\n\\n        _transfer(from, to, value);\\n\\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To increment\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param addedValue The amount of tokens to increase the allowance by.\\n\\n     */\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n     * approve should be called when allowed_[_spender] == 0. To decrement\\n\\n     * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n     * the first transaction is mined)\\n\\n     * From MonolithDAO Token.sol\\n\\n     * Emits an Approval event.\\n\\n     * @param spender The address which will spend the funds.\\n\\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\\n\\n     */\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n\\n        require(spender != address(0));\\n\\n\\n\\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\\n\\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n    * @dev Transfer token for a specified addresses\\n\\n    * @param from The address to transfer from.\\n\\n    * @param to The address to transfer to.\\n\\n    * @param value The amount to be transferred.\\n\\n    */\\n\\n    function _transfer(address from, address to, uint256 value) internal {\\n\\n        require(to != address(0));\\n\\n\\n\\n        _balances[from] = _balances[from].sub(value);\\n\\n        _balances[to] = _balances[to].add(value);\\n\\n        emit Transfer(from, to, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that mints an amount of the token and assigns it to\\n\\n     * an account. This encapsulates the modification of balances such that the\\n\\n     * proper events are emitted.\\n\\n     * @param account The account that will receive the created tokens.\\n\\n     * @param value The amount that will be created.\\n\\n     */\\n\\n    function _mint(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.add(value);\\n\\n        _balances[account] = _balances[account].add(value);\\n\\n        emit Transfer(address(0), account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account.\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burn(address account, uint256 value) internal {\\n\\n        require(account != address(0));\\n\\n\\n\\n        _totalSupply = _totalSupply.sub(value);\\n\\n        _balances[account] = _balances[account].sub(value);\\n\\n        emit Transfer(account, address(0), value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Internal function that burns an amount of the token of a given\\n\\n     * account, deducting from the sender's allowance for said account. Uses the\\n\\n     * internal burn function.\\n\\n     * Emits an Approval event (reflecting the reduced allowance).\\n\\n     * @param account The account whose tokens will be burnt.\\n\\n     * @param value The amount that will be burnt.\\n\\n     */\\n\\n    function _burnFrom(address account, uint256 value) internal {\\n\\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\\n\\n        _burn(account, value);\\n\\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Burnable Token\\n\\n * @dev Token that can be irreversibly burned (destroyed).\\n\\n */\\n\\ncontract ERC20Burnable is ERC20 {\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens.\\n\\n     * @param value The amount of token to be burned.\\n\\n     */\\n\\n    function burn(uint256 value) public {\\n\\n        _burn(msg.sender, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\\n\\n     * @param from address The address which you want to send tokens from\\n\\n     * @param value uint256 The amount of token to be burned\\n\\n     */\\n\\n    function burnFrom(address from, uint256 value) public {\\n\\n        _burnFrom(from, value);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeERC20\\n\\n * @dev Wrappers around ERC20 operations that throw on failure.\\n\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n\\n */\\n\\nlibrary SafeERC20 {\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n\\n        require(token.transfer(to, value));\\n\\n    }\\n\\n\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n\\n        require(token.transferFrom(from, to, value));\\n\\n    }\\n\\n\\n\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n\\n        // safeApprove should only be called when setting an initial allowance,\\n\\n        // or when resetting it to zero. To increase and decrease it, use\\n\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n\\n        require((value == 0) || (token.allowance(address(this), spender) == 0));\\n\\n        require(token.approve(spender, value));\\n\\n    }\\n\\n\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\\n\\n        require(token.approve(spender, newAllowance));\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/Roles.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Roles\\n\\n * @dev Library for managing addresses assigned to a Role.\\n\\n */\\n\\nlibrary Roles {\\n\\n    struct Role {\\n\\n        mapping (address => bool) bearer;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev give an account access to this role\\n\\n     */\\n\\n    function add(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(!has(role, account));\\n\\n\\n\\n        role.bearer[account] = true;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev remove an account's access to this role\\n\\n     */\\n\\n    function remove(Role storage role, address account) internal {\\n\\n        require(account != address(0));\\n\\n        require(has(role, account));\\n\\n\\n\\n        role.bearer[account] = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev check if an account has this role\\n\\n     * @return bool\\n\\n     */\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n\\n        require(account != address(0));\\n\\n        return role.bearer[account];\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/MinterRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract MinterRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event MinterAdded(address indexed account);\\n\\n    event MinterRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _minters;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyMinter() {\\n\\n        require(isMinter(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isMinter(address account) public view returns (bool) {\\n\\n        return _minters.has(account);\\n\\n    }\\n\\n\\n\\n    function addMinter(address account) public onlyMinter {\\n\\n        _addMinter(account);\\n\\n    }\\n\\n\\n\\n    function renounceMinter() public {\\n\\n        _removeMinter(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addMinter(address account) internal {\\n\\n        _minters.add(account);\\n\\n        emit MinterAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeMinter(address account) internal {\\n\\n        _minters.remove(account);\\n\\n        emit MinterRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\ncontract PauserRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _pausers;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addPauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyPauser() {\\n\\n        require(isPauser(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isPauser(address account) public view returns (bool) {\\n\\n        return _pausers.has(account);\\n\\n    }\\n\\n\\n\\n    function addPauser(address account) public onlyPauser {\\n\\n        _addPauser(account);\\n\\n    }\\n\\n\\n\\n    function renouncePauser() public {\\n\\n        _removePauser(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addPauser(address account) internal {\\n\\n        _pausers.add(account);\\n\\n        emit PauserAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removePauser(address account) internal {\\n\\n        _pausers.remove(account);\\n\\n        emit PauserRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is PauserRole {\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n\\n\\n    bool private _paused;\\n\\n\\n\\n    constructor () internal {\\n\\n        _paused = false;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if the contract is paused, false otherwise.\\n\\n     */\\n\\n    function paused() public view returns (bool) {\\n\\n        return _paused;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n     */\\n\\n    modifier whenNotPaused() {\\n\\n        require(!_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n\\n     */\\n\\n    modifier whenPaused() {\\n\\n        require(_paused);\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to pause, triggers stopped state\\n\\n     */\\n\\n    function pause() public onlyPauser whenNotPaused {\\n\\n        _paused = true;\\n\\n        emit Paused(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev called by the owner to unpause, returns to normal state\\n\\n     */\\n\\n    function unpause() public onlyPauser whenPaused {\\n\\n        _paused = false;\\n\\n        emit Unpaused(msg.sender);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/ownership/Ownable.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n    address private _owner;\\n\\n\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n    /**\\n\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n     * account.\\n\\n     */\\n\\n    constructor () internal {\\n\\n        _owner = msg.sender;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return the address of the owner.\\n\\n     */\\n\\n    function owner() public view returns (address) {\\n\\n        return _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Throws if called by any account other than the owner.\\n\\n     */\\n\\n    modifier onlyOwner() {\\n\\n        require(isOwner());\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @return true if `msg.sender` is the owner of the contract.\\n\\n     */\\n\\n    function isOwner() public view returns (bool) {\\n\\n        return msg.sender == _owner;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to relinquish control of the contract.\\n\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n     * It will not be possible to call the functions with the `onlyOwner`\\n\\n     * modifier anymore.\\n\\n     */\\n\\n    function renounceOwnership() public onlyOwner {\\n\\n        emit OwnershipTransferred(_owner, address(0));\\n\\n        _owner = address(0);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function transferOwnership(address newOwner) public onlyOwner {\\n\\n        _transferOwnership(newOwner);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Transfers control of the contract to a newOwner.\\n\\n     * @param newOwner The address to transfer ownership to.\\n\\n     */\\n\\n    function _transferOwnership(address newOwner) internal {\\n\\n        require(newOwner != address(0));\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistAdminRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistAdminRole\\n\\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\\n\\n */\\n\\ncontract WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistAdminAdded(address indexed account);\\n\\n    event WhitelistAdminRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelistAdmins;\\n\\n\\n\\n    constructor () internal {\\n\\n        _addWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelistAdmin() {\\n\\n        require(isWhitelistAdmin(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelistAdmin(address account) public view returns (bool) {\\n\\n        return _whitelistAdmins.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelistAdmin(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelistAdmin() public {\\n\\n        _removeWhitelistAdmin(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.add(account);\\n\\n        emit WhitelistAdminAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelistAdmin(address account) internal {\\n\\n        _whitelistAdmins.remove(account);\\n\\n        emit WhitelistAdminRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/openzeppelin-solidity/contracts/access/roles/WhitelistedRole.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title WhitelistedRole\\n\\n * @dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\\n\\n * crowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\\n\\n * it), and not Whitelisteds themselves.\\n\\n */\\n\\ncontract WhitelistedRole is WhitelistAdminRole {\\n\\n    using Roles for Roles.Role;\\n\\n\\n\\n    event WhitelistedAdded(address indexed account);\\n\\n    event WhitelistedRemoved(address indexed account);\\n\\n\\n\\n    Roles.Role private _whitelisteds;\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(isWhitelisted(msg.sender));\\n\\n        _;\\n\\n    }\\n\\n\\n\\n    function isWhitelisted(address account) public view returns (bool) {\\n\\n        return _whitelisteds.has(account);\\n\\n    }\\n\\n\\n\\n    function addWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _addWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function removeWhitelisted(address account) public onlyWhitelistAdmin {\\n\\n        _removeWhitelisted(account);\\n\\n    }\\n\\n\\n\\n    function renounceWhitelisted() public {\\n\\n        _removeWhitelisted(msg.sender);\\n\\n    }\\n\\n\\n\\n    function _addWhitelisted(address account) internal {\\n\\n        _whitelisteds.add(account);\\n\\n        emit WhitelistedAdded(account);\\n\\n    }\\n\\n\\n\\n    function _removeWhitelisted(address account) internal {\\n\\n        _whitelisteds.remove(account);\\n\\n        emit WhitelistedRemoved(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/InvictusWhitelist.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Manages whitelisted addresses.\\n\\n *\\n\\n */\\n\\ncontract InvictusWhitelist is Ownable, WhitelistedRole {\\n\\n    constructor ()\\n\\n        WhitelistedRole() public {\\n\\n    }\\n\\n\\n\\n    /// @dev override to support legacy name\\n\\n    function verifyParticipant(address participant) public onlyWhitelistAdmin {\\n\\n        if (!isWhitelisted(participant)) {\\n\\n            addWhitelisted(participant);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a whitelistAdmin\\n\\n    function removeWhitelistAdmin(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceWhitelistAdmin\\\");\\n\\n        _removeWhitelistAdmin(account);\\n\\n    }\\n\\n}\\n\\n\\n\\n// File: contracts/C10Token.sol\\n\\n\\n\\npragma solidity ^0.5.6;\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * Contract for CRYPTO10 Hedged (C10) fund.\\n\\n *\\n\\n */\\n\\ncontract C10Token is ERC20, ERC20Detailed, ERC20Burnable, Ownable, Pausable, MinterRole {\\n\\n\\n\\n    using SafeERC20 for ERC20;\\n\\n    using SafeMath for uint256;\\n\\n\\n\\n    // Maps participant addresses to the eth balance pending token issuance\\n\\n    mapping(address => uint256) public pendingBuys;\\n\\n    // The participant accounts waiting for token issuance\\n\\n    address[] public participantAddresses;\\n\\n\\n\\n    // Maps participant addresses to the withdrawal request\\n\\n    mapping (address => uint256) public pendingWithdrawals;\\n\\n    address payable[] public withdrawals;\\n\\n\\n\\n    uint256 private minimumWei = 50 finney;\\n\\n    uint256 private fees = 5;  // 0.5% , or 5/1000\\n\\n    uint256 private minTokenRedemption = 1 ether;\\n\\n    uint256 private maxAllocationsPerTx = 50;\\n\\n    uint256 private maxWithdrawalsPerTx = 50;\\n\\n    Price public price;\\n\\n\\n\\n    address public whitelistContract;\\n\\n\\n\\n    struct Price {\\n\\n        uint256 numerator;\\n\\n        uint256 denominator;\\n\\n    }\\n\\n\\n\\n    event PriceUpdate(uint256 numerator, uint256 denominator);\\n\\n    event AddLiquidity(uint256 value);\\n\\n    event RemoveLiquidity(uint256 value);\\n\\n    event DepositReceived(address indexed participant, uint256 value);\\n\\n    event TokensIssued(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event WithdrawRequest(address indexed participant, uint256 amountTokens);\\n\\n    event Withdraw(address indexed participant, uint256 amountTokens, uint256 etherAmount);\\n\\n    event TokensClaimed(address indexed token, uint256 balance);\\n\\n\\n\\n    constructor (uint256 priceNumeratorInput, address whitelistContractInput)\\n\\n        ERC20Detailed(\\\"Crypto10 Hedged\\\", \\\"C10\\\", 18)\\n\\n        ERC20Burnable()\\n\\n        Pausable() public {\\n\\n            price = Price(priceNumeratorInput, 1000);\\n\\n            require(priceNumeratorInput > 0, \\\"Invalid price numerator\\\");\\n\\n            require(whitelistContractInput != address(0), \\\"Invalid whitelist address\\\");\\n\\n            whitelistContract = whitelistContractInput;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev fallback function that buys tokens if the sender is whitelisted.\\n\\n     */\\n\\n    function () external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Explicitly buy via contract.\\n\\n     */\\n\\n    function buy() external payable {\\n\\n        buyTokens(msg.sender);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of allocations in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxAllocationsPerTx(uint256 newMaxAllocationsPerTx) external onlyOwner {\\n\\n        require(newMaxAllocationsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxAllocationsPerTx = newMaxAllocationsPerTx;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Sets the maximum number of withdrawals in a single transaction.\\n\\n     * @dev Allows us to configure batch sizes and avoid running out of gas.\\n\\n     */\\n\\n    function setMaxWithdrawalsPerTx(uint256 newMaxWithdrawalsPerTx) external onlyOwner {\\n\\n        require(newMaxWithdrawalsPerTx > 0, \\\"Must be greater than 0\\\");\\n\\n        maxWithdrawalsPerTx = newMaxWithdrawalsPerTx;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum wei when buying tokens.\\n\\n    function setMinimumBuyValue(uint256 newMinimumWei) external onlyOwner {\\n\\n        require(newMinimumWei > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minimumWei = newMinimumWei;\\n\\n    }\\n\\n\\n\\n    /// Sets the minimum number of tokens to redeem.\\n\\n    function setMinimumTokenRedemption(uint256 newMinTokenRedemption) external onlyOwner {\\n\\n        require(newMinTokenRedemption > 0, \\\"Minimum must be greater than 0\\\");\\n\\n        minTokenRedemption = newMinTokenRedemption;\\n\\n    }\\n\\n\\n\\n    /// Updates the price numerator.\\n\\n    function updatePrice(uint256 newNumerator) external onlyMinter {\\n\\n        require(newNumerator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.numerator = newNumerator;\\n\\n\\n\\n        allocateTokens();\\n\\n        processWithdrawals();\\n\\n        emit PriceUpdate(price.numerator, price.denominator);\\n\\n    }\\n\\n\\n\\n    /// Updates the price denominator.\\n\\n    function updatePriceDenominator(uint256 newDenominator) external onlyMinter {\\n\\n        require(newDenominator > 0, \\\"Must be positive value\\\");\\n\\n\\n\\n        price.denominator = newDenominator;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * Whitelisted token holders can request token redemption, and withdraw ETH.\\n\\n     * @param amountTokensToWithdraw The number of tokens to withdraw.\\n\\n     * @dev withdrawn tokens are burnt.\\n\\n     */\\n\\n    function requestWithdrawal(uint256 amountTokensToWithdraw) external whenNotPaused \\n\\n        onlyWhitelisted {\\n\\n\\n\\n        address payable participant = msg.sender;\\n\\n        require(balanceOf(participant) >= amountTokensToWithdraw, \\n\\n            \\\"Cannot withdraw more than balance held\\\");\\n\\n        require(amountTokensToWithdraw >= minTokenRedemption, \\\"Too few tokens\\\");\\n\\n\\n\\n        burn(amountTokensToWithdraw);\\n\\n\\n\\n        uint256 pendingAmount = pendingWithdrawals[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            withdrawals.push(participant);\\n\\n        }\\n\\n        pendingWithdrawals[participant] = pendingAmount.add(amountTokensToWithdraw);\\n\\n        emit WithdrawRequest(participant, amountTokensToWithdraw);\\n\\n    }\\n\\n\\n\\n    /// Allows owner to claim any ERC20 tokens.\\n\\n    function claimTokens(ERC20 token) external payable onlyOwner {\\n\\n        require(address(token) != address(0), \\\"Invalid address\\\");\\n\\n        uint256 balance = token.balanceOf(address(this));\\n\\n        token.transfer(owner(), token.balanceOf(address(this)));\\n\\n        emit TokensClaimed(address(token), balance);\\n\\n    }\\n\\n    \\n\\n    /**\\n\\n     * @dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\\n\\n     * @param value The amount of tokens to be burned.\\n\\n     */\\n\\n    function burnForParticipant(address account, uint256 value) public onlyOwner {\\n\\n        _burn(account, value);\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * @dev Function to mint tokens when not paused.\\n\\n     * @param to The address that will receive the minted tokens.\\n\\n     * @param value The amount of tokens to mint.\\n\\n     * @return A boolean that indicates if the operation was successful.\\n\\n     */\\n\\n    function mint(address to, uint256 value) public onlyMinter whenNotPaused returns (bool) {\\n\\n        _mint(to, value);\\n\\n\\n\\n        return true;\\n\\n    }\\n\\n\\n\\n    /// Adds liquidity to the contract, allowing anyone to deposit ETH\\n\\n    function addLiquidity() public payable {\\n\\n        require(msg.value > 0, \\\"Must be positive value\\\");\\n\\n        emit AddLiquidity(msg.value);\\n\\n    }\\n\\n\\n\\n    /// Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.\\n\\n    function removeLiquidity(uint256 amount) public onlyOwner {\\n\\n        require(amount <= address(this).balance, \\\"Insufficient balance\\\");\\n\\n\\n\\n        msg.sender.transfer(amount);\\n\\n        emit RemoveLiquidity(amount);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a minter\\n\\n    function removeMinter(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renounceMinter\\\");\\n\\n        _removeMinter(account);\\n\\n    }\\n\\n\\n\\n    /// Allow the owner to remove a pauser\\n\\n    function removePauser(address account) public onlyOwner {\\n\\n        require(account != msg.sender, \\\"Use renouncePauser\\\");\\n\\n        _removePauser(account);\\n\\n    }\\n\\n\\n\\n    /// returns the number of withdrawals pending.\\n\\n    function numberWithdrawalsPending() public view returns (uint256) {\\n\\n        return withdrawals.length;\\n\\n    }\\n\\n\\n\\n    /// returns the number of pending buys, waiting for token issuance.\\n\\n    function numberBuysPending() public view returns (uint256) {\\n\\n        return participantAddresses.length;\\n\\n    }\\n\\n\\n\\n    /**\\n\\n     * First phase of the 2-part buy, the participant deposits eth and waits\\n\\n     * for a price to be set so the tokens can be minted.\\n\\n     * @param participant whitelisted buyer.\\n\\n     */\\n\\n    function buyTokens(address participant) internal whenNotPaused onlyWhitelisted {\\n\\n        assert(participant != address(0));\\n\\n\\n\\n        // Ensure minimum investment is met\\n\\n        require(msg.value >= minimumWei, \\\"Minimum wei not met\\\");\\n\\n\\n\\n        uint256 pendingAmount = pendingBuys[participant];\\n\\n        if (pendingAmount == 0) {\\n\\n            participantAddresses.push(participant);\\n\\n        }\\n\\n\\n\\n        // Increase the pending balance and wait for the price update\\n\\n        pendingBuys[participant] = pendingAmount.add(msg.value);\\n\\n\\n\\n        emit DepositReceived(participant, msg.value);\\n\\n    }\\n\\n\\n\\n    /// Internal function to allocate token.\\n\\n    function allocateTokens() internal {\\n\\n        uint256 numberOfAllocations = participantAddresses.length <= maxAllocationsPerTx ? \\n\\n            participantAddresses.length : maxAllocationsPerTx;\\n\\n        \\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfAllocations; i > 0; i--) {\\n\\n            address participant = participantAddresses[i - 1];\\n\\n            uint256 deposit = pendingBuys[participant];\\n\\n            uint256 feeAmount = deposit.mul(fees) / 1000;\\n\\n            uint256 balance = deposit.sub(feeAmount);\\n\\n\\n\\n            uint256 newTokens = balance.mul(price.numerator) / price.denominator;\\n\\n            pendingBuys[participant] = 0;\\n\\n            participantAddresses.pop();\\n\\n\\n\\n            ownerAddress.transfer(feeAmount);\\n\\n\\n\\n            mint(participant, newTokens);   \\n\\n            emit TokensIssued(participant, newTokens, balance);\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// Internal function to process withdrawals.\\n\\n    function processWithdrawals() internal {\\n\\n        uint256 numberOfWithdrawals = withdrawals.length <= maxWithdrawalsPerTx ? \\n\\n            withdrawals.length : maxWithdrawalsPerTx;\\n\\n\\n\\n        address payable ownerAddress = address(uint160(owner()));\\n\\n        for (uint256 i = numberOfWithdrawals; i > 0; i--) {\\n\\n            address payable participant = withdrawals[i - 1];\\n\\n            uint256 tokens = pendingWithdrawals[participant];\\n\\n\\n\\n            assert(tokens > 0); // participant must have requested a withdrawal\\n\\n\\n\\n            uint256 withdrawValue = tokens.mul(price.denominator) / price.numerator;\\n\\n\\n\\n            pendingWithdrawals[participant] = 0;\\n\\n            withdrawals.pop();\\n\\n\\n\\n            if (address(this).balance >= withdrawValue) {\\n\\n                uint256 feeAmount = withdrawValue.mul(fees) / 1000;\\n\\n                uint256 balance = withdrawValue.sub(feeAmount);\\n\\n\\n\\n                participant.transfer(balance);\\n\\n\\n\\n                ownerAddress.transfer(feeAmount);\\n\\n\\n\\n                emit Withdraw(participant, tokens, balance);\\n\\n            }\\n\\n            else {\\n\\n                mint(participant, tokens);\\n\\n                emit Withdraw(participant, tokens, 0); // indicate a failed withdrawal\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    modifier onlyWhitelisted() {\\n\\n        require(InvictusWhitelist(whitelistContract).isWhitelisted(msg.sender), \\\"Must be whitelisted\\\");\\n\\n        _;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x47c707e0dab9460240f18ff1f469bf9da219eada7873cc0b50955cc3382fefe4\"}},\"version\":1}"
      }
    }
  },
  "sources": {
    "source code": {
      "ast": {
        "absolutePath": "source code",
        "exportedSymbols": {
          "C10Token": [
            2457
          ],
          "ERC20": [
            680
          ],
          "ERC20Burnable": [
            709
          ],
          "ERC20Detailed": [
            124
          ],
          "IERC20": [
            68
          ],
          "InvictusWhitelist": [
            1592
          ],
          "MinterRole": [
            1045
          ],
          "Ownable": [
            1335
          ],
          "Pausable": [
            1227
          ],
          "PauserRole": [
            1146
          ],
          "Roles": [
            944
          ],
          "SafeERC20": [
            851
          ],
          "SafeMath": [
            251
          ],
          "WhitelistAdminRole": [
            1436
          ],
          "WhitelistedRole": [
            1542
          ]
        },
        "id": 2458,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "346:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "interface",
            "documentation": "@title ERC20 interface\n@dev see https://github.com/ethereum/EIPs/issues/20",
            "fullyImplemented": false,
            "id": 68,
            "linearizedBaseContracts": [
              68
            ],
            "name": "IERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "documentation": null,
                "id": 10,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 6,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 3,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 10,
                      "src": "508:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "508:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 5,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 10,
                      "src": "520:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 4,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "507:27:0"
                },
                "returnParameters": {
                  "id": 9,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 8,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 10,
                      "src": "553:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 7,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "553:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "552:6:0"
                },
                "scope": 68,
                "src": "490:69:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": null,
                "documentation": null,
                "id": 19,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 15,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 12,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 19,
                      "src": "584:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 11,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "584:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 14,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 19,
                      "src": "601:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 13,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "601:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "583:32:0"
                },
                "returnParameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 17,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 19,
                      "src": "634:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 16,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "634:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "633:6:0"
                },
                "scope": 68,
                "src": "567:73:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": null,
                "documentation": null,
                "id": 30,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 26,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 21,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "670:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 20,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "670:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 23,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "684:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 22,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "684:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 25,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "696:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 24,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "696:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "669:41:0"
                },
                "returnParameters": {
                  "id": 29,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 28,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "729:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 27,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "729:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "728:6:0"
                },
                "scope": 68,
                "src": "648:87:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": null,
                "documentation": null,
                "id": 35,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 31,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "763:2:0"
                },
                "returnParameters": {
                  "id": 34,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 33,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 35,
                      "src": "789:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 32,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "789:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "788:9:0"
                },
                "scope": 68,
                "src": "743:55:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": null,
                "documentation": null,
                "id": 42,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 38,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 37,
                      "name": "who",
                      "nodeType": "VariableDeclaration",
                      "scope": 42,
                      "src": "825:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 36,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "825:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "824:13:0"
                },
                "returnParameters": {
                  "id": 41,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 40,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 42,
                      "src": "861:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 39,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "861:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "860:9:0"
                },
                "scope": 68,
                "src": "806:64:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": null,
                "documentation": null,
                "id": 51,
                "implemented": false,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 47,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 44,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 51,
                      "src": "897:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 43,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "897:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 46,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 51,
                      "src": "912:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 45,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "912:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "896:32:0"
                },
                "returnParameters": {
                  "id": 50,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 49,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 51,
                      "src": "952:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 48,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "952:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "951:9:0"
                },
                "scope": 68,
                "src": "878:83:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 59,
                "name": "Transfer",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 58,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 53,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 59,
                      "src": "984:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 52,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "984:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 55,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 59,
                      "src": "1006:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 54,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1006:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 57,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 59,
                      "src": "1026:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 56,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1026:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "983:57:0"
                },
                "src": "969:72:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 67,
                "name": "Approval",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 66,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 61,
                      "indexed": true,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 67,
                      "src": "1064:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 60,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1064:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 63,
                      "indexed": true,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 67,
                      "src": "1087:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 62,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1087:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 65,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 67,
                      "src": "1112:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 64,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "1112:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1063:63:0"
                },
                "src": "1049:78:0"
              }
            ],
            "scope": 2458,
            "src": "466:664:0"
          },
          {
            "id": 69,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "1218:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 70,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 68,
                  "src": "1512:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$68",
                    "typeString": "contract IERC20"
                  }
                },
                "id": 71,
                "nodeType": "InheritanceSpecifier",
                "src": "1512:6:0"
              }
            ],
            "contractDependencies": [
              68
            ],
            "contractKind": "contract",
            "documentation": "@title ERC20Detailed token\n@dev The decimals are only for visualization purposes.\nAll the operations are done using the smallest and indivisible token unit,\njust as on Ethereum all the operations are done in wei.",
            "fullyImplemented": false,
            "id": 124,
            "linearizedBaseContracts": [
              124,
              68
            ],
            "name": "ERC20Detailed",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 73,
                "name": "_name",
                "nodeType": "VariableDeclaration",
                "scope": 124,
                "src": "1526:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 72,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1526:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 75,
                "name": "_symbol",
                "nodeType": "VariableDeclaration",
                "scope": 124,
                "src": "1553:22:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 74,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1553:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 77,
                "name": "_decimals",
                "nodeType": "VariableDeclaration",
                "scope": 124,
                "src": "1582:23:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 76,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "1582:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 98,
                  "nodeType": "Block",
                  "src": "1692:89:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 86,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 73,
                          "src": "1703:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 87,
                          "name": "name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 79,
                          "src": "1711:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "1703:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 89,
                      "nodeType": "ExpressionStatement",
                      "src": "1703:12:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 92,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 90,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 75,
                          "src": "1726:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 91,
                          "name": "symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 81,
                          "src": "1736:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "1726:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 93,
                      "nodeType": "ExpressionStatement",
                      "src": "1726:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 96,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 94,
                          "name": "_decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 77,
                          "src": "1753:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 95,
                          "name": "decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 83,
                          "src": "1765:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "src": "1753:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "id": 97,
                      "nodeType": "ExpressionStatement",
                      "src": "1753:20:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 99,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 84,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 79,
                      "name": "name",
                      "nodeType": "VariableDeclaration",
                      "scope": 99,
                      "src": "1627:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 78,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1627:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 81,
                      "name": "symbol",
                      "nodeType": "VariableDeclaration",
                      "scope": 99,
                      "src": "1647:20:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 80,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1647:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 83,
                      "name": "decimals",
                      "nodeType": "VariableDeclaration",
                      "scope": 99,
                      "src": "1669:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 82,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "1669:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1626:58:0"
                },
                "returnParameters": {
                  "id": 85,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1692:0:0"
                },
                "scope": 124,
                "src": "1614:167:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 106,
                  "nodeType": "Block",
                  "src": "1898:31:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 104,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 73,
                        "src": "1916:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 103,
                      "id": 105,
                      "nodeType": "Return",
                      "src": "1909:12:0"
                    }
                  ]
                },
                "documentation": "@return the name of the token.",
                "id": 107,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "name",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 100,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1859:2:0"
                },
                "returnParameters": {
                  "id": 103,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 102,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 107,
                      "src": "1883:13:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 101,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "1883:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1882:15:0"
                },
                "scope": 124,
                "src": "1846:83:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 114,
                  "nodeType": "Block",
                  "src": "2050:33:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 112,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 75,
                        "src": "2068:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "functionReturnParameters": 111,
                      "id": 113,
                      "nodeType": "Return",
                      "src": "2061:14:0"
                    }
                  ]
                },
                "documentation": "@return the symbol of the token.",
                "id": 115,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "symbol",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 108,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2011:2:0"
                },
                "returnParameters": {
                  "id": 111,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 110,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 115,
                      "src": "2035:13:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 109,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "2035:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2034:15:0"
                },
                "scope": 124,
                "src": "1996:87:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 122,
                  "nodeType": "Block",
                  "src": "2210:35:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 120,
                        "name": "_decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 77,
                        "src": "2228:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "functionReturnParameters": 119,
                      "id": 121,
                      "nodeType": "Return",
                      "src": "2221:16:0"
                    }
                  ]
                },
                "documentation": "@return the number of decimals of the token.",
                "id": 123,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "decimals",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 116,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2179:2:0"
                },
                "returnParameters": {
                  "id": 119,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 118,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 123,
                      "src": "2203:5:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 117,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "2203:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2202:7:0"
                },
                "scope": 124,
                "src": "2162:83:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2458,
            "src": "1486:762:0"
          },
          {
            "id": 125,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "2324:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "@title SafeMath\n@dev Unsigned math operations with safety checks that revert on error",
            "fullyImplemented": true,
            "id": 251,
            "linearizedBaseContracts": [
              251
            ],
            "name": "SafeMath",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 157,
                  "nodeType": "Block",
                  "src": "2630:366:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 136,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 134,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 127,
                          "src": "2865:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2870:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2865:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 140,
                      "nodeType": "IfStatement",
                      "src": "2861:47:0",
                      "trueBody": {
                        "id": 139,
                        "nodeType": "Block",
                        "src": "2873:35:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 137,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2895:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "functionReturnParameters": 133,
                            "id": 138,
                            "nodeType": "Return",
                            "src": "2888:8:0"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [
                        142
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 142,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 157,
                          "src": "2920:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 141,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "2920:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 146,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 145,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 143,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 127,
                          "src": "2932:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 144,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 129,
                          "src": "2936:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2932:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2920:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 152,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 150,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 148,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 142,
                                "src": "2956:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 149,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 127,
                                "src": "2960:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2956:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 151,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 129,
                              "src": "2965:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2956:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 147,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "2948:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2948:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 154,
                      "nodeType": "ExpressionStatement",
                      "src": "2948:19:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 155,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 142,
                        "src": "2987:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 133,
                      "id": 156,
                      "nodeType": "Return",
                      "src": "2980:8:0"
                    }
                  ]
                },
                "documentation": "@dev Multiplies two unsigned integers, reverts on overflow.",
                "id": 158,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "mul",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 130,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 127,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 158,
                      "src": "2576:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 126,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2576:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 129,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 158,
                      "src": "2587:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 128,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2587:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2575:22:0"
                },
                "returnParameters": {
                  "id": 133,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 132,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 158,
                      "src": "2621:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2621:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2620:9:0"
                },
                "scope": 251,
                "src": "2563:433:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 181,
                  "nodeType": "Block",
                  "src": "3196:236:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 170,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 168,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 162,
                              "src": "3282:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 169,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3286:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "3282:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 167,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "3274:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 171,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3274:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 172,
                      "nodeType": "ExpressionStatement",
                      "src": "3274:14:0"
                    },
                    {
                      "assignments": [
                        174
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 174,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 181,
                          "src": "3299:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 173,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3299:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 178,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 177,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 175,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 160,
                          "src": "3311:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 176,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 162,
                          "src": "3315:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3311:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3299:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 179,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 174,
                        "src": "3423:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 166,
                      "id": 180,
                      "nodeType": "Return",
                      "src": "3416:8:0"
                    }
                  ]
                },
                "documentation": "@dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.",
                "id": 182,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 163,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 160,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 182,
                      "src": "3142:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 159,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3142:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 162,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 182,
                      "src": "3153:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 161,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3153:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3141:22:0"
                },
                "returnParameters": {
                  "id": 166,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 165,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 182,
                      "src": "3187:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 164,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3187:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3186:9:0"
                },
                "scope": 251,
                "src": "3129:303:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 205,
                  "nodeType": "Block",
                  "src": "3635:83:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 194,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 192,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 186,
                              "src": "3654:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 193,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 184,
                              "src": "3659:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3654:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 191,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "3646:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3646:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 196,
                      "nodeType": "ExpressionStatement",
                      "src": "3646:15:0"
                    },
                    {
                      "assignments": [
                        198
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 198,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 205,
                          "src": "3672:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 197,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3672:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 202,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 199,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 184,
                          "src": "3684:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 200,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 186,
                          "src": "3688:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3684:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3672:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 203,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 198,
                        "src": "3709:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 190,
                      "id": 204,
                      "nodeType": "Return",
                      "src": "3702:8:0"
                    }
                  ]
                },
                "documentation": "@dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).",
                "id": 206,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 187,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 184,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 206,
                      "src": "3581:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 183,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3581:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 186,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 206,
                      "src": "3592:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 185,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3592:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3580:22:0"
                },
                "returnParameters": {
                  "id": 190,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 189,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 206,
                      "src": "3626:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 188,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3626:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3625:9:0"
                },
                "scope": 251,
                "src": "3568:150:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 229,
                  "nodeType": "Block",
                  "src": "3871:83:0",
                  "statements": [
                    {
                      "assignments": [
                        216
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 216,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 229,
                          "src": "3882:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 215,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "3882:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 220,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 217,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 208,
                          "src": "3894:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 218,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 210,
                          "src": "3898:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3894:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3882:17:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 222,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 216,
                              "src": "3918:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 223,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 208,
                              "src": "3923:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3918:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 221,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "3910:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3910:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 226,
                      "nodeType": "ExpressionStatement",
                      "src": "3910:15:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 227,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 216,
                        "src": "3945:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 214,
                      "id": 228,
                      "nodeType": "Return",
                      "src": "3938:8:0"
                    }
                  ]
                },
                "documentation": "@dev Adds two unsigned integers, reverts on overflow.",
                "id": 230,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 211,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 208,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3817:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 207,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3817:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 210,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3828:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 209,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3828:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3816:22:0"
                },
                "returnParameters": {
                  "id": 214,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 213,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3862:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 212,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3862:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3861:9:0"
                },
                "scope": 251,
                "src": "3804:150:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 249,
                  "nodeType": "Block",
                  "src": "4179:57:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 242,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 240,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 234,
                              "src": "4198:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4203:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "4198:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 239,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "4190:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 243,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4190:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 244,
                      "nodeType": "ExpressionStatement",
                      "src": "4190:15:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 247,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 245,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 232,
                          "src": "4223:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "%",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 246,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 234,
                          "src": "4227:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4223:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 238,
                      "id": 248,
                      "nodeType": "Return",
                      "src": "4216:12:0"
                    }
                  ]
                },
                "documentation": "@dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\nreverts when dividing by zero.",
                "id": 250,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "mod",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 235,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 232,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 250,
                      "src": "4125:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 231,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4125:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 234,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 250,
                      "src": "4136:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 233,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4136:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4124:22:0"
                },
                "returnParameters": {
                  "id": 238,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 237,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 250,
                      "src": "4170:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 236,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4170:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4169:9:0"
                },
                "scope": 251,
                "src": "4112:124:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "2455:1784:0"
          },
          {
            "id": 252,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "4319:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 253,
                  "name": "IERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 68,
                  "src": "4946:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$68",
                    "typeString": "contract IERC20"
                  }
                },
                "id": 254,
                "nodeType": "InheritanceSpecifier",
                "src": "4946:6:0"
              }
            ],
            "contractDependencies": [
              68
            ],
            "contractKind": "contract",
            "documentation": "@title Standard ERC20 token\n\n * @dev Implementation of the basic standard token.\nhttps://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\nOriginally based on code by FirstBlood:\nhttps://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\nall accounts just by listening to said events. Note that this isn't required by the specification, and other\ncompliant implementations may not do it.",
            "fullyImplemented": true,
            "id": 680,
            "linearizedBaseContracts": [
              680,
              68
            ],
            "name": "ERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 257,
                "libraryName": {
                  "contractScope": null,
                  "id": 255,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 251,
                  "src": "4966:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$251",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "4960:27:0",
                "typeName": {
                  "id": 256,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4979:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 261,
                "name": "_balances",
                "nodeType": "VariableDeclaration",
                "scope": 680,
                "src": "4995:46:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 260,
                  "keyType": {
                    "id": 258,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5004:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "4995:28:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 259,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5015:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 267,
                "name": "_allowed",
                "nodeType": "VariableDeclaration",
                "scope": 680,
                "src": "5050:66:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 266,
                  "keyType": {
                    "id": 262,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5059:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "5050:49:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 265,
                    "keyType": {
                      "id": 263,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "5079:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "5070:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 264,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5090:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 269,
                "name": "_totalSupply",
                "nodeType": "VariableDeclaration",
                "scope": 680,
                "src": "5125:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 268,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "5125:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 276,
                  "nodeType": "Block",
                  "src": "5280:38:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 274,
                        "name": "_totalSupply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 269,
                        "src": "5298:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 273,
                      "id": 275,
                      "nodeType": "Return",
                      "src": "5291:19:0"
                    }
                  ]
                },
                "documentation": "@dev Total number of tokens in existence",
                "id": 277,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 270,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5247:2:0"
                },
                "returnParameters": {
                  "id": 273,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 272,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 277,
                      "src": "5271:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 271,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5271:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5270:9:0"
                },
                "scope": 680,
                "src": "5227:91:0",
                "stateMutability": "view",
                "superFunction": 35,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 288,
                  "nodeType": "Block",
                  "src": "5598:42:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 284,
                          "name": "_balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 261,
                          "src": "5616:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 286,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 285,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 279,
                          "src": "5626:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5616:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 283,
                      "id": 287,
                      "nodeType": "Return",
                      "src": "5609:23:0"
                    }
                  ]
                },
                "documentation": "@dev Gets the balance of the specified address.\n@param owner The address to query the balance of.\n@return An uint256 representing the amount owned by the passed address.",
                "id": 289,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 280,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 279,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 289,
                      "src": "5553:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 278,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5553:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5552:15:0"
                },
                "returnParameters": {
                  "id": 283,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 282,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 289,
                      "src": "5589:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 281,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5589:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5588:9:0"
                },
                "scope": 680,
                "src": "5534:106:0",
                "stateMutability": "view",
                "superFunction": 42,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 304,
                  "nodeType": "Block",
                  "src": "6060:50:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 298,
                            "name": "_allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 267,
                            "src": "6078:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 300,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 299,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 291,
                            "src": "6087:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "6078:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 302,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 301,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 293,
                          "src": "6094:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6078:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 297,
                      "id": 303,
                      "nodeType": "Return",
                      "src": "6071:31:0"
                    }
                  ]
                },
                "documentation": "@dev Function to check the amount of tokens that an owner allowed to a spender.\n@param owner address The address which owns the funds.\n@param spender address The address which will spend the funds.\n@return A uint256 specifying the amount of tokens still available for the spender.",
                "id": 305,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 294,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 291,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 305,
                      "src": "5998:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 290,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5998:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 293,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 305,
                      "src": "6013:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 292,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6013:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5997:32:0"
                },
                "returnParameters": {
                  "id": 297,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 296,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 305,
                      "src": "6051:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 295,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6051:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6050:9:0"
                },
                "scope": 680,
                "src": "5979:131:0",
                "stateMutability": "view",
                "superFunction": 51,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 323,
                  "nodeType": "Block",
                  "src": "6348:73:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 315,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "6369:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "6369:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 317,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 307,
                            "src": "6381:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 318,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 309,
                            "src": "6385:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 314,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 553,
                          "src": "6359:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 319,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6359:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 320,
                      "nodeType": "ExpressionStatement",
                      "src": "6359:32:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6409:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 313,
                      "id": 322,
                      "nodeType": "Return",
                      "src": "6402:11:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer token for a specified address\n@param to The address to transfer to.\n@param value The amount to be transferred.",
                "id": 324,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 310,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 307,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6299:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 306,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6299:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 309,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6311:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 308,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6311:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6298:27:0"
                },
                "returnParameters": {
                  "id": 313,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 312,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 324,
                      "src": "6342:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 311,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "6342:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6341:6:0"
                },
                "scope": 680,
                "src": "6281:140:0",
                "stateMutability": "nonpayable",
                "superFunction": 10,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 359,
                  "nodeType": "Block",
                  "src": "7139:173:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 338,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 334,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 326,
                              "src": "7158:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 336,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7177:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 335,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7169:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 337,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7169:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "7158:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 333,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "7150:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 339,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7150:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 340,
                      "nodeType": "ExpressionStatement",
                      "src": "7150:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 348,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 341,
                              "name": "_allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "7193:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 345,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 342,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "7202:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 343,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7202:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7193:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 346,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 344,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "7214:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7193:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 347,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 328,
                          "src": "7225:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7193:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 349,
                      "nodeType": "ExpressionStatement",
                      "src": "7193:37:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 351,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "7255:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 352,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7255:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 353,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 326,
                            "src": "7267:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 354,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 328,
                            "src": "7276:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 350,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 67,
                          "src": "7246:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7246:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 356,
                      "nodeType": "EmitStatement",
                      "src": "7241:41:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 357,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7300:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 332,
                      "id": 358,
                      "nodeType": "Return",
                      "src": "7293:11:0"
                    }
                  ]
                },
                "documentation": "@dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\nBeware that changing an allowance with this method brings the risk that someone may use both the old\nand the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\nrace condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n@param spender The address which will spend the funds.\n@param value The amount of tokens to be spent.",
                "id": 360,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 329,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 326,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "7085:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 325,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7085:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 328,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "7102:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 327,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7102:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7084:32:0"
                },
                "returnParameters": {
                  "id": 332,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 331,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 360,
                      "src": "7133:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 330,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7133:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7132:6:0"
                },
                "scope": 680,
                "src": "7068:244:0",
                "stateMutability": "nonpayable",
                "superFunction": 19,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 408,
                  "nodeType": "Block",
                  "src": "7870:214:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 386,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 371,
                              "name": "_allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "7881:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 375,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 372,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 362,
                              "src": "7890:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7881:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 376,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 373,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "7896:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 374,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7896:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7881:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 384,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 366,
                              "src": "7941:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 377,
                                  "name": "_allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 267,
                                  "src": "7910:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 379,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 378,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 362,
                                  "src": "7919:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "7910:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 382,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 380,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "7925:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 381,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "7925:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7910:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 383,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "7910:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 385,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7910:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7881:66:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 387,
                      "nodeType": "ExpressionStatement",
                      "src": "7881:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 389,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 362,
                            "src": "7968:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 390,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 364,
                            "src": "7974:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 391,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 366,
                            "src": "7978:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 388,
                          "name": "_transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 553,
                          "src": "7958:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 392,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7958:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 393,
                      "nodeType": "ExpressionStatement",
                      "src": "7958:26:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 395,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 362,
                            "src": "8009:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 396,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "8015:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 397,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8015:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 398,
                                "name": "_allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "8027:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 400,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 399,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 362,
                                "src": "8036:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8027:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 403,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 401,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "8042:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 402,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8042:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8027:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 394,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 67,
                          "src": "8000:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 404,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8000:54:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 405,
                      "nodeType": "EmitStatement",
                      "src": "7995:59:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 406,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8072:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 370,
                      "id": 407,
                      "nodeType": "Return",
                      "src": "8065:11:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer tokens from one address to another.\nNote that while this function emits an Approval event, this is not required as per the specification,\nand other compliant implementations may not emit the event.\n@param from address The address which you want to send tokens from\n@param to address The address which you want to transfer to\n@param value uint256 the amount of tokens to be transferred",
                "id": 409,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 367,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 362,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "7807:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 361,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7807:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 364,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "7821:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 363,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7821:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 366,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "7833:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 365,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7833:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7806:41:0"
                },
                "returnParameters": {
                  "id": 370,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 369,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 409,
                      "src": "7864:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 368,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7864:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7863:6:0"
                },
                "scope": 680,
                "src": "7785:299:0",
                "stateMutability": "nonpayable",
                "superFunction": 30,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 457,
                  "nodeType": "Block",
                  "src": "8685:237:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 419,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 411,
                              "src": "8704:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 421,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8723:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 420,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8715:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 422,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8715:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "8704:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 418,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "8696:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 424,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8696:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 425,
                      "nodeType": "ExpressionStatement",
                      "src": "8696:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 441,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 426,
                              "name": "_allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "8739:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 430,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 427,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "8748:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 428,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8748:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8739:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 431,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 429,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 411,
                            "src": "8760:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "8739:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 439,
                              "name": "addedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 413,
                              "src": "8805:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 432,
                                  "name": "_allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 267,
                                  "src": "8771:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 435,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 433,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2472,
                                    "src": "8780:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 434,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "8780:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8771:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 437,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 436,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 411,
                                "src": "8792:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8771:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 438,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "8771:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8771:45:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8739:77:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 442,
                      "nodeType": "ExpressionStatement",
                      "src": "8739:77:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 444,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "8841:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 445,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8841:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 446,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 411,
                            "src": "8853:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 447,
                                "name": "_allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "8862:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 450,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 448,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "8871:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 449,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "8871:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8862:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 452,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 451,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 411,
                              "src": "8883:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8862:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 443,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 67,
                          "src": "8832:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 453,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8832:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 454,
                      "nodeType": "EmitStatement",
                      "src": "8827:65:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8910:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 417,
                      "id": 456,
                      "nodeType": "Return",
                      "src": "8903:11:0"
                    }
                  ]
                },
                "documentation": "@dev Increase the amount of tokens that an owner allowed to a spender.\napprove should be called when allowed_[_spender] == 0. To increment\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\nEmits an Approval event.\n@param spender The address which will spend the funds.\n@param addedValue The amount of tokens to increase the allowance by.",
                "id": 458,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "increaseAllowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 414,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 411,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 458,
                      "src": "8626:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 410,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8626:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 413,
                      "name": "addedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 458,
                      "src": "8643:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 412,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8643:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8625:37:0"
                },
                "returnParameters": {
                  "id": 417,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 416,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 458,
                      "src": "8679:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 415,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8679:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8678:6:0"
                },
                "scope": 680,
                "src": "8599:323:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 506,
                  "nodeType": "Block",
                  "src": "9533:242:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 472,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 468,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 460,
                              "src": "9552:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 470,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "9571:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 469,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9563:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 471,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9563:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "9552:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 467,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "9544:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9544:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 474,
                      "nodeType": "ExpressionStatement",
                      "src": "9544:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 475,
                              "name": "_allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "9587:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 479,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 476,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "9596:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 477,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9596:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9587:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 480,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 478,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "9608:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9587:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 488,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 462,
                              "src": "9653:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 481,
                                  "name": "_allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 267,
                                  "src": "9619:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 484,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 482,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2472,
                                    "src": "9628:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 483,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "9628:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "9619:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 486,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 485,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 460,
                                "src": "9640:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9619:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 487,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "9619:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9619:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9587:82:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 491,
                      "nodeType": "ExpressionStatement",
                      "src": "9587:82:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 493,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "9694:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 494,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9694:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 495,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 460,
                            "src": "9706:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 496,
                                "name": "_allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "9715:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 499,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 497,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "9724:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 498,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "9724:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9715:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 501,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 500,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 460,
                              "src": "9736:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9715:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 492,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 67,
                          "src": "9685:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9685:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 503,
                      "nodeType": "EmitStatement",
                      "src": "9680:65:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 504,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9763:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 466,
                      "id": 505,
                      "nodeType": "Return",
                      "src": "9756:11:0"
                    }
                  ]
                },
                "documentation": "@dev Decrease the amount of tokens that an owner allowed to a spender.\napprove should be called when allowed_[_spender] == 0. To decrement\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\nEmits an Approval event.\n@param spender The address which will spend the funds.\n@param subtractedValue The amount of tokens to decrease the allowance by.",
                "id": 507,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "decreaseAllowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 463,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 460,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 507,
                      "src": "9469:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 459,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9469:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 462,
                      "name": "subtractedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 507,
                      "src": "9486:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 461,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9486:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9468:42:0"
                },
                "returnParameters": {
                  "id": 466,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 465,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 507,
                      "src": "9527:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 464,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9527:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9526:6:0"
                },
                "scope": 680,
                "src": "9442:333:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 552,
                  "nodeType": "Block",
                  "src": "10066:193:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 521,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 517,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 511,
                              "src": "10085:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 519,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10099:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 518,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10091:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 520,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10091:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "10085:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 516,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "10077:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10077:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 523,
                      "nodeType": "ExpressionStatement",
                      "src": "10077:25:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 533,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 524,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 261,
                            "src": "10115:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 526,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 525,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 509,
                            "src": "10125:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10115:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 531,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 513,
                              "src": "10153:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 527,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 261,
                                "src": "10133:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 529,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 528,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 509,
                                "src": "10143:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10133:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 530,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "10133:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10133:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10115:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 534,
                      "nodeType": "ExpressionStatement",
                      "src": "10115:44:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 535,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 261,
                            "src": "10170:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 537,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 536,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 511,
                            "src": "10180:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10170:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 542,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 513,
                              "src": "10204:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 538,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 261,
                                "src": "10186:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 540,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 539,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 511,
                                "src": "10196:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10186:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 541,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "10186:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 543,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10186:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10170:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 545,
                      "nodeType": "ExpressionStatement",
                      "src": "10170:40:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 547,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 509,
                            "src": "10235:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 548,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 511,
                            "src": "10241:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 549,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 513,
                            "src": "10245:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 546,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "10226:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 550,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10226:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 551,
                      "nodeType": "EmitStatement",
                      "src": "10221:30:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer token for a specified addresses\n@param from The address to transfer from.\n@param to The address to transfer to.\n@param value The amount to be transferred.",
                "id": 553,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 514,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 509,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 553,
                      "src": "10016:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 508,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10016:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 511,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 553,
                      "src": "10030:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 510,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10030:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 513,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 553,
                      "src": "10042:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 512,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10042:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10015:41:0"
                },
                "returnParameters": {
                  "id": 515,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10066:0:0"
                },
                "scope": 680,
                "src": "9997:262:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 594,
                  "nodeType": "Block",
                  "src": "10667:213:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 565,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 561,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 555,
                              "src": "10686:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 563,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "10705:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 562,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "10697:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 564,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10697:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "10686:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 560,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "10678:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 566,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10678:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 567,
                      "nodeType": "ExpressionStatement",
                      "src": "10678:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 568,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 269,
                          "src": "10721:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 571,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 557,
                              "src": "10753:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 569,
                              "name": "_totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 269,
                              "src": "10736:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 570,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "10736:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10736:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10721:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 574,
                      "nodeType": "ExpressionStatement",
                      "src": "10721:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 584,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 575,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 261,
                            "src": "10770:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 577,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 576,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 555,
                            "src": "10780:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10770:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 582,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 557,
                              "src": "10814:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 578,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 261,
                                "src": "10791:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 580,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 579,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 555,
                                "src": "10801:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10791:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 581,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "10791:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 583,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10791:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10770:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 585,
                      "nodeType": "ExpressionStatement",
                      "src": "10770:50:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 588,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "10853:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 587,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "10845:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 589,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "10845:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 590,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 555,
                            "src": "10857:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 591,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 557,
                            "src": "10866:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 586,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "10836:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10836:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 593,
                      "nodeType": "EmitStatement",
                      "src": "10831:41:0"
                    }
                  ]
                },
                "documentation": "@dev Internal function that mints an amount of the token and assigns it to\nan account. This encapsulates the modification of balances such that the\nproper events are emitted.\n@param account The account that will receive the created tokens.\n@param value The amount that will be created.",
                "id": 595,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_mint",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 558,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 555,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 595,
                      "src": "10626:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 554,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10626:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 557,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 595,
                      "src": "10643:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 556,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10643:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10625:32:0"
                },
                "returnParameters": {
                  "id": 559,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10667:0:0"
                },
                "scope": 680,
                "src": "10611:269:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 636,
                  "nodeType": "Block",
                  "src": "11170:213:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 607,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 603,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 597,
                              "src": "11189:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 605,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "11208:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 604,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "11200:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 606,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "11200:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "11189:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 602,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "11181:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 608,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11181:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 609,
                      "nodeType": "ExpressionStatement",
                      "src": "11181:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 615,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 610,
                          "name": "_totalSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 269,
                          "src": "11224:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 613,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 599,
                              "src": "11256:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 611,
                              "name": "_totalSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 269,
                              "src": "11239:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 612,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "11239:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11239:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11224:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 616,
                      "nodeType": "ExpressionStatement",
                      "src": "11224:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 617,
                            "name": "_balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 261,
                            "src": "11273:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 619,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 618,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 597,
                            "src": "11283:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "11273:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 624,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 599,
                              "src": "11317:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 620,
                                "name": "_balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 261,
                                "src": "11294:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 622,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 621,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 597,
                                "src": "11304:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11294:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 623,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "11294:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11294:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11273:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 627,
                      "nodeType": "ExpressionStatement",
                      "src": "11273:50:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 629,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 597,
                            "src": "11348:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 631,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11365:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 630,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "11357:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 632,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11357:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 633,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 599,
                            "src": "11369:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 628,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "11339:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11339:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 635,
                      "nodeType": "EmitStatement",
                      "src": "11334:41:0"
                    }
                  ]
                },
                "documentation": "@dev Internal function that burns an amount of the token of a given\naccount.\n@param account The account whose tokens will be burnt.\n@param value The amount that will be burnt.",
                "id": 637,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_burn",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 600,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 597,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 637,
                      "src": "11129:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 596,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11129:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 599,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 637,
                      "src": "11146:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 598,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11146:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11128:32:0"
                },
                "returnParameters": {
                  "id": 601,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11170:0:0"
                },
                "scope": 680,
                "src": "11114:269:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 678,
                  "nodeType": "Block",
                  "src": "11842:199:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 659,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 644,
                              "name": "_allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 267,
                              "src": "11853:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 648,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 645,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 639,
                              "src": "11862:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "11853:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 649,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 646,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "11871:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 647,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "11871:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "11853:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 657,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 641,
                              "src": "11919:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 650,
                                  "name": "_allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 267,
                                  "src": "11885:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 652,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 651,
                                  "name": "account",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 639,
                                  "src": "11894:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "11885:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 655,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 653,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "11903:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 654,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "11903:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11885:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 656,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 206,
                            "src": "11885:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 658,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11885:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11853:72:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 660,
                      "nodeType": "ExpressionStatement",
                      "src": "11853:72:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 662,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 639,
                            "src": "11942:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 663,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 641,
                            "src": "11951:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 661,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 637,
                          "src": "11936:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 664,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11936:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 665,
                      "nodeType": "ExpressionStatement",
                      "src": "11936:21:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 667,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 639,
                            "src": "11982:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 668,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "11991:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "11991:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 670,
                                "name": "_allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 267,
                                "src": "12003:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 672,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 671,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 639,
                                "src": "12012:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12003:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 675,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 673,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "12021:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 674,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "12021:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "12003:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 666,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 67,
                          "src": "11973:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 676,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11973:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 677,
                      "nodeType": "EmitStatement",
                      "src": "11968:65:0"
                    }
                  ]
                },
                "documentation": "@dev Internal function that burns an amount of the token of a given\naccount, deducting from the sender's allowance for said account. Uses the\ninternal burn function.\nEmits an Approval event (reflecting the reduced allowance).\n@param account The account whose tokens will be burnt.\n@param value The amount that will be burnt.",
                "id": 679,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_burnFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 642,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 639,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 679,
                      "src": "11801:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 638,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11801:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 641,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 679,
                      "src": "11818:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 640,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "11818:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11800:32:0"
                },
                "returnParameters": {
                  "id": 643,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11842:0:0"
                },
                "scope": 680,
                "src": "11782:259:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "4928:7116:0"
          },
          {
            "id": 681,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "12132:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 682,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 680,
                  "src": "12283:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$680",
                    "typeString": "contract ERC20"
                  }
                },
                "id": 683,
                "nodeType": "InheritanceSpecifier",
                "src": "12283:5:0"
              }
            ],
            "contractDependencies": [
              68,
              680
            ],
            "contractKind": "contract",
            "documentation": "@title Burnable Token\n@dev Token that can be irreversibly burned (destroyed).",
            "fullyImplemented": true,
            "id": 709,
            "linearizedBaseContracts": [
              709,
              680,
              68
            ],
            "name": "ERC20Burnable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 694,
                  "nodeType": "Block",
                  "src": "12453:43:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 689,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "12470:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 690,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "12470:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 691,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 685,
                            "src": "12482:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 688,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 637,
                          "src": "12464:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12464:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 693,
                      "nodeType": "ExpressionStatement",
                      "src": "12464:24:0"
                    }
                  ]
                },
                "documentation": "@dev Burns a specific amount of tokens.\n@param value The amount of token to be burned.",
                "id": 695,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "burn",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 686,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 685,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "12431:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 684,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12431:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12430:15:0"
                },
                "returnParameters": {
                  "id": 687,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12453:0:0"
                },
                "scope": 709,
                "src": "12417:79:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 707,
                  "nodeType": "Block",
                  "src": "12809:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 703,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 697,
                            "src": "12830:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 704,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 699,
                            "src": "12836:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 702,
                          "name": "_burnFrom",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 679,
                          "src": "12820:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12820:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 706,
                      "nodeType": "ExpressionStatement",
                      "src": "12820:22:0"
                    }
                  ]
                },
                "documentation": "@dev Burns a specific amount of tokens from the target address and decrements allowance\n@param from address The address which you want to send tokens from\n@param value uint256 The amount of token to be burned",
                "id": 708,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "burnFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 700,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 697,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 708,
                      "src": "12773:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 696,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12773:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 699,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 708,
                      "src": "12787:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 698,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12787:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12772:29:0"
                },
                "returnParameters": {
                  "id": 701,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12809:0:0"
                },
                "scope": 709,
                "src": "12755:95:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2458,
            "src": "12257:596:0"
          },
          {
            "id": 710,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "12937:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "@title SafeERC20\n@dev Wrappers around ERC20 operations that throw on failure.\nTo use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\nwhich allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
            "fullyImplemented": true,
            "id": 851,
            "linearizedBaseContracts": [
              851
            ],
            "name": "SafeERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 713,
                "libraryName": {
                  "contractScope": null,
                  "id": 711,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 251,
                  "src": "13274:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$251",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "13268:27:0",
                "typeName": {
                  "id": 712,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "13287:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "body": {
                  "id": 730,
                  "nodeType": "Block",
                  "src": "13375:53:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 725,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 717,
                                "src": "13409:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 726,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 719,
                                "src": "13413:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 723,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 715,
                                "src": "13394:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 724,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "transfer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 10,
                              "src": "13394:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256) external returns (bool)"
                              }
                            },
                            "id": 727,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13394:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 722,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "13386:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 728,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13386:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 729,
                      "nodeType": "ExpressionStatement",
                      "src": "13386:34:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 731,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 720,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 715,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 731,
                      "src": "13325:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$68",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 714,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 68,
                        "src": "13325:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$68",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 717,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 731,
                      "src": "13339:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 716,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13339:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 719,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 731,
                      "src": "13351:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 718,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13351:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13324:41:0"
                },
                "returnParameters": {
                  "id": 721,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13375:0:0"
                },
                "scope": 851,
                "src": "13303:125:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 751,
                  "nodeType": "Block",
                  "src": "13526:63:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 745,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 735,
                                "src": "13564:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 746,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 737,
                                "src": "13570:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 747,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 739,
                                "src": "13574:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 743,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 733,
                                "src": "13545:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 744,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "transferFrom",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 30,
                              "src": "13545:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,address,uint256) external returns (bool)"
                              }
                            },
                            "id": 748,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13545:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 742,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "13537:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13537:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 750,
                      "nodeType": "ExpressionStatement",
                      "src": "13537:44:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 752,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeTransferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 740,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 733,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 752,
                      "src": "13462:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$68",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 732,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 68,
                        "src": "13462:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$68",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 735,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 752,
                      "src": "13476:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 734,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13476:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 737,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 752,
                      "src": "13490:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 736,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13490:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 739,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 752,
                      "src": "13502:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 738,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13502:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13461:55:0"
                },
                "returnParameters": {
                  "id": 741,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13526:0:0"
                },
                "scope": 851,
                "src": "13436:153:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 787,
                  "nodeType": "Block",
                  "src": "13673:359:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 764,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 762,
                                    "name": "value",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 758,
                                    "src": "13913:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 763,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "13922:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "13913:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 765,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "13912:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "components": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 774,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "arguments": [
                                          {
                                            "argumentTypes": null,
                                            "id": 769,
                                            "name": "this",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2496,
                                            "src": "13953:4:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_contract$_SafeERC20_$851",
                                              "typeString": "library SafeERC20"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_contract$_SafeERC20_$851",
                                              "typeString": "library SafeERC20"
                                            }
                                          ],
                                          "id": 768,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "13945:7:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_$",
                                            "typeString": "type(address)"
                                          },
                                          "typeName": "address"
                                        },
                                        "id": 770,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "13945:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 771,
                                        "name": "spender",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 756,
                                        "src": "13960:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 766,
                                        "name": "token",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 754,
                                        "src": "13929:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_IERC20_$68",
                                          "typeString": "contract IERC20"
                                        }
                                      },
                                      "id": 767,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "allowance",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 51,
                                      "src": "13929:15:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                        "typeString": "function (address,address) view external returns (uint256)"
                                      }
                                    },
                                    "id": 772,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "13929:39:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 773,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "13972:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "13929:44:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "id": 775,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "13928:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "13912:62:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 761,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "13904:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13904:71:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 778,
                      "nodeType": "ExpressionStatement",
                      "src": "13904:71:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 782,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 756,
                                "src": "14008:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 783,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 758,
                                "src": "14017:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 780,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 754,
                                "src": "13994:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 781,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "approve",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 19,
                              "src": "13994:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256) external returns (bool)"
                              }
                            },
                            "id": 784,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "13994:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 779,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "13986:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 785,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13986:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 786,
                      "nodeType": "ExpressionStatement",
                      "src": "13986:38:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 788,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeApprove",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 759,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 754,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 788,
                      "src": "13618:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$68",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 753,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 68,
                        "src": "13618:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$68",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 756,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 788,
                      "src": "13632:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 755,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13632:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 758,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 788,
                      "src": "13649:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 757,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13649:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13617:46:0"
                },
                "returnParameters": {
                  "id": 760,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13673:0:0"
                },
                "scope": 851,
                "src": "13597:435:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 818,
                  "nodeType": "Block",
                  "src": "14126:148:0",
                  "statements": [
                    {
                      "assignments": [
                        798
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 798,
                          "name": "newAllowance",
                          "nodeType": "VariableDeclaration",
                          "scope": 818,
                          "src": "14137:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 797,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "14137:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 809,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 807,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 794,
                            "src": "14204:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 802,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2496,
                                    "src": "14184:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_SafeERC20_$851",
                                      "typeString": "library SafeERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_SafeERC20_$851",
                                      "typeString": "library SafeERC20"
                                    }
                                  ],
                                  "id": 801,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "14176:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 803,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14176:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 804,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 792,
                                "src": "14191:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 799,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 790,
                                "src": "14160:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 800,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allowance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 51,
                              "src": "14160:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address,address) view external returns (uint256)"
                              }
                            },
                            "id": 805,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14160:39:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 806,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 230,
                          "src": "14160:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 808,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14160:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "14137:73:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 813,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 792,
                                "src": "14243:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 814,
                                "name": "newAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 798,
                                "src": "14252:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 811,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 790,
                                "src": "14229:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 812,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "approve",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 19,
                              "src": "14229:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256) external returns (bool)"
                              }
                            },
                            "id": 815,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14229:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 810,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "14221:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 816,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14221:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 817,
                      "nodeType": "ExpressionStatement",
                      "src": "14221:45:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 819,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeIncreaseAllowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 795,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 790,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 819,
                      "src": "14071:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$68",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 789,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 68,
                        "src": "14071:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$68",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 792,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 819,
                      "src": "14085:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 791,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14085:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 794,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 819,
                      "src": "14102:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 793,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14102:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14070:46:0"
                },
                "returnParameters": {
                  "id": 796,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14126:0:0"
                },
                "scope": 851,
                "src": "14040:234:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 849,
                  "nodeType": "Block",
                  "src": "14368:148:0",
                  "statements": [
                    {
                      "assignments": [
                        829
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 829,
                          "name": "newAllowance",
                          "nodeType": "VariableDeclaration",
                          "scope": 849,
                          "src": "14379:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 828,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "14379:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 840,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 838,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 825,
                            "src": "14446:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 833,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2496,
                                    "src": "14426:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_SafeERC20_$851",
                                      "typeString": "library SafeERC20"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_SafeERC20_$851",
                                      "typeString": "library SafeERC20"
                                    }
                                  ],
                                  "id": 832,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "14418:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 834,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "14418:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 835,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 823,
                                "src": "14433:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 830,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 821,
                                "src": "14402:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 831,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "allowance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 51,
                              "src": "14402:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address,address) view external returns (uint256)"
                              }
                            },
                            "id": 836,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14402:39:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 837,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sub",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 206,
                          "src": "14402:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 839,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14402:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "14379:73:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 844,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 823,
                                "src": "14485:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 845,
                                "name": "newAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 829,
                                "src": "14494:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 842,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 821,
                                "src": "14471:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_IERC20_$68",
                                  "typeString": "contract IERC20"
                                }
                              },
                              "id": 843,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "approve",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 19,
                              "src": "14471:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                "typeString": "function (address,uint256) external returns (bool)"
                              }
                            },
                            "id": 846,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "14471:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 841,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "14463:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 847,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14463:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 848,
                      "nodeType": "ExpressionStatement",
                      "src": "14463:45:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 850,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "safeDecreaseAllowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 826,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 821,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 850,
                      "src": "14313:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$68",
                        "typeString": "contract IERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 820,
                        "name": "IERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 68,
                        "src": "14313:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$68",
                          "typeString": "contract IERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 823,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 850,
                      "src": "14327:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 822,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14327:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 825,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 850,
                      "src": "14344:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 824,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "14344:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14312:46:0"
                },
                "returnParameters": {
                  "id": 827,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14368:0:0"
                },
                "scope": 851,
                "src": "14282:234:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "13243:1276:0"
          },
          {
            "id": 852,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "14594:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "@title Roles\n@dev Library for managing addresses assigned to a Role.",
            "fullyImplemented": true,
            "id": 944,
            "linearizedBaseContracts": [
              944
            ],
            "name": "Roles",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "canonicalName": "Roles.Role",
                "id": 857,
                "members": [
                  {
                    "constant": false,
                    "id": 856,
                    "name": "bearer",
                    "nodeType": "VariableDeclaration",
                    "scope": 857,
                    "src": "14752:32:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                      "typeString": "mapping(address => bool)"
                    },
                    "typeName": {
                      "id": 855,
                      "keyType": {
                        "id": 853,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14761:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "14752:25:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      },
                      "valueType": {
                        "id": 854,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "14772:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "Role",
                "nodeType": "StructDefinition",
                "scope": 944,
                "src": "14729:63:0",
                "visibility": "public"
              },
              {
                "body": {
                  "id": 888,
                  "nodeType": "Block",
                  "src": "14925:128:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 869,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 865,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 861,
                              "src": "14944:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 867,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "14963:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 866,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "14955:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 868,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14955:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "14944:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 864,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "14936:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 870,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14936:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 871,
                      "nodeType": "ExpressionStatement",
                      "src": "14936:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 877,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "14985:19:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 874,
                                  "name": "role",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 859,
                                  "src": "14990:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                    "typeString": "struct Roles.Role storage pointer"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 875,
                                  "name": "account",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 861,
                                  "src": "14996:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                    "typeString": "struct Roles.Role storage pointer"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 873,
                                "name": "has",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 943,
                                "src": "14986:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$",
                                  "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                                }
                              },
                              "id": 876,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "14986:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 872,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "14977:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 878,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14977:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 879,
                      "nodeType": "ExpressionStatement",
                      "src": "14977:28:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 886,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 880,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 859,
                              "src": "15018:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                "typeString": "struct Roles.Role storage pointer"
                              }
                            },
                            "id": 883,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "bearer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 856,
                            "src": "15018:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 884,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 882,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 861,
                            "src": "15030:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "15018:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 885,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15041:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "15018:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 887,
                      "nodeType": "ExpressionStatement",
                      "src": "15018:27:0"
                    }
                  ]
                },
                "documentation": "@dev give an account access to this role",
                "id": 889,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 862,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 859,
                      "name": "role",
                      "nodeType": "VariableDeclaration",
                      "scope": 889,
                      "src": "14880:17:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                        "typeString": "struct Roles.Role"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 858,
                        "name": "Role",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 857,
                        "src": "14880:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                          "typeString": "struct Roles.Role"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 861,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 889,
                      "src": "14899:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 860,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14899:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14879:36:0"
                },
                "returnParameters": {
                  "id": 863,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14925:0:0"
                },
                "scope": 944,
                "src": "14867:186:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 919,
                  "nodeType": "Block",
                  "src": "15193:128:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 901,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 897,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 893,
                              "src": "15212:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 899,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15231:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 898,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "15223:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 900,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15223:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "15212:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 896,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "15204:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15204:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 903,
                      "nodeType": "ExpressionStatement",
                      "src": "15204:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 906,
                                "name": "role",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 891,
                                "src": "15257:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                  "typeString": "struct Roles.Role storage pointer"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 907,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 893,
                                "src": "15263:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                  "typeString": "struct Roles.Role storage pointer"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 905,
                              "name": "has",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 943,
                              "src": "15253:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$",
                                "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                              }
                            },
                            "id": 908,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15253:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 904,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "15245:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 909,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15245:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 910,
                      "nodeType": "ExpressionStatement",
                      "src": "15245:27:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 917,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 911,
                              "name": "role",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 891,
                              "src": "15285:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                                "typeString": "struct Roles.Role storage pointer"
                              }
                            },
                            "id": 914,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "bearer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 856,
                            "src": "15285:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 915,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 913,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 893,
                            "src": "15297:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "15285:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 916,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "15308:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "15285:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 918,
                      "nodeType": "ExpressionStatement",
                      "src": "15285:28:0"
                    }
                  ]
                },
                "documentation": "@dev remove an account's access to this role",
                "id": 920,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "remove",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 894,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 891,
                      "name": "role",
                      "nodeType": "VariableDeclaration",
                      "scope": 920,
                      "src": "15148:17:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                        "typeString": "struct Roles.Role"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 890,
                        "name": "Role",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 857,
                        "src": "15148:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                          "typeString": "struct Roles.Role"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 893,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 920,
                      "src": "15167:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 892,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15167:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15147:36:0"
                },
                "returnParameters": {
                  "id": 895,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15193:0:0"
                },
                "scope": 944,
                "src": "15132:189:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 942,
                  "nodeType": "Block",
                  "src": "15493:87:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 934,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 930,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 924,
                              "src": "15512:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 932,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "15531:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 931,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "15523:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 933,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "15523:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "15512:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 929,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "15504:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 935,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15504:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 936,
                      "nodeType": "ExpressionStatement",
                      "src": "15504:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 937,
                            "name": "role",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 922,
                            "src": "15552:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                              "typeString": "struct Roles.Role storage pointer"
                            }
                          },
                          "id": 938,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "bearer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 856,
                          "src": "15552:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                            "typeString": "mapping(address => bool)"
                          }
                        },
                        "id": 940,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 939,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 924,
                          "src": "15564:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "15552:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 928,
                      "id": 941,
                      "nodeType": "Return",
                      "src": "15545:27:0"
                    }
                  ]
                },
                "documentation": "@dev check if an account has this role\n@return bool",
                "id": 943,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "has",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 925,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 922,
                      "name": "role",
                      "nodeType": "VariableDeclaration",
                      "scope": 943,
                      "src": "15428:17:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                        "typeString": "struct Roles.Role"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 921,
                        "name": "Role",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 857,
                        "src": "15428:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                          "typeString": "struct Roles.Role"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 924,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 943,
                      "src": "15447:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 923,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15447:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15427:36:0"
                },
                "returnParameters": {
                  "id": 928,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 927,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 943,
                      "src": "15487:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 926,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "15487:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15486:6:0"
                },
                "scope": 944,
                "src": "15415:165:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "14708:875:0"
          },
          {
            "id": 945,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "15669:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 1045,
            "linearizedBaseContracts": [
              1045
            ],
            "name": "MinterRole",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 948,
                "libraryName": {
                  "contractScope": null,
                  "id": 946,
                  "name": "Roles",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 944,
                  "src": "15731:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Roles_$944",
                    "typeString": "library Roles"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "15725:27:0",
                "typeName": {
                  "contractScope": null,
                  "id": 947,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "15741:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                }
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 952,
                "name": "MinterAdded",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 951,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 950,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 952,
                      "src": "15778:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 949,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15778:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15777:25:0"
                },
                "src": "15760:43:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 956,
                "name": "MinterRemoved",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 955,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 954,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 956,
                      "src": "15829:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 953,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15829:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15828:25:0"
                },
                "src": "15809:45:0"
              },
              {
                "constant": false,
                "id": 958,
                "name": "_minters",
                "nodeType": "VariableDeclaration",
                "scope": 1045,
                "src": "15862:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Role_$857_storage",
                  "typeString": "struct Roles.Role"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 957,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "15862:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 966,
                  "nodeType": "Block",
                  "src": "15922:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 962,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "15944:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 963,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "15944:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 961,
                          "name": "_addMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1028,
                          "src": "15933:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 964,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "15933:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 965,
                      "nodeType": "ExpressionStatement",
                      "src": "15933:22:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 967,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 959,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15910:2:0"
                },
                "returnParameters": {
                  "id": 960,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15922:0:0"
                },
                "scope": 1045,
                "src": "15898:65:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 977,
                  "nodeType": "Block",
                  "src": "15993:60:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 971,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "16021:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 972,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "16021:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 970,
                              "name": "isMinter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 991,
                              "src": "16012:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                "typeString": "function (address) view returns (bool)"
                              }
                            },
                            "id": 973,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "16012:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 969,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "16004:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 974,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16004:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 975,
                      "nodeType": "ExpressionStatement",
                      "src": "16004:29:0"
                    },
                    {
                      "id": 976,
                      "nodeType": "PlaceholderStatement",
                      "src": "16044:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 978,
                "name": "onlyMinter",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 968,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15990:2:0"
                },
                "src": "15971:82:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 990,
                  "nodeType": "Block",
                  "src": "16123:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 987,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 980,
                            "src": "16154:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 985,
                            "name": "_minters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 958,
                            "src": "16141:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 986,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "has",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 943,
                          "src": "16141:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                          }
                        },
                        "id": 988,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16141:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 984,
                      "id": 989,
                      "nodeType": "Return",
                      "src": "16134:28:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 991,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 981,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 980,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 991,
                      "src": "16079:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 979,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16079:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16078:17:0"
                },
                "returnParameters": {
                  "id": 984,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 983,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 991,
                      "src": "16117:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 982,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "16117:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16116:6:0"
                },
                "scope": 1045,
                "src": "16061:109:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1002,
                  "nodeType": "Block",
                  "src": "16232:38:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 999,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 993,
                            "src": "16254:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 998,
                          "name": "_addMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1028,
                          "src": "16243:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1000,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16243:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1001,
                      "nodeType": "ExpressionStatement",
                      "src": "16243:19:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1003,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 996,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 995,
                      "name": "onlyMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "16221:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "16221:10:0"
                  }
                ],
                "name": "addMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 994,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 993,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1003,
                      "src": "16197:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 992,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16197:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16196:17:0"
                },
                "returnParameters": {
                  "id": 997,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16232:0:0"
                },
                "scope": 1045,
                "src": "16178:92:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1011,
                  "nodeType": "Block",
                  "src": "16311:44:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1007,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "16336:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1008,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "16336:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1006,
                          "name": "_removeMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1044,
                          "src": "16322:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1009,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16322:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1010,
                      "nodeType": "ExpressionStatement",
                      "src": "16322:25:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1012,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "renounceMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1004,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16301:2:0"
                },
                "returnParameters": {
                  "id": 1005,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16311:0:0"
                },
                "scope": 1045,
                "src": "16278:77:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1027,
                  "nodeType": "Block",
                  "src": "16409:76:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1020,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1014,
                            "src": "16433:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1017,
                            "name": "_minters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 958,
                            "src": "16420:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1019,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 889,
                          "src": "16420:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1021,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16420:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1022,
                      "nodeType": "ExpressionStatement",
                      "src": "16420:21:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1024,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1014,
                            "src": "16469:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1023,
                          "name": "MinterAdded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 952,
                          "src": "16457:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1025,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16457:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1026,
                      "nodeType": "EmitStatement",
                      "src": "16452:25:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1028,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_addMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1015,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1014,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1028,
                      "src": "16383:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1013,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16383:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16382:17:0"
                },
                "returnParameters": {
                  "id": 1016,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16409:0:0"
                },
                "scope": 1045,
                "src": "16363:122:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1043,
                  "nodeType": "Block",
                  "src": "16542:81:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1036,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1030,
                            "src": "16569:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1033,
                            "name": "_minters",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 958,
                            "src": "16553:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1035,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "remove",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 920,
                          "src": "16553:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1037,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16553:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1038,
                      "nodeType": "ExpressionStatement",
                      "src": "16553:24:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1040,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1030,
                            "src": "16607:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1039,
                          "name": "MinterRemoved",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 956,
                          "src": "16593:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1041,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16593:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1042,
                      "nodeType": "EmitStatement",
                      "src": "16588:27:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1044,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_removeMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1031,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1030,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1044,
                      "src": "16516:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1029,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16516:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16515:17:0"
                },
                "returnParameters": {
                  "id": 1032,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16542:0:0"
                },
                "scope": 1045,
                "src": "16493:130:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "15698:928:0"
          },
          {
            "id": 1046,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "16712:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 1146,
            "linearizedBaseContracts": [
              1146
            ],
            "name": "PauserRole",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1049,
                "libraryName": {
                  "contractScope": null,
                  "id": 1047,
                  "name": "Roles",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 944,
                  "src": "16774:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Roles_$944",
                    "typeString": "library Roles"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "16768:27:0",
                "typeName": {
                  "contractScope": null,
                  "id": 1048,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "16784:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                }
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1053,
                "name": "PauserAdded",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1052,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1051,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1053,
                      "src": "16821:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1050,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16821:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16820:25:0"
                },
                "src": "16803:43:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1057,
                "name": "PauserRemoved",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1056,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1055,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1057,
                      "src": "16872:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1054,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16872:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16871:25:0"
                },
                "src": "16852:45:0"
              },
              {
                "constant": false,
                "id": 1059,
                "name": "_pausers",
                "nodeType": "VariableDeclaration",
                "scope": 1146,
                "src": "16905:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Role_$857_storage",
                  "typeString": "struct Roles.Role"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 1058,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "16905:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1067,
                  "nodeType": "Block",
                  "src": "16965:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1063,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "16987:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1064,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "16987:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1062,
                          "name": "_addPauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1129,
                          "src": "16976:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1065,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16976:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1066,
                      "nodeType": "ExpressionStatement",
                      "src": "16976:22:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1068,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1060,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16953:2:0"
                },
                "returnParameters": {
                  "id": 1061,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16965:0:0"
                },
                "scope": 1146,
                "src": "16941:65:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1078,
                  "nodeType": "Block",
                  "src": "17036:60:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1072,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "17064:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1073,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17064:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 1071,
                              "name": "isPauser",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1092,
                              "src": "17055:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                "typeString": "function (address) view returns (bool)"
                              }
                            },
                            "id": 1074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17055:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1070,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "17047:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1075,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17047:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1076,
                      "nodeType": "ExpressionStatement",
                      "src": "17047:29:0"
                    },
                    {
                      "id": 1077,
                      "nodeType": "PlaceholderStatement",
                      "src": "17087:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1079,
                "name": "onlyPauser",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1069,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17033:2:0"
                },
                "src": "17014:82:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1091,
                  "nodeType": "Block",
                  "src": "17166:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1088,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1081,
                            "src": "17197:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1086,
                            "name": "_pausers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "17184:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1087,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "has",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 943,
                          "src": "17184:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                          }
                        },
                        "id": 1089,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17184:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1085,
                      "id": 1090,
                      "nodeType": "Return",
                      "src": "17177:28:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1092,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isPauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1082,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1081,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1092,
                      "src": "17122:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1080,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17122:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17121:17:0"
                },
                "returnParameters": {
                  "id": 1085,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1084,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1092,
                      "src": "17160:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1083,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "17160:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17159:6:0"
                },
                "scope": 1146,
                "src": "17104:109:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1103,
                  "nodeType": "Block",
                  "src": "17275:38:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1100,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "17297:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1099,
                          "name": "_addPauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1129,
                          "src": "17286:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17286:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1102,
                      "nodeType": "ExpressionStatement",
                      "src": "17286:19:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1104,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1097,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1096,
                      "name": "onlyPauser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1079,
                      "src": "17264:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "17264:10:0"
                  }
                ],
                "name": "addPauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1095,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1094,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1104,
                      "src": "17240:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1093,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17240:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17239:17:0"
                },
                "returnParameters": {
                  "id": 1098,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17275:0:0"
                },
                "scope": 1146,
                "src": "17221:92:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1112,
                  "nodeType": "Block",
                  "src": "17354:44:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1108,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "17379:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1109,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "17379:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1107,
                          "name": "_removePauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1145,
                          "src": "17365:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1110,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17365:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1111,
                      "nodeType": "ExpressionStatement",
                      "src": "17365:25:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1113,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "renouncePauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1105,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17344:2:0"
                },
                "returnParameters": {
                  "id": 1106,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17354:0:0"
                },
                "scope": 1146,
                "src": "17321:77:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1128,
                  "nodeType": "Block",
                  "src": "17452:76:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1121,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1115,
                            "src": "17476:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1118,
                            "name": "_pausers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "17463:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1120,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 889,
                          "src": "17463:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1122,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17463:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1123,
                      "nodeType": "ExpressionStatement",
                      "src": "17463:21:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1125,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1115,
                            "src": "17512:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1124,
                          "name": "PauserAdded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1053,
                          "src": "17500:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1126,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17500:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1127,
                      "nodeType": "EmitStatement",
                      "src": "17495:25:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1129,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_addPauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1116,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1115,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1129,
                      "src": "17426:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1114,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17426:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17425:17:0"
                },
                "returnParameters": {
                  "id": 1117,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17452:0:0"
                },
                "scope": 1146,
                "src": "17406:122:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1144,
                  "nodeType": "Block",
                  "src": "17585:81:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1137,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1131,
                            "src": "17612:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1134,
                            "name": "_pausers",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1059,
                            "src": "17596:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1136,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "remove",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 920,
                          "src": "17596:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17596:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1139,
                      "nodeType": "ExpressionStatement",
                      "src": "17596:24:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1141,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1131,
                            "src": "17650:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1140,
                          "name": "PauserRemoved",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1057,
                          "src": "17636:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1142,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17636:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1143,
                      "nodeType": "EmitStatement",
                      "src": "17631:27:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1145,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_removePauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1132,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1131,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1145,
                      "src": "17559:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1130,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17559:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17558:17:0"
                },
                "returnParameters": {
                  "id": 1133,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17585:0:0"
                },
                "scope": 1146,
                "src": "17536:130:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "16741:928:0"
          },
          {
            "id": 1147,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "17750:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1148,
                  "name": "PauserRole",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1146,
                  "src": "17917:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_PauserRole_$1146",
                    "typeString": "contract PauserRole"
                  }
                },
                "id": 1149,
                "nodeType": "InheritanceSpecifier",
                "src": "17917:10:0"
              }
            ],
            "contractDependencies": [
              1146
            ],
            "contractKind": "contract",
            "documentation": "@title Pausable\n@dev Base contract which allows children to implement an emergency stop mechanism.",
            "fullyImplemented": true,
            "id": 1227,
            "linearizedBaseContracts": [
              1227,
              1146
            ],
            "name": "Pausable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": null,
                "id": 1153,
                "name": "Paused",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1152,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1151,
                      "indexed": false,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1153,
                      "src": "17948:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1150,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17948:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17947:17:0"
                },
                "src": "17935:30:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1157,
                "name": "Unpaused",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1156,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1155,
                      "indexed": false,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1157,
                      "src": "17986:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1154,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17986:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17985:17:0"
                },
                "src": "17971:32:0"
              },
              {
                "constant": false,
                "id": 1159,
                "name": "_paused",
                "nodeType": "VariableDeclaration",
                "scope": 1227,
                "src": "18011:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1158,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "18011:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1166,
                  "nodeType": "Block",
                  "src": "18064:34:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1164,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1162,
                          "name": "_paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1159,
                          "src": "18075:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 1163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "18085:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "18075:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1165,
                      "nodeType": "ExpressionStatement",
                      "src": "18075:15:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1167,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1160,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18052:2:0"
                },
                "returnParameters": {
                  "id": 1161,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18064:0:0"
                },
                "scope": 1227,
                "src": "18040:58:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1174,
                  "nodeType": "Block",
                  "src": "18234:33:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1172,
                        "name": "_paused",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1159,
                        "src": "18252:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1171,
                      "id": 1173,
                      "nodeType": "Return",
                      "src": "18245:14:0"
                    }
                  ]
                },
                "documentation": "@return true if the contract is paused, false otherwise.",
                "id": 1175,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "paused",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1168,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18204:2:0"
                },
                "returnParameters": {
                  "id": 1171,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1170,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1175,
                      "src": "18228:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1169,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "18228:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18227:6:0"
                },
                "scope": 1227,
                "src": "18189:78:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1183,
                  "nodeType": "Block",
                  "src": "18406:48:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1179,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "18425:8:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 1178,
                              "name": "_paused",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1159,
                              "src": "18426:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1177,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "18417:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1180,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18417:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1181,
                      "nodeType": "ExpressionStatement",
                      "src": "18417:17:0"
                    },
                    {
                      "id": 1182,
                      "nodeType": "PlaceholderStatement",
                      "src": "18445:1:0"
                    }
                  ]
                },
                "documentation": "@dev Modifier to make a function callable only when the contract is not paused.",
                "id": 1184,
                "name": "whenNotPaused",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1176,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18403:2:0"
                },
                "src": "18381:73:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1191,
                  "nodeType": "Block",
                  "src": "18586:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1187,
                            "name": "_paused",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1159,
                            "src": "18605:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1186,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "18597:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1188,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18597:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1189,
                      "nodeType": "ExpressionStatement",
                      "src": "18597:16:0"
                    },
                    {
                      "id": 1190,
                      "nodeType": "PlaceholderStatement",
                      "src": "18624:1:0"
                    }
                  ]
                },
                "documentation": "@dev Modifier to make a function callable only when the contract is paused.",
                "id": 1192,
                "name": "whenPaused",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1185,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18583:2:0"
                },
                "src": "18564:69:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1208,
                  "nodeType": "Block",
                  "src": "18774:67:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1199,
                          "name": "_paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1159,
                          "src": "18785:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "18795:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "18785:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1202,
                      "nodeType": "ExpressionStatement",
                      "src": "18785:14:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1204,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "18822:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1205,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "18822:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1203,
                          "name": "Paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1153,
                          "src": "18815:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1206,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18815:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1207,
                      "nodeType": "EmitStatement",
                      "src": "18810:23:0"
                    }
                  ]
                },
                "documentation": "@dev called by the owner to pause, triggers stopped state",
                "id": 1209,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1195,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1194,
                      "name": "onlyPauser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1079,
                      "src": "18749:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18749:10:0"
                  },
                  {
                    "arguments": null,
                    "id": 1197,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1196,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "18760:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18760:13:0"
                  }
                ],
                "name": "pause",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1193,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18739:2:0"
                },
                "returnParameters": {
                  "id": 1198,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18774:0:0"
                },
                "scope": 1227,
                "src": "18725:116:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1225,
                  "nodeType": "Block",
                  "src": "18984:70:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1218,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1216,
                          "name": "_paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1159,
                          "src": "18995:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 1217,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "19005:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "18995:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1219,
                      "nodeType": "ExpressionStatement",
                      "src": "18995:15:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1221,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "19035:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1222,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "19035:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1220,
                          "name": "Unpaused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1157,
                          "src": "19026:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1223,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19026:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1224,
                      "nodeType": "EmitStatement",
                      "src": "19021:25:0"
                    }
                  ]
                },
                "documentation": "@dev called by the owner to unpause, returns to normal state",
                "id": 1226,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1212,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1211,
                      "name": "onlyPauser",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1079,
                      "src": "18962:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18962:10:0"
                  },
                  {
                    "arguments": null,
                    "id": 1214,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1213,
                      "name": "whenPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1192,
                      "src": "18973:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18973:10:0"
                  }
                ],
                "name": "unpause",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1210,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18952:2:0"
                },
                "returnParameters": {
                  "id": 1215,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18984:0:0"
                },
                "scope": 1227,
                "src": "18936:118:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2458,
            "src": "17896:1161:0"
          },
          {
            "id": 1228,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "19137:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title Ownable\n@dev The Ownable contract has an owner address, and provides basic authorization control\nfunctions, this simplifies the implementation of \"user permissions\".",
            "fullyImplemented": true,
            "id": 1335,
            "linearizedBaseContracts": [
              1335
            ],
            "name": "Ownable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 1230,
                "name": "_owner",
                "nodeType": "VariableDeclaration",
                "scope": 1335,
                "src": "19383:22:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1229,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "19383:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1236,
                "name": "OwnershipTransferred",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1235,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1232,
                      "indexed": true,
                      "name": "previousOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1236,
                      "src": "19441:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1231,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "19441:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1234,
                      "indexed": true,
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1236,
                      "src": "19472:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1233,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "19472:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19440:57:0"
                },
                "src": "19414:84:0"
              },
              {
                "body": {
                  "id": 1251,
                  "nodeType": "Block",
                  "src": "19658:94:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1242,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1239,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1230,
                          "src": "19669:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1240,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2472,
                            "src": "19678:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1241,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "19678:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "19669:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1243,
                      "nodeType": "ExpressionStatement",
                      "src": "19669:19:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1246,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "19733:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1245,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "19725:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 1247,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "19725:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1248,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1230,
                            "src": "19737:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1244,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1236,
                          "src": "19704:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 1249,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19704:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1250,
                      "nodeType": "EmitStatement",
                      "src": "19699:45:0"
                    }
                  ]
                },
                "documentation": "@dev The Ownable constructor sets the original `owner` of the contract to the sender\naccount.",
                "id": 1252,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1237,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19646:2:0"
                },
                "returnParameters": {
                  "id": 1238,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19658:0:0"
                },
                "scope": 1335,
                "src": "19634:118:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1259,
                  "nodeType": "Block",
                  "src": "19867:32:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1257,
                        "name": "_owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1230,
                        "src": "19885:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 1256,
                      "id": 1258,
                      "nodeType": "Return",
                      "src": "19878:13:0"
                    }
                  ]
                },
                "documentation": "@return the address of the owner.",
                "id": 1260,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "owner",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1253,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19834:2:0"
                },
                "returnParameters": {
                  "id": 1256,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1255,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1260,
                      "src": "19858:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1254,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "19858:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19857:9:0"
                },
                "scope": 1335,
                "src": "19820:79:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1268,
                  "nodeType": "Block",
                  "src": "20013:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1263,
                              "name": "isOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1280,
                              "src": "20032:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                "typeString": "function () view returns (bool)"
                              }
                            },
                            "id": 1264,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "20032:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1262,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "20024:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20024:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1266,
                      "nodeType": "ExpressionStatement",
                      "src": "20024:18:0"
                    },
                    {
                      "id": 1267,
                      "nodeType": "PlaceholderStatement",
                      "src": "20053:1:0"
                    }
                  ]
                },
                "documentation": "@dev Throws if called by any account other than the owner.",
                "id": 1269,
                "name": "onlyOwner",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1261,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20010:2:0"
                },
                "src": "19992:70:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1279,
                  "nodeType": "Block",
                  "src": "20201:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 1277,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1274,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2472,
                            "src": "20219:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 1275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "20219:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 1276,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1230,
                          "src": "20233:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "20219:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1273,
                      "id": 1278,
                      "nodeType": "Return",
                      "src": "20212:27:0"
                    }
                  ]
                },
                "documentation": "@return true if `msg.sender` is the owner of the contract.",
                "id": 1280,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isOwner",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1270,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20171:2:0"
                },
                "returnParameters": {
                  "id": 1273,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1272,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1280,
                      "src": "20195:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1271,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "20195:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20194:6:0"
                },
                "scope": 1335,
                "src": "20155:92:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1298,
                  "nodeType": "Block",
                  "src": "20579:94:0",
                  "statements": [
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1286,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1230,
                            "src": "20616:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1288,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "20632:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 1287,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "20624:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 1289,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "20624:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1285,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1236,
                          "src": "20595:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 1290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20595:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1291,
                      "nodeType": "EmitStatement",
                      "src": "20590:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1296,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1292,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1230,
                          "src": "20646:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1294,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "20663:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 1293,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "20655:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 1295,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "20655:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "20646:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1297,
                      "nodeType": "ExpressionStatement",
                      "src": "20646:19:0"
                    }
                  ]
                },
                "documentation": "@dev Allows the current owner to relinquish control of the contract.\n@notice Renouncing to ownership will leave the contract without an owner.\nIt will not be possible to call the functions with the `onlyOwner`\nmodifier anymore.",
                "id": 1299,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1283,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1282,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "20569:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "20569:9:0"
                  }
                ],
                "name": "renounceOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1281,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20559:2:0"
                },
                "returnParameters": {
                  "id": 1284,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20579:0:0"
                },
                "scope": 1335,
                "src": "20533:140:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1310,
                  "nodeType": "Block",
                  "src": "20912:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1307,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1301,
                            "src": "20942:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1306,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1334,
                          "src": "20923:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1308,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20923:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1309,
                      "nodeType": "ExpressionStatement",
                      "src": "20923:28:0"
                    }
                  ]
                },
                "documentation": "@dev Allows the current owner to transfer control of the contract to a newOwner.\n@param newOwner The address to transfer ownership to.",
                "id": 1311,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1304,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1303,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "20902:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "20902:9:0"
                  }
                ],
                "name": "transferOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1302,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1301,
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1311,
                      "src": "20877:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1300,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "20877:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20876:18:0"
                },
                "returnParameters": {
                  "id": 1305,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20912:0:0"
                },
                "scope": 1335,
                "src": "20850:109:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1333,
                  "nodeType": "Block",
                  "src": "21164:132:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1321,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1317,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1313,
                              "src": "21183:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1319,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21203:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "21195:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21195:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "21183:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1316,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "21175:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1322,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21175:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1323,
                      "nodeType": "ExpressionStatement",
                      "src": "21175:31:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1325,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1230,
                            "src": "21243:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1326,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1313,
                            "src": "21251:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1324,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1236,
                          "src": "21222:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 1327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21222:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1328,
                      "nodeType": "EmitStatement",
                      "src": "21217:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1331,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1329,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1230,
                          "src": "21271:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1330,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1313,
                          "src": "21280:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "21271:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1332,
                      "nodeType": "ExpressionStatement",
                      "src": "21271:17:0"
                    }
                  ]
                },
                "documentation": "@dev Transfers control of the contract to a newOwner.\n@param newOwner The address to transfer ownership to.",
                "id": 1334,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_transferOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1314,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1313,
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 1334,
                      "src": "21137:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1312,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21137:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21136:18:0"
                },
                "returnParameters": {
                  "id": 1315,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21164:0:0"
                },
                "scope": 1335,
                "src": "21109:187:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "19359:1940:0"
          },
          {
            "id": 1336,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "21393:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title WhitelistAdminRole\n@dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.",
            "fullyImplemented": true,
            "id": 1436,
            "linearizedBaseContracts": [
              1436
            ],
            "name": "WhitelistAdminRole",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1339,
                "libraryName": {
                  "contractScope": null,
                  "id": 1337,
                  "name": "Roles",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 944,
                  "src": "21593:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Roles_$944",
                    "typeString": "library Roles"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "21587:27:0",
                "typeName": {
                  "contractScope": null,
                  "id": 1338,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "21603:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                }
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1343,
                "name": "WhitelistAdminAdded",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1342,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1341,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1343,
                      "src": "21648:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1340,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21648:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21647:25:0"
                },
                "src": "21622:51:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1347,
                "name": "WhitelistAdminRemoved",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1346,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1345,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1347,
                      "src": "21707:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1344,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21707:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21706:25:0"
                },
                "src": "21679:53:0"
              },
              {
                "constant": false,
                "id": 1349,
                "name": "_whitelistAdmins",
                "nodeType": "VariableDeclaration",
                "scope": 1436,
                "src": "21740:35:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Role_$857_storage",
                  "typeString": "struct Roles.Role"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 1348,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "21740:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1357,
                  "nodeType": "Block",
                  "src": "21808:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1353,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "21838:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1354,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "21838:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1352,
                          "name": "_addWhitelistAdmin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1419,
                          "src": "21819:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21819:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1356,
                      "nodeType": "ExpressionStatement",
                      "src": "21819:30:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1358,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1350,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21796:2:0"
                },
                "returnParameters": {
                  "id": 1351,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21808:0:0"
                },
                "scope": 1436,
                "src": "21784:73:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1368,
                  "nodeType": "Block",
                  "src": "21895:68:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1362,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "21931:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1363,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "21931:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 1361,
                              "name": "isWhitelistAdmin",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1382,
                              "src": "21914:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                "typeString": "function (address) view returns (bool)"
                              }
                            },
                            "id": 1364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "21914:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1360,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "21906:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1365,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21906:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1366,
                      "nodeType": "ExpressionStatement",
                      "src": "21906:37:0"
                    },
                    {
                      "id": 1367,
                      "nodeType": "PlaceholderStatement",
                      "src": "21954:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1369,
                "name": "onlyWhitelistAdmin",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1359,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21892:2:0"
                },
                "src": "21865:98:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1381,
                  "nodeType": "Block",
                  "src": "22041:55:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1378,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1371,
                            "src": "22080:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1376,
                            "name": "_whitelistAdmins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1349,
                            "src": "22059:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1377,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "has",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 943,
                          "src": "22059:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                          }
                        },
                        "id": 1379,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22059:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1375,
                      "id": 1380,
                      "nodeType": "Return",
                      "src": "22052:36:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1382,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1372,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1371,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1382,
                      "src": "21997:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1370,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21997:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21996:17:0"
                },
                "returnParameters": {
                  "id": 1375,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1374,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1382,
                      "src": "22035:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1373,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "22035:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22034:6:0"
                },
                "scope": 1436,
                "src": "21971:125:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1393,
                  "nodeType": "Block",
                  "src": "22174:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1390,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1384,
                            "src": "22204:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1389,
                          "name": "_addWhitelistAdmin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1419,
                          "src": "22185:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1391,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22185:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1392,
                      "nodeType": "ExpressionStatement",
                      "src": "22185:27:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1394,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1387,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1386,
                      "name": "onlyWhitelistAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1369,
                      "src": "22155:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "22155:18:0"
                  }
                ],
                "name": "addWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1385,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1384,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1394,
                      "src": "22131:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1383,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "22131:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22130:17:0"
                },
                "returnParameters": {
                  "id": 1388,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22174:0:0"
                },
                "scope": 1436,
                "src": "22104:116:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1402,
                  "nodeType": "Block",
                  "src": "22269:52:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1398,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "22302:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1399,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "22302:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1397,
                          "name": "_removeWhitelistAdmin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1435,
                          "src": "22280:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22280:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1401,
                      "nodeType": "ExpressionStatement",
                      "src": "22280:33:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1403,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "renounceWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1395,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22259:2:0"
                },
                "returnParameters": {
                  "id": 1396,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22269:0:0"
                },
                "scope": 1436,
                "src": "22228:93:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1418,
                  "nodeType": "Block",
                  "src": "22383:92:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1411,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1405,
                            "src": "22415:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1408,
                            "name": "_whitelistAdmins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1349,
                            "src": "22394:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1410,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 889,
                          "src": "22394:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1412,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22394:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1413,
                      "nodeType": "ExpressionStatement",
                      "src": "22394:29:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1415,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1405,
                            "src": "22459:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1414,
                          "name": "WhitelistAdminAdded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1343,
                          "src": "22439:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1416,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22439:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1417,
                      "nodeType": "EmitStatement",
                      "src": "22434:33:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1419,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_addWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1406,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1405,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1419,
                      "src": "22357:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1404,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "22357:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22356:17:0"
                },
                "returnParameters": {
                  "id": 1407,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22383:0:0"
                },
                "scope": 1436,
                "src": "22329:146:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1434,
                  "nodeType": "Block",
                  "src": "22540:97:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1427,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1421,
                            "src": "22575:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1424,
                            "name": "_whitelistAdmins",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1349,
                            "src": "22551:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1426,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "remove",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 920,
                          "src": "22551:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1428,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22551:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1429,
                      "nodeType": "ExpressionStatement",
                      "src": "22551:32:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1431,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1421,
                            "src": "22621:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1430,
                          "name": "WhitelistAdminRemoved",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1347,
                          "src": "22599:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22599:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1433,
                      "nodeType": "EmitStatement",
                      "src": "22594:35:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1435,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_removeWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1422,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1421,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1435,
                      "src": "22514:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1420,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "22514:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22513:17:0"
                },
                "returnParameters": {
                  "id": 1423,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22540:0:0"
                },
                "scope": 1436,
                "src": "22483:154:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "21552:1088:0"
          },
          {
            "id": 1437,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "22731:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1438,
                  "name": "WhitelistAdminRole",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1436,
                  "src": "23108:18:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_WhitelistAdminRole_$1436",
                    "typeString": "contract WhitelistAdminRole"
                  }
                },
                "id": 1439,
                "nodeType": "InheritanceSpecifier",
                "src": "23108:18:0"
              }
            ],
            "contractDependencies": [
              1436
            ],
            "contractKind": "contract",
            "documentation": "@title WhitelistedRole\n@dev Whitelisted accounts have been approved by a WhitelistAdmin to perform certain actions (e.g. participate in a\ncrowdsale). This role is special in that the only accounts that can add it are WhitelistAdmins (who can also remove\nit), and not Whitelisteds themselves.",
            "fullyImplemented": true,
            "id": 1542,
            "linearizedBaseContracts": [
              1542,
              1436
            ],
            "name": "WhitelistedRole",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1442,
                "libraryName": {
                  "contractScope": null,
                  "id": 1440,
                  "name": "Roles",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 944,
                  "src": "23140:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Roles_$944",
                    "typeString": "library Roles"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "23134:27:0",
                "typeName": {
                  "contractScope": null,
                  "id": 1441,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "23150:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                }
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1446,
                "name": "WhitelistedAdded",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1445,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1444,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1446,
                      "src": "23192:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1443,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23192:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23191:25:0"
                },
                "src": "23169:48:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1450,
                "name": "WhitelistedRemoved",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1449,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1448,
                      "indexed": true,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1450,
                      "src": "23248:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1447,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23248:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23247:25:0"
                },
                "src": "23223:50:0"
              },
              {
                "constant": false,
                "id": 1452,
                "name": "_whitelisteds",
                "nodeType": "VariableDeclaration",
                "scope": 1542,
                "src": "23281:32:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Role_$857_storage",
                  "typeString": "struct Roles.Role"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 1451,
                  "name": "Roles.Role",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 857,
                  "src": "23281:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Role_$857_storage_ptr",
                    "typeString": "struct Roles.Role"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1462,
                  "nodeType": "Block",
                  "src": "23349:65:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1456,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "23382:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1457,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "23382:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "id": 1455,
                              "name": "isWhitelisted",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1476,
                              "src": "23368:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                                "typeString": "function (address) view returns (bool)"
                              }
                            },
                            "id": 1458,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "23368:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1454,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2475,
                          "src": "23360:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1459,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23360:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1460,
                      "nodeType": "ExpressionStatement",
                      "src": "23360:34:0"
                    },
                    {
                      "id": 1461,
                      "nodeType": "PlaceholderStatement",
                      "src": "23405:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1463,
                "name": "onlyWhitelisted",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1453,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23346:2:0"
                },
                "src": "23322:92:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1475,
                  "nodeType": "Block",
                  "src": "23489:52:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1472,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1465,
                            "src": "23525:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1470,
                            "name": "_whitelisteds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "23507:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1471,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "has",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 943,
                          "src": "23507:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$_t_bool_$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address) view returns (bool)"
                          }
                        },
                        "id": 1473,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23507:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1469,
                      "id": 1474,
                      "nodeType": "Return",
                      "src": "23500:33:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1476,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "isWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1466,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1465,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1476,
                      "src": "23445:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1464,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23445:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23444:17:0"
                },
                "returnParameters": {
                  "id": 1469,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1468,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1476,
                      "src": "23483:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1467,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "23483:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23482:6:0"
                },
                "scope": 1542,
                "src": "23422:119:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1487,
                  "nodeType": "Block",
                  "src": "23616:43:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1484,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1478,
                            "src": "23643:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1483,
                          "name": "_addWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1525,
                          "src": "23627:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1485,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23627:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1486,
                      "nodeType": "ExpressionStatement",
                      "src": "23627:24:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1488,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1481,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1480,
                      "name": "onlyWhitelistAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1369,
                      "src": "23597:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "23597:18:0"
                  }
                ],
                "name": "addWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1479,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1478,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1488,
                      "src": "23573:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1477,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23573:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23572:17:0"
                },
                "returnParameters": {
                  "id": 1482,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23616:0:0"
                },
                "scope": 1542,
                "src": "23549:110:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1499,
                  "nodeType": "Block",
                  "src": "23737:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1496,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1490,
                            "src": "23767:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1495,
                          "name": "_removeWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1541,
                          "src": "23748:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1497,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23748:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1498,
                      "nodeType": "ExpressionStatement",
                      "src": "23748:27:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1500,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1493,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1492,
                      "name": "onlyWhitelistAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1369,
                      "src": "23718:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "23718:18:0"
                  }
                ],
                "name": "removeWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1491,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1490,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1500,
                      "src": "23694:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1489,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23694:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23693:17:0"
                },
                "returnParameters": {
                  "id": 1494,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23737:0:0"
                },
                "scope": 1542,
                "src": "23667:116:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1508,
                  "nodeType": "Block",
                  "src": "23829:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1504,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "23859:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1505,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "23859:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1503,
                          "name": "_removeWhitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1541,
                          "src": "23840:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1506,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23840:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1507,
                      "nodeType": "ExpressionStatement",
                      "src": "23840:30:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1509,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "renounceWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1501,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23819:2:0"
                },
                "returnParameters": {
                  "id": 1502,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23829:0:0"
                },
                "scope": 1542,
                "src": "23791:87:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1524,
                  "nodeType": "Block",
                  "src": "23937:86:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1517,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1511,
                            "src": "23966:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1514,
                            "name": "_whitelisteds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "23948:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1516,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 889,
                          "src": "23948:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23948:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1519,
                      "nodeType": "ExpressionStatement",
                      "src": "23948:26:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1521,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1511,
                            "src": "24007:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1520,
                          "name": "WhitelistedAdded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1446,
                          "src": "23990:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1522,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23990:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1523,
                      "nodeType": "EmitStatement",
                      "src": "23985:30:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1525,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_addWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1512,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1511,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1525,
                      "src": "23911:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1510,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23911:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23910:17:0"
                },
                "returnParameters": {
                  "id": 1513,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23937:0:0"
                },
                "scope": 1542,
                "src": "23886:137:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1540,
                  "nodeType": "Block",
                  "src": "24085:91:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1533,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1527,
                            "src": "24117:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1530,
                            "name": "_whitelisteds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1452,
                            "src": "24096:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Role_$857_storage",
                              "typeString": "struct Roles.Role storage ref"
                            }
                          },
                          "id": 1532,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "remove",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 920,
                          "src": "24096:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Role_$857_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Role_$857_storage_ptr_$",
                            "typeString": "function (struct Roles.Role storage pointer,address)"
                          }
                        },
                        "id": 1534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24096:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1535,
                      "nodeType": "ExpressionStatement",
                      "src": "24096:29:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1537,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1527,
                            "src": "24160:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1536,
                          "name": "WhitelistedRemoved",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1450,
                          "src": "24141:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1538,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24141:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1539,
                      "nodeType": "EmitStatement",
                      "src": "24136:32:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1541,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "_removeWhitelisted",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1528,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1527,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1541,
                      "src": "24059:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1526,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "24059:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24058:17:0"
                },
                "returnParameters": {
                  "id": 1529,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24085:0:0"
                },
                "scope": 1542,
                "src": "24031:145:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "23080:1099:0"
          },
          {
            "id": 1543,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "24227:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1544,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1335,
                  "src": "24337:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$1335",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 1545,
                "nodeType": "InheritanceSpecifier",
                "src": "24337:7:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1546,
                  "name": "WhitelistedRole",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1542,
                  "src": "24346:15:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_WhitelistedRole_$1542",
                    "typeString": "contract WhitelistedRole"
                  }
                },
                "id": 1547,
                "nodeType": "InheritanceSpecifier",
                "src": "24346:15:0"
              }
            ],
            "contractDependencies": [
              1335,
              1436,
              1542
            ],
            "contractKind": "contract",
            "documentation": "Manages whitelisted addresses.\n\n ",
            "fullyImplemented": true,
            "id": 1592,
            "linearizedBaseContracts": [
              1592,
              1542,
              1436,
              1335
            ],
            "name": "InvictusWhitelist",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 1552,
                  "nodeType": "Block",
                  "src": "24418:8:0",
                  "statements": []
                },
                "documentation": null,
                "id": 1553,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1550,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1549,
                      "name": "WhitelistedRole",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1542,
                      "src": "24393:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_WhitelistedRole_$1542_$",
                        "typeString": "type(contract WhitelistedRole)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "24393:17:0"
                  }
                ],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1548,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24381:2:0"
                },
                "returnParameters": {
                  "id": 1551,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24418:0:0"
                },
                "scope": 1592,
                "src": "24369:57:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1570,
                  "nodeType": "Block",
                  "src": "24554:105:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "id": 1563,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "24569:27:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1561,
                              "name": "participant",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1555,
                              "src": "24584:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1560,
                            "name": "isWhitelisted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1476,
                            "src": "24570:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                              "typeString": "function (address) view returns (bool)"
                            }
                          },
                          "id": 1562,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24570:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1569,
                      "nodeType": "IfStatement",
                      "src": "24565:87:0",
                      "trueBody": {
                        "id": 1568,
                        "nodeType": "Block",
                        "src": "24598:54:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1565,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1555,
                                  "src": "24628:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 1564,
                                "name": "addWhitelisted",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1488,
                                "src": "24613:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                                  "typeString": "function (address)"
                                }
                              },
                              "id": 1566,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "24613:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1567,
                            "nodeType": "ExpressionStatement",
                            "src": "24613:27:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": "@dev override to support legacy name",
                "id": 1571,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1558,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1557,
                      "name": "onlyWhitelistAdmin",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1369,
                      "src": "24535:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "24535:18:0"
                  }
                ],
                "name": "verifyParticipant",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1556,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1555,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 1571,
                      "src": "24507:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1554,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "24507:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24506:21:0"
                },
                "returnParameters": {
                  "id": 1559,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24554:0:0"
                },
                "scope": 1592,
                "src": "24480:179:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1590,
                  "nodeType": "Block",
                  "src": "24783:120:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1582,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1579,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1573,
                              "src": "24802:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1580,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "24813:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1581,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "24813:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "24802:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5573652072656e6f756e636557686974656c69737441646d696e",
                            "id": 1583,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "24825:28:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_6f8eb78cd3fa6ecb46d3358e24e553bf12dbc902e6243b5c5ff3498d07302f56",
                              "typeString": "literal_string \"Use renounceWhitelistAdmin\""
                            },
                            "value": "Use renounceWhitelistAdmin"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_6f8eb78cd3fa6ecb46d3358e24e553bf12dbc902e6243b5c5ff3498d07302f56",
                              "typeString": "literal_string \"Use renounceWhitelistAdmin\""
                            }
                          ],
                          "id": 1578,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "24794:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1584,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24794:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1585,
                      "nodeType": "ExpressionStatement",
                      "src": "24794:60:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1587,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1573,
                            "src": "24887:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1586,
                          "name": "_removeWhitelistAdmin",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1435,
                          "src": "24865:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1588,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24865:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1589,
                      "nodeType": "ExpressionStatement",
                      "src": "24865:30:0"
                    }
                  ]
                },
                "documentation": "Allow the owner to remove a whitelistAdmin",
                "id": 1591,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1576,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1575,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "24773:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "24773:9:0"
                  }
                ],
                "name": "removeWhitelistAdmin",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1574,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1573,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 1591,
                      "src": "24749:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1572,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "24749:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24748:17:0"
                },
                "returnParameters": {
                  "id": 1577,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24783:0:0"
                },
                "scope": 1592,
                "src": "24719:184:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2458,
            "src": "24307:599:0"
          },
          {
            "id": 1593,
            "literals": [
              "solidity",
              "^",
              "0.5",
              ".6"
            ],
            "nodeType": "PragmaDirective",
            "src": "24945:23:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1594,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 680,
                  "src": "25072:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$680",
                    "typeString": "contract ERC20"
                  }
                },
                "id": 1595,
                "nodeType": "InheritanceSpecifier",
                "src": "25072:5:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1596,
                  "name": "ERC20Detailed",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 124,
                  "src": "25079:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Detailed_$124",
                    "typeString": "contract ERC20Detailed"
                  }
                },
                "id": 1597,
                "nodeType": "InheritanceSpecifier",
                "src": "25079:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1598,
                  "name": "ERC20Burnable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 709,
                  "src": "25094:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Burnable_$709",
                    "typeString": "contract ERC20Burnable"
                  }
                },
                "id": 1599,
                "nodeType": "InheritanceSpecifier",
                "src": "25094:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1600,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1335,
                  "src": "25109:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$1335",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 1601,
                "nodeType": "InheritanceSpecifier",
                "src": "25109:7:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1602,
                  "name": "Pausable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1227,
                  "src": "25118:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Pausable_$1227",
                    "typeString": "contract Pausable"
                  }
                },
                "id": 1603,
                "nodeType": "InheritanceSpecifier",
                "src": "25118:8:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 1604,
                  "name": "MinterRole",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1045,
                  "src": "25128:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_MinterRole_$1045",
                    "typeString": "contract MinterRole"
                  }
                },
                "id": 1605,
                "nodeType": "InheritanceSpecifier",
                "src": "25128:10:0"
              }
            ],
            "contractDependencies": [
              124,
              68,
              680,
              709,
              1045,
              1146,
              1227,
              1335
            ],
            "contractKind": "contract",
            "documentation": "Contract for CRYPTO10 Hedged (C10) fund.\n\n ",
            "fullyImplemented": true,
            "id": 2457,
            "linearizedBaseContracts": [
              2457,
              1045,
              1227,
              1146,
              1335,
              709,
              124,
              680,
              68
            ],
            "name": "C10Token",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1608,
                "libraryName": {
                  "contractScope": null,
                  "id": 1606,
                  "name": "SafeERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 851,
                  "src": "25154:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeERC20_$851",
                    "typeString": "library SafeERC20"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "25148:26:0",
                "typeName": {
                  "contractScope": null,
                  "id": 1607,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 680,
                  "src": "25168:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$680",
                    "typeString": "contract ERC20"
                  }
                }
              },
              {
                "id": 1611,
                "libraryName": {
                  "contractScope": null,
                  "id": 1609,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 251,
                  "src": "25186:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$251",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "25180:27:0",
                "typeName": {
                  "id": 1610,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25199:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 1615,
                "name": "pendingBuys",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25292:46:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 1614,
                  "keyType": {
                    "id": 1612,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25300:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "25292:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 1613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25311:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1618,
                "name": "participantAddresses",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25405:37:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                  "typeString": "address[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 1616,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25405:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1617,
                  "length": null,
                  "nodeType": "ArrayTypeName",
                  "src": "25405:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                    "typeString": "address[]"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1622,
                "name": "pendingWithdrawals",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25512:54:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 1621,
                  "keyType": {
                    "id": 1619,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25521:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "25512:28:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 1620,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "25532:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1625,
                "name": "withdrawals",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25573:36:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                  "typeString": "address payable[]"
                },
                "typeName": {
                  "baseType": {
                    "id": 1623,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "25573:15:0",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 1624,
                  "length": null,
                  "nodeType": "ArrayTypeName",
                  "src": "25573:17:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                    "typeString": "address payable[]"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1628,
                "name": "minimumWei",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25618:38:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1626,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25618:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "3530",
                  "id": 1627,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25647:9:0",
                  "subdenomination": "finney",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_50000000000000000_by_1",
                    "typeString": "int_const 50000000000000000"
                  },
                  "value": "50"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 1631,
                "name": "fees",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25663:24:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1629,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25663:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "35",
                  "id": 1630,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25686:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_5_by_1",
                    "typeString": "int_const 5"
                  },
                  "value": "5"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 1634,
                "name": "minTokenRedemption",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25715:44:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1632,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25715:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "31",
                  "id": 1633,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25752:7:0",
                  "subdenomination": "ether",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1000000000000000000_by_1",
                    "typeString": "int_const 1000000000000000000"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 1637,
                "name": "maxAllocationsPerTx",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25766:40:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1635,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25766:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "3530",
                  "id": 1636,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25804:2:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_50_by_1",
                    "typeString": "int_const 50"
                  },
                  "value": "50"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 1640,
                "name": "maxWithdrawalsPerTx",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25813:40:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1638,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "25813:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "3530",
                  "id": 1639,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25851:2:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_50_by_1",
                    "typeString": "int_const 50"
                  },
                  "value": "50"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 1642,
                "name": "price",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25860:18:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Price_$1649_storage",
                  "typeString": "struct C10Token.Price"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 1641,
                  "name": "Price",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1649,
                  "src": "25860:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Price_$1649_storage_ptr",
                    "typeString": "struct C10Token.Price"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1644,
                "name": "whitelistContract",
                "nodeType": "VariableDeclaration",
                "scope": 2457,
                "src": "25887:32:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1643,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "25887:7:0",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "canonicalName": "C10Token.Price",
                "id": 1649,
                "members": [
                  {
                    "constant": false,
                    "id": 1646,
                    "name": "numerator",
                    "nodeType": "VariableDeclaration",
                    "scope": 1649,
                    "src": "25952:17:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 1645,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "25952:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 1648,
                    "name": "denominator",
                    "nodeType": "VariableDeclaration",
                    "scope": 1649,
                    "src": "25980:19:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 1647,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "25980:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "Price",
                "nodeType": "StructDefinition",
                "scope": 2457,
                "src": "25928:79:0",
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1655,
                "name": "PriceUpdate",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1654,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1651,
                      "indexed": false,
                      "name": "numerator",
                      "nodeType": "VariableDeclaration",
                      "scope": 1655,
                      "src": "26033:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1650,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26033:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1653,
                      "indexed": false,
                      "name": "denominator",
                      "nodeType": "VariableDeclaration",
                      "scope": 1655,
                      "src": "26052:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1652,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26052:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26032:40:0"
                },
                "src": "26015:58:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1659,
                "name": "AddLiquidity",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1658,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1657,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1659,
                      "src": "26098:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1656,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26098:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26097:15:0"
                },
                "src": "26079:34:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1663,
                "name": "RemoveLiquidity",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1662,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1661,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1663,
                      "src": "26141:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1660,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26141:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26140:15:0"
                },
                "src": "26119:37:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1669,
                "name": "DepositReceived",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1668,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1665,
                      "indexed": true,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 1669,
                      "src": "26184:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1664,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26184:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1667,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1669,
                      "src": "26213:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1666,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26213:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26183:44:0"
                },
                "src": "26162:66:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1677,
                "name": "TokensIssued",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1676,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1671,
                      "indexed": true,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "26253:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1670,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26253:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1673,
                      "indexed": false,
                      "name": "amountTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "26282:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1672,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26282:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1675,
                      "indexed": false,
                      "name": "etherAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "26304:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1674,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26304:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26252:72:0"
                },
                "src": "26234:91:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1683,
                "name": "WithdrawRequest",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1682,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1679,
                      "indexed": true,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 1683,
                      "src": "26353:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1678,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26353:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1681,
                      "indexed": false,
                      "name": "amountTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 1683,
                      "src": "26382:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1680,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26382:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26352:51:0"
                },
                "src": "26331:73:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1691,
                "name": "Withdraw",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1690,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1685,
                      "indexed": true,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 1691,
                      "src": "26425:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1684,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26425:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1687,
                      "indexed": false,
                      "name": "amountTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 1691,
                      "src": "26454:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1686,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26454:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1689,
                      "indexed": false,
                      "name": "etherAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1691,
                      "src": "26476:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1688,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26476:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26424:72:0"
                },
                "src": "26410:87:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 1697,
                "name": "TokensClaimed",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1696,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1693,
                      "indexed": true,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 1697,
                      "src": "26523:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1692,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26523:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1695,
                      "indexed": false,
                      "name": "balance",
                      "nodeType": "VariableDeclaration",
                      "scope": 1697,
                      "src": "26546:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1694,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26546:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26522:40:0"
                },
                "src": "26503:60:0"
              },
              {
                "body": {
                  "id": 1740,
                  "nodeType": "Block",
                  "src": "26750:283:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1718,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1713,
                          "name": "price",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1642,
                          "src": "26765:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Price_$1649_storage",
                            "typeString": "struct C10Token.Price storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1715,
                              "name": "priceNumeratorInput",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1699,
                              "src": "26779:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "31303030",
                              "id": 1716,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26800:4:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1000_by_1",
                                "typeString": "int_const 1000"
                              },
                              "value": "1000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_rational_1000_by_1",
                                "typeString": "int_const 1000"
                              }
                            ],
                            "id": 1714,
                            "name": "Price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1649,
                            "src": "26773:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_Price_$1649_storage_ptr_$",
                              "typeString": "type(struct C10Token.Price storage pointer)"
                            }
                          },
                          "id": 1717,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "26773:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Price_$1649_memory",
                            "typeString": "struct C10Token.Price memory"
                          }
                        },
                        "src": "26765:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Price_$1649_storage",
                          "typeString": "struct C10Token.Price storage ref"
                        }
                      },
                      "id": 1719,
                      "nodeType": "ExpressionStatement",
                      "src": "26765:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1723,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1721,
                              "name": "priceNumeratorInput",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1699,
                              "src": "26828:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1722,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "26850:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "26828:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "496e76616c6964207072696365206e756d657261746f72",
                            "id": 1724,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26853:25:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_31e6b854d007679a0c7df567a7bc85f34c32ca666e16e0421e380dc913a831d6",
                              "typeString": "literal_string \"Invalid price numerator\""
                            },
                            "value": "Invalid price numerator"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_31e6b854d007679a0c7df567a7bc85f34c32ca666e16e0421e380dc913a831d6",
                              "typeString": "literal_string \"Invalid price numerator\""
                            }
                          ],
                          "id": 1720,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "26820:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "26820:59:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1726,
                      "nodeType": "ExpressionStatement",
                      "src": "26820:59:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1728,
                              "name": "whitelistContractInput",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1701,
                              "src": "26902:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1730,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "26936:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1729,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "26928:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1731,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "26928:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "26902:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "496e76616c69642077686974656c6973742061646472657373",
                            "id": 1733,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "26940:27:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_3ba7772c2d3914ad20363b2e359b2a3b0bbd794ee7d51feea0ea9ebba04bcdeb",
                              "typeString": "literal_string \"Invalid whitelist address\""
                            },
                            "value": "Invalid whitelist address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_3ba7772c2d3914ad20363b2e359b2a3b0bbd794ee7d51feea0ea9ebba04bcdeb",
                              "typeString": "literal_string \"Invalid whitelist address\""
                            }
                          ],
                          "id": 1727,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "26894:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1734,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "26894:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1735,
                      "nodeType": "ExpressionStatement",
                      "src": "26894:74:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1738,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1736,
                          "name": "whitelistContract",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1644,
                          "src": "26983:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1737,
                          "name": "whitelistContractInput",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1701,
                          "src": "27003:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "26983:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1739,
                      "nodeType": "ExpressionStatement",
                      "src": "26983:42:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 1741,
                "implemented": true,
                "kind": "constructor",
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43727970746f313020486564676564",
                        "id": 1704,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "26668:17:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_42defe2032a065c43193c857a71156331c2afcb9840d0627d94ab526a2addc65",
                          "typeString": "literal_string \"Crypto10 Hedged\""
                        },
                        "value": "Crypto10 Hedged"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "433130",
                        "id": 1705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "26687:5:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3264b58dc1764753ee6525b480e17fe1649f5f763e299aecea6e63d7cdcdb8af",
                          "typeString": "literal_string \"C10\""
                        },
                        "value": "C10"
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "3138",
                        "id": 1706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "26694:2:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_18_by_1",
                          "typeString": "int_const 18"
                        },
                        "value": "18"
                      }
                    ],
                    "id": 1707,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1703,
                      "name": "ERC20Detailed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 124,
                      "src": "26654:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$124_$",
                        "typeString": "type(contract ERC20Detailed)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "26654:43:0"
                  },
                  {
                    "arguments": [],
                    "id": 1709,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1708,
                      "name": "ERC20Burnable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 709,
                      "src": "26707:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC20Burnable_$709_$",
                        "typeString": "type(contract ERC20Burnable)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "26707:15:0"
                  },
                  {
                    "arguments": [],
                    "id": 1711,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1710,
                      "name": "Pausable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1227,
                      "src": "26732:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_Pausable_$1227_$",
                        "typeString": "type(contract Pausable)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "26732:10:0"
                  }
                ],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1702,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1699,
                      "name": "priceNumeratorInput",
                      "nodeType": "VariableDeclaration",
                      "scope": 1741,
                      "src": "26584:27:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1698,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "26584:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1701,
                      "name": "whitelistContractInput",
                      "nodeType": "VariableDeclaration",
                      "scope": 1741,
                      "src": "26613:30:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1700,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "26613:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "26583:61:0"
                },
                "returnParameters": {
                  "id": 1712,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "26750:0:0"
                },
                "scope": 2457,
                "src": "26571:462:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1749,
                  "nodeType": "Block",
                  "src": "27166:40:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1745,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "27187:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1746,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "27187:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1744,
                          "name": "buyTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "27177:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1747,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "27177:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1748,
                      "nodeType": "ExpressionStatement",
                      "src": "27177:21:0"
                    }
                  ]
                },
                "documentation": "@dev fallback function that buys tokens if the sender is whitelisted.",
                "id": 1750,
                "implemented": true,
                "kind": "fallback",
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1742,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27146:2:0"
                },
                "returnParameters": {
                  "id": 1743,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27166:0:0"
                },
                "scope": 2457,
                "src": "27137:69:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1758,
                  "nodeType": "Block",
                  "src": "27306:40:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1754,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "27327:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1755,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "27327:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "id": 1753,
                          "name": "buyTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2204,
                          "src": "27317:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1756,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "27317:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1757,
                      "nodeType": "ExpressionStatement",
                      "src": "27317:21:0"
                    }
                  ]
                },
                "documentation": "@dev Explicitly buy via contract.",
                "id": 1759,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "buy",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1751,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27286:2:0"
                },
                "returnParameters": {
                  "id": 1752,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27306:0:0"
                },
                "scope": 2457,
                "src": "27274:72:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1777,
                  "nodeType": "Block",
                  "src": "27605:135:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1769,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1767,
                              "name": "newMaxAllocationsPerTx",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1761,
                              "src": "27624:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1768,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "27649:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "27624:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d7573742062652067726561746572207468616e2030",
                            "id": 1770,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "27652:24:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_6cc7f3ad5f9f0425332173c17aab5adb6cf6e9edeeaae5ed713bf51fa7f23564",
                              "typeString": "literal_string \"Must be greater than 0\""
                            },
                            "value": "Must be greater than 0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_6cc7f3ad5f9f0425332173c17aab5adb6cf6e9edeeaae5ed713bf51fa7f23564",
                              "typeString": "literal_string \"Must be greater than 0\""
                            }
                          ],
                          "id": 1766,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "27616:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1771,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "27616:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1772,
                      "nodeType": "ExpressionStatement",
                      "src": "27616:61:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1775,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1773,
                          "name": "maxAllocationsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1637,
                          "src": "27688:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1774,
                          "name": "newMaxAllocationsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1761,
                          "src": "27710:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "27688:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1776,
                      "nodeType": "ExpressionStatement",
                      "src": "27688:44:0"
                    }
                  ]
                },
                "documentation": "Sets the maximum number of allocations in a single transaction.\n@dev Allows us to configure batch sizes and avoid running out of gas.",
                "id": 1778,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1764,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1763,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "27595:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "27595:9:0"
                  }
                ],
                "name": "setMaxAllocationsPerTx",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1762,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1761,
                      "name": "newMaxAllocationsPerTx",
                      "nodeType": "VariableDeclaration",
                      "scope": 1778,
                      "src": "27554:30:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1760,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "27554:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "27553:32:0"
                },
                "returnParameters": {
                  "id": 1765,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27605:0:0"
                },
                "scope": 2457,
                "src": "27522:218:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1796,
                  "nodeType": "Block",
                  "src": "27999:135:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1788,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1786,
                              "name": "newMaxWithdrawalsPerTx",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1780,
                              "src": "28018:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1787,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "28043:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "28018:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d7573742062652067726561746572207468616e2030",
                            "id": 1789,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28046:24:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_6cc7f3ad5f9f0425332173c17aab5adb6cf6e9edeeaae5ed713bf51fa7f23564",
                              "typeString": "literal_string \"Must be greater than 0\""
                            },
                            "value": "Must be greater than 0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_6cc7f3ad5f9f0425332173c17aab5adb6cf6e9edeeaae5ed713bf51fa7f23564",
                              "typeString": "literal_string \"Must be greater than 0\""
                            }
                          ],
                          "id": 1785,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "28010:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1790,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28010:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1791,
                      "nodeType": "ExpressionStatement",
                      "src": "28010:61:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1794,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1792,
                          "name": "maxWithdrawalsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1640,
                          "src": "28082:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1793,
                          "name": "newMaxWithdrawalsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1780,
                          "src": "28104:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28082:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1795,
                      "nodeType": "ExpressionStatement",
                      "src": "28082:44:0"
                    }
                  ]
                },
                "documentation": "Sets the maximum number of withdrawals in a single transaction.\n@dev Allows us to configure batch sizes and avoid running out of gas.",
                "id": 1797,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1783,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1782,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "27989:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "27989:9:0"
                  }
                ],
                "name": "setMaxWithdrawalsPerTx",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1781,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1780,
                      "name": "newMaxWithdrawalsPerTx",
                      "nodeType": "VariableDeclaration",
                      "scope": 1797,
                      "src": "27948:30:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1779,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "27948:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "27947:32:0"
                },
                "returnParameters": {
                  "id": 1784,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27999:0:0"
                },
                "scope": 2457,
                "src": "27916:218:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1815,
                  "nodeType": "Block",
                  "src": "28262:116:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1807,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1805,
                              "name": "newMinimumWei",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1799,
                              "src": "28281:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1806,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "28297:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "28281:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d696e696d756d206d7573742062652067726561746572207468616e2030",
                            "id": 1808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28300:32:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_603b203536cb3dccc809a43d6df423b610bdec2a79aa1ce118634549ba33991c",
                              "typeString": "literal_string \"Minimum must be greater than 0\""
                            },
                            "value": "Minimum must be greater than 0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_603b203536cb3dccc809a43d6df423b610bdec2a79aa1ce118634549ba33991c",
                              "typeString": "literal_string \"Minimum must be greater than 0\""
                            }
                          ],
                          "id": 1804,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "28273:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28273:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1810,
                      "nodeType": "ExpressionStatement",
                      "src": "28273:60:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1813,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1811,
                          "name": "minimumWei",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1628,
                          "src": "28344:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1812,
                          "name": "newMinimumWei",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1799,
                          "src": "28357:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28344:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1814,
                      "nodeType": "ExpressionStatement",
                      "src": "28344:26:0"
                    }
                  ]
                },
                "documentation": "Sets the minimum wei when buying tokens.",
                "id": 1816,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1802,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1801,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "28252:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "28252:9:0"
                  }
                ],
                "name": "setMinimumBuyValue",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1800,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1799,
                      "name": "newMinimumWei",
                      "nodeType": "VariableDeclaration",
                      "scope": 1816,
                      "src": "28220:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1798,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "28220:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "28219:23:0"
                },
                "returnParameters": {
                  "id": 1803,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28262:0:0"
                },
                "scope": 2457,
                "src": "28192:186:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1834,
                  "nodeType": "Block",
                  "src": "28525:140:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1826,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1824,
                              "name": "newMinTokenRedemption",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1818,
                              "src": "28544:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1825,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "28568:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "28544:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d696e696d756d206d7573742062652067726561746572207468616e2030",
                            "id": 1827,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28571:32:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_603b203536cb3dccc809a43d6df423b610bdec2a79aa1ce118634549ba33991c",
                              "typeString": "literal_string \"Minimum must be greater than 0\""
                            },
                            "value": "Minimum must be greater than 0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_603b203536cb3dccc809a43d6df423b610bdec2a79aa1ce118634549ba33991c",
                              "typeString": "literal_string \"Minimum must be greater than 0\""
                            }
                          ],
                          "id": 1823,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "28536:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1828,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28536:68:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1829,
                      "nodeType": "ExpressionStatement",
                      "src": "28536:68:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1832,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1830,
                          "name": "minTokenRedemption",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1634,
                          "src": "28615:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1831,
                          "name": "newMinTokenRedemption",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1818,
                          "src": "28636:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28615:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1833,
                      "nodeType": "ExpressionStatement",
                      "src": "28615:42:0"
                    }
                  ]
                },
                "documentation": "Sets the minimum number of tokens to redeem.",
                "id": 1835,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1821,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1820,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "28515:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "28515:9:0"
                  }
                ],
                "name": "setMinimumTokenRedemption",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1819,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1818,
                      "name": "newMinTokenRedemption",
                      "nodeType": "VariableDeclaration",
                      "scope": 1835,
                      "src": "28475:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1817,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "28475:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "28474:31:0"
                },
                "returnParameters": {
                  "id": 1822,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28525:0:0"
                },
                "scope": 2457,
                "src": "28440:225:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1868,
                  "nodeType": "Block",
                  "src": "28774:236:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1845,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1843,
                              "name": "newNumerator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1837,
                              "src": "28793:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1844,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "28808:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "28793:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d75737420626520706f7369746976652076616c7565",
                            "id": 1846,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "28811:24:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            },
                            "value": "Must be positive value"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            }
                          ],
                          "id": 1842,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "28785:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1847,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28785:51:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1848,
                      "nodeType": "ExpressionStatement",
                      "src": "28785:51:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1853,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1849,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1642,
                            "src": "28849:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Price_$1649_storage",
                              "typeString": "struct C10Token.Price storage ref"
                            }
                          },
                          "id": 1851,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "numerator",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1646,
                          "src": "28849:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1852,
                          "name": "newNumerator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1837,
                          "src": "28867:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28849:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1854,
                      "nodeType": "ExpressionStatement",
                      "src": "28849:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1855,
                          "name": "allocateTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2309,
                          "src": "28892:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1856,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28892:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1857,
                      "nodeType": "ExpressionStatement",
                      "src": "28892:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1858,
                          "name": "processWithdrawals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2441,
                          "src": "28919:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1859,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28919:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1860,
                      "nodeType": "ExpressionStatement",
                      "src": "28919:20:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1862,
                              "name": "price",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1642,
                              "src": "28967:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Price_$1649_storage",
                                "typeString": "struct C10Token.Price storage ref"
                              }
                            },
                            "id": 1863,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "numerator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1646,
                            "src": "28967:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1864,
                              "name": "price",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1642,
                              "src": "28984:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Price_$1649_storage",
                                "typeString": "struct C10Token.Price storage ref"
                              }
                            },
                            "id": 1865,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "denominator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1648,
                            "src": "28984:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1861,
                          "name": "PriceUpdate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1655,
                          "src": "28955:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256)"
                          }
                        },
                        "id": 1866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28955:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1867,
                      "nodeType": "EmitStatement",
                      "src": "28950:52:0"
                    }
                  ]
                },
                "documentation": "Updates the price numerator.",
                "id": 1869,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1840,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1839,
                      "name": "onlyMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "28763:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "28763:10:0"
                  }
                ],
                "name": "updatePrice",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1838,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1837,
                      "name": "newNumerator",
                      "nodeType": "VariableDeclaration",
                      "scope": 1869,
                      "src": "28732:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1836,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "28732:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "28731:22:0"
                },
                "returnParameters": {
                  "id": 1841,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28774:0:0"
                },
                "scope": 2457,
                "src": "28711:299:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1889,
                  "nodeType": "Block",
                  "src": "29134:119:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1879,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1877,
                              "name": "newDenominator",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1871,
                              "src": "29153:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1878,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "29170:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "29153:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d75737420626520706f7369746976652076616c7565",
                            "id": 1880,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "29173:24:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            },
                            "value": "Must be positive value"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            }
                          ],
                          "id": 1876,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "29145:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1881,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29145:53:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1882,
                      "nodeType": "ExpressionStatement",
                      "src": "29145:53:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1887,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1883,
                            "name": "price",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1642,
                            "src": "29211:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Price_$1649_storage",
                              "typeString": "struct C10Token.Price storage ref"
                            }
                          },
                          "id": 1885,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "memberName": "denominator",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1648,
                          "src": "29211:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1886,
                          "name": "newDenominator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1871,
                          "src": "29231:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "29211:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1888,
                      "nodeType": "ExpressionStatement",
                      "src": "29211:34:0"
                    }
                  ]
                },
                "documentation": "Updates the price denominator.",
                "id": 1890,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1874,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1873,
                      "name": "onlyMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "29123:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "29123:10:0"
                  }
                ],
                "name": "updatePriceDenominator",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1872,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1871,
                      "name": "newDenominator",
                      "nodeType": "VariableDeclaration",
                      "scope": 1890,
                      "src": "29090:22:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1870,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29090:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "29089:24:0"
                },
                "returnParameters": {
                  "id": 1875,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "29134:0:0"
                },
                "scope": 2457,
                "src": "29058:195:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1955,
                  "nodeType": "Block",
                  "src": "29582:620:0",
                  "statements": [
                    {
                      "assignments": [
                        1900
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1900,
                          "name": "participant",
                          "nodeType": "VariableDeclaration",
                          "scope": 1955,
                          "src": "29595:27:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "typeName": {
                            "id": 1899,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "29595:15:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1903,
                      "initialValue": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1901,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2472,
                          "src": "29625:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "29625:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "29595:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1909,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1906,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1900,
                                  "src": "29664:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "id": 1905,
                                "name": "balanceOf",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 289,
                                "src": "29654:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) view returns (uint256)"
                                }
                              },
                              "id": 1907,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "29654:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1908,
                              "name": "amountTokensToWithdraw",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1892,
                              "src": "29680:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "29654:48:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "43616e6e6f74207769746864726177206d6f7265207468616e2062616c616e63652068656c64",
                            "id": 1910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "29718:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_cbaf4023250f16f9b18fab06f573d23b9da5ac01935e3a726d5a289ebf92dbc2",
                              "typeString": "literal_string \"Cannot withdraw more than balance held\""
                            },
                            "value": "Cannot withdraw more than balance held"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_cbaf4023250f16f9b18fab06f573d23b9da5ac01935e3a726d5a289ebf92dbc2",
                              "typeString": "literal_string \"Cannot withdraw more than balance held\""
                            }
                          ],
                          "id": 1904,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "29646:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1911,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29646:113:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1912,
                      "nodeType": "ExpressionStatement",
                      "src": "29646:113:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1916,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1914,
                              "name": "amountTokensToWithdraw",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1892,
                              "src": "29778:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1915,
                              "name": "minTokenRedemption",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1634,
                              "src": "29804:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "29778:44:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "546f6f2066657720746f6b656e73",
                            "id": 1917,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "29824:16:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_3f3b1fe2972d7d94ba6ae5395183354672c3b1da7fd2461a72a9eda8bc9f94ed",
                              "typeString": "literal_string \"Too few tokens\""
                            },
                            "value": "Too few tokens"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_3f3b1fe2972d7d94ba6ae5395183354672c3b1da7fd2461a72a9eda8bc9f94ed",
                              "typeString": "literal_string \"Too few tokens\""
                            }
                          ],
                          "id": 1913,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "29770:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1918,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29770:71:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1919,
                      "nodeType": "ExpressionStatement",
                      "src": "29770:71:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1921,
                            "name": "amountTokensToWithdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1892,
                            "src": "29859:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1920,
                          "name": "burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 695,
                          "src": "29854:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 1922,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29854:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1923,
                      "nodeType": "ExpressionStatement",
                      "src": "29854:28:0"
                    },
                    {
                      "assignments": [
                        1925
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1925,
                          "name": "pendingAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 1955,
                          "src": "29895:21:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1924,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "29895:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1929,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 1926,
                          "name": "pendingWithdrawals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1622,
                          "src": "29919:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 1928,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 1927,
                          "name": "participant",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1900,
                          "src": "29938:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "29919:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "29895:55:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1932,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1930,
                          "name": "pendingAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1925,
                          "src": "29965:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1931,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "29982:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "29965:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1940,
                      "nodeType": "IfStatement",
                      "src": "29961:80:0",
                      "trueBody": {
                        "id": 1939,
                        "nodeType": "Block",
                        "src": "29985:56:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1936,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1900,
                                  "src": "30017:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1933,
                                  "name": "withdrawals",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1625,
                                  "src": "30000:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                    "typeString": "address payable[] storage ref"
                                  }
                                },
                                "id": 1935,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "push",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "30000:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_payable_$returns$_t_uint256_$",
                                  "typeString": "function (address payable) returns (uint256)"
                                }
                              },
                              "id": 1937,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "30000:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1938,
                            "nodeType": "ExpressionStatement",
                            "src": "30000:29:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1941,
                            "name": "pendingWithdrawals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1622,
                            "src": "30051:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1943,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1942,
                            "name": "participant",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1900,
                            "src": "30070:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "30051:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1946,
                              "name": "amountTokensToWithdraw",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1892,
                              "src": "30103:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1944,
                              "name": "pendingAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1925,
                              "src": "30085:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1945,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "30085:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1947,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "30085:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "30051:75:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1949,
                      "nodeType": "ExpressionStatement",
                      "src": "30051:75:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1951,
                            "name": "participant",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1900,
                            "src": "30158:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1952,
                            "name": "amountTokensToWithdraw",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1892,
                            "src": "30171:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1950,
                          "name": "WithdrawRequest",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1683,
                          "src": "30142:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1953,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30142:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1954,
                      "nodeType": "EmitStatement",
                      "src": "30137:57:0"
                    }
                  ]
                },
                "documentation": "Whitelisted token holders can request token redemption, and withdraw ETH.\n@param amountTokensToWithdraw The number of tokens to withdraw.\n@dev withdrawn tokens are burnt.",
                "id": 1956,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1895,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1894,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "29542:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "29542:13:0"
                  },
                  {
                    "arguments": null,
                    "id": 1897,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1896,
                      "name": "onlyWhitelisted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2456,
                      "src": "29566:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "29566:15:0"
                  }
                ],
                "name": "requestWithdrawal",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1893,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1892,
                      "name": "amountTokensToWithdraw",
                      "nodeType": "VariableDeclaration",
                      "scope": 1956,
                      "src": "29501:30:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1891,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "29501:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "29500:32:0"
                },
                "returnParameters": {
                  "id": 1898,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "29582:0:0"
                },
                "scope": 2457,
                "src": "29474:728:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 2003,
                  "nodeType": "Block",
                  "src": "30320:254:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1970,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1965,
                                  "name": "token",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1958,
                                  "src": "30347:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_ERC20_$680",
                                    "typeString": "contract ERC20"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_ERC20_$680",
                                    "typeString": "contract ERC20"
                                  }
                                ],
                                "id": 1964,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "30339:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1966,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "30339:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1968,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30365:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1967,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "30357:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1969,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "30357:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "30339:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "496e76616c69642061646472657373",
                            "id": 1971,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "30369:17:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
                              "typeString": "literal_string \"Invalid address\""
                            },
                            "value": "Invalid address"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_1462473b7a4b33d32b109b815fd2324d00c9e5839b707ecf16d0ab5744f99226",
                              "typeString": "literal_string \"Invalid address\""
                            }
                          ],
                          "id": 1963,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "30331:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 1972,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30331:56:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1973,
                      "nodeType": "ExpressionStatement",
                      "src": "30331:56:0"
                    },
                    {
                      "assignments": [
                        1975
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1975,
                          "name": "balance",
                          "nodeType": "VariableDeclaration",
                          "scope": 2003,
                          "src": "30398:15:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1974,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "30398:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1982,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1979,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2514,
                                "src": "30440:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_C10Token_$2457",
                                  "typeString": "contract C10Token"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_C10Token_$2457",
                                  "typeString": "contract C10Token"
                                }
                              ],
                              "id": 1978,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "30432:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 1980,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30432:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1976,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1958,
                            "src": "30416:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$680",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1977,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balanceOf",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 289,
                          "src": "30416:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                            "typeString": "function (address) view external returns (uint256)"
                          }
                        },
                        "id": 1981,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30416:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "30398:48:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1986,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1260,
                              "src": "30472:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                "typeString": "function () view returns (address)"
                              }
                            },
                            "id": 1987,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30472:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 1991,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2514,
                                    "src": "30505:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_C10Token_$2457",
                                      "typeString": "contract C10Token"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_C10Token_$2457",
                                      "typeString": "contract C10Token"
                                    }
                                  ],
                                  "id": 1990,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "30497:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 1992,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "30497:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 1988,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1958,
                                "src": "30481:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ERC20_$680",
                                  "typeString": "contract ERC20"
                                }
                              },
                              "id": 1989,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 289,
                              "src": "30481:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 1993,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30481:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1983,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1958,
                            "src": "30457:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_ERC20_$680",
                              "typeString": "contract ERC20"
                            }
                          },
                          "id": 1985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 324,
                          "src": "30457:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1994,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30457:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1995,
                      "nodeType": "ExpressionStatement",
                      "src": "30457:55:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1998,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1958,
                                "src": "30550:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_ERC20_$680",
                                  "typeString": "contract ERC20"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_ERC20_$680",
                                  "typeString": "contract ERC20"
                                }
                              ],
                              "id": 1997,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "30542:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 1999,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30542:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2000,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1975,
                            "src": "30558:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1996,
                          "name": "TokensClaimed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1697,
                          "src": "30528:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 2001,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30528:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2002,
                      "nodeType": "EmitStatement",
                      "src": "30523:43:0"
                    }
                  ]
                },
                "documentation": "Allows owner to claim any ERC20 tokens.",
                "id": 2004,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 1961,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1960,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "30310:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "30310:9:0"
                  }
                ],
                "name": "claimTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1959,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1958,
                      "name": "token",
                      "nodeType": "VariableDeclaration",
                      "scope": 2004,
                      "src": "30280:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC20_$680",
                        "typeString": "contract ERC20"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1957,
                        "name": "ERC20",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 680,
                        "src": "30280:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_ERC20_$680",
                          "typeString": "contract ERC20"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "30279:13:0"
                },
                "returnParameters": {
                  "id": 1962,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "30320:0:0"
                },
                "scope": 2457,
                "src": "30259:315:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 2018,
                  "nodeType": "Block",
                  "src": "30830:40:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2014,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2006,
                            "src": "30847:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2015,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2008,
                            "src": "30856:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2013,
                          "name": "_burn",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 637,
                          "src": "30841:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 2016,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30841:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2017,
                      "nodeType": "ExpressionStatement",
                      "src": "30841:21:0"
                    }
                  ]
                },
                "documentation": "@dev Allows the owner to burn a specific amount of tokens on a participant's behalf.\n@param value The amount of tokens to be burned.",
                "id": 2019,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2011,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2010,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "30820:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "30820:9:0"
                  }
                ],
                "name": "burnForParticipant",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2009,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2006,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 2019,
                      "src": "30781:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2005,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "30781:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2008,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 2019,
                      "src": "30798:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2007,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "30798:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "30780:32:0"
                },
                "returnParameters": {
                  "id": 2012,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "30830:0:0"
                },
                "scope": 2457,
                "src": "30753:117:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2039,
                  "nodeType": "Block",
                  "src": "31230:59:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2033,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2021,
                            "src": "31247:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2034,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2023,
                            "src": "31251:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2032,
                          "name": "_mint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 595,
                          "src": "31241:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 2035,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31241:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2036,
                      "nodeType": "ExpressionStatement",
                      "src": "31241:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 2037,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "31277:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 2031,
                      "id": 2038,
                      "nodeType": "Return",
                      "src": "31270:11:0"
                    }
                  ]
                },
                "documentation": "@dev Function to mint tokens when not paused.\n@param to The address that will receive the minted tokens.\n@param value The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
                "id": 2040,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2026,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2025,
                      "name": "onlyMinter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 978,
                      "src": "31190:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "31190:10:0"
                  },
                  {
                    "arguments": null,
                    "id": 2028,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2027,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "31201:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "31201:13:0"
                  }
                ],
                "name": "mint",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2024,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2021,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "31156:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2020,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31156:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2023,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "31168:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2022,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "31168:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "31155:27:0"
                },
                "returnParameters": {
                  "id": 2031,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2030,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2040,
                      "src": "31224:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2029,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "31224:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "31223:6:0"
                },
                "scope": 2457,
                "src": "31142:147:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2056,
                  "nodeType": "Block",
                  "src": "31408:106:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2047,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2044,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "31427:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2045,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "31427:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2046,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "31439:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "31427:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d75737420626520706f7369746976652076616c7565",
                            "id": 2048,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31442:24:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            },
                            "value": "Must be positive value"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_0ca073daac6045339d4363afcc884eda5aded08861a4bb6378e26c0dce0b8eff",
                              "typeString": "literal_string \"Must be positive value\""
                            }
                          ],
                          "id": 2043,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "31419:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2049,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31419:48:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2050,
                      "nodeType": "ExpressionStatement",
                      "src": "31419:48:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2052,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "31496:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "31496:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2051,
                          "name": "AddLiquidity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1659,
                          "src": "31483:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 2054,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31483:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2055,
                      "nodeType": "EmitStatement",
                      "src": "31478:28:0"
                    }
                  ]
                },
                "documentation": "Adds liquidity to the contract, allowing anyone to deposit ETH",
                "id": 2057,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "addLiquidity",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2041,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "31390:2:0"
                },
                "returnParameters": {
                  "id": 2042,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "31408:0:0"
                },
                "scope": 2457,
                "src": "31369:145:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2086,
                  "nodeType": "Block",
                  "src": "31670:162:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2070,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2065,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2059,
                              "src": "31689:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2067,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2514,
                                    "src": "31707:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_C10Token_$2457",
                                      "typeString": "contract C10Token"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_C10Token_$2457",
                                      "typeString": "contract C10Token"
                                    }
                                  ],
                                  "id": 2066,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "31699:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 2068,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "31699:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 2069,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balance",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "31699:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "31689:31:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "496e73756666696369656e742062616c616e6365",
                            "id": 2071,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31722:22:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                              "typeString": "literal_string \"Insufficient balance\""
                            },
                            "value": "Insufficient balance"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                              "typeString": "literal_string \"Insufficient balance\""
                            }
                          ],
                          "id": 2064,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "31681:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2072,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31681:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2073,
                      "nodeType": "ExpressionStatement",
                      "src": "31681:64:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2079,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2059,
                            "src": "31778:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2074,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "31758:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2077,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "31758:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "id": 2078,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "31758:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 2080,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31758:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2081,
                      "nodeType": "ExpressionStatement",
                      "src": "31758:27:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2083,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2059,
                            "src": "31817:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2082,
                          "name": "RemoveLiquidity",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1663,
                          "src": "31801:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 2084,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31801:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2085,
                      "nodeType": "EmitStatement",
                      "src": "31796:28:0"
                    }
                  ]
                },
                "documentation": "Removes liquidity, allowing managing wallets to transfer eth to the fund wallet.",
                "id": 2087,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2062,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2061,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "31660:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "31660:9:0"
                  }
                ],
                "name": "removeLiquidity",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2060,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2059,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2087,
                      "src": "31637:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2058,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "31637:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "31636:16:0"
                },
                "returnParameters": {
                  "id": 2063,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "31670:0:0"
                },
                "scope": 2457,
                "src": "31612:220:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2106,
                  "nodeType": "Block",
                  "src": "31940:104:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 2098,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2095,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2089,
                              "src": "31959:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2096,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "31970:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2097,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "31970:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "31959:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5573652072656e6f756e63654d696e746572",
                            "id": 2099,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31982:20:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_987a02f4a8c64face373458fd5e3e6681e23ea00e57d90a6f718879f57342ea7",
                              "typeString": "literal_string \"Use renounceMinter\""
                            },
                            "value": "Use renounceMinter"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_987a02f4a8c64face373458fd5e3e6681e23ea00e57d90a6f718879f57342ea7",
                              "typeString": "literal_string \"Use renounceMinter\""
                            }
                          ],
                          "id": 2094,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "31951:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2100,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31951:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2101,
                      "nodeType": "ExpressionStatement",
                      "src": "31951:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2103,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2089,
                            "src": "32028:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2102,
                          "name": "_removeMinter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1044,
                          "src": "32014:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 2104,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32014:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2105,
                      "nodeType": "ExpressionStatement",
                      "src": "32014:22:0"
                    }
                  ]
                },
                "documentation": "Allow the owner to remove a minter",
                "id": 2107,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2092,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2091,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "31930:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "31930:9:0"
                  }
                ],
                "name": "removeMinter",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2090,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2089,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 2107,
                      "src": "31906:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2088,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31906:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "31905:17:0"
                },
                "returnParameters": {
                  "id": 2093,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "31940:0:0"
                },
                "scope": 2457,
                "src": "31884:160:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2126,
                  "nodeType": "Block",
                  "src": "32152:104:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 2118,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2115,
                              "name": "account",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2109,
                              "src": "32171:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2116,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "32182:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2117,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "32182:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "32171:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "5573652072656e6f756e6365506175736572",
                            "id": 2119,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "32194:20:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_02998b620b3a5f2e622cf9b021fa239c84a8ba44b88269997dfbf077fa043b31",
                              "typeString": "literal_string \"Use renouncePauser\""
                            },
                            "value": "Use renouncePauser"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_02998b620b3a5f2e622cf9b021fa239c84a8ba44b88269997dfbf077fa043b31",
                              "typeString": "literal_string \"Use renouncePauser\""
                            }
                          ],
                          "id": 2114,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "32163:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32163:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2121,
                      "nodeType": "ExpressionStatement",
                      "src": "32163:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2123,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2109,
                            "src": "32240:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 2122,
                          "name": "_removePauser",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1145,
                          "src": "32226:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 2124,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32226:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2125,
                      "nodeType": "ExpressionStatement",
                      "src": "32226:22:0"
                    }
                  ]
                },
                "documentation": "Allow the owner to remove a pauser",
                "id": 2127,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2112,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2111,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1269,
                      "src": "32142:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32142:9:0"
                  }
                ],
                "name": "removePauser",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2110,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2109,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 2127,
                      "src": "32118:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2108,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "32118:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32117:17:0"
                },
                "returnParameters": {
                  "id": 2113,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32152:0:0"
                },
                "scope": 2457,
                "src": "32096:160:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2135,
                  "nodeType": "Block",
                  "src": "32382:44:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2132,
                          "name": "withdrawals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1625,
                          "src": "32400:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                            "typeString": "address payable[] storage ref"
                          }
                        },
                        "id": 2133,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "32400:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 2131,
                      "id": 2134,
                      "nodeType": "Return",
                      "src": "32393:25:0"
                    }
                  ]
                },
                "documentation": "returns the number of withdrawals pending.",
                "id": 2136,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "numberWithdrawalsPending",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2128,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32349:2:0"
                },
                "returnParameters": {
                  "id": 2131,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2130,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2136,
                      "src": "32373:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2129,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "32373:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32372:9:0"
                },
                "scope": 2457,
                "src": "32316:110:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2144,
                  "nodeType": "Block",
                  "src": "32566:53:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2141,
                          "name": "participantAddresses",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1618,
                          "src": "32584:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage",
                            "typeString": "address[] storage ref"
                          }
                        },
                        "id": 2142,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "32584:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 2140,
                      "id": 2143,
                      "nodeType": "Return",
                      "src": "32577:34:0"
                    }
                  ]
                },
                "documentation": "returns the number of pending buys, waiting for token issuance.",
                "id": 2145,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "numberBuysPending",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2137,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32533:2:0"
                },
                "returnParameters": {
                  "id": 2140,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2139,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2145,
                      "src": "32557:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2138,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "32557:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32556:9:0"
                },
                "scope": 2457,
                "src": "32507:112:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2203,
                  "nodeType": "Block",
                  "src": "32907:521:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 2159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2155,
                              "name": "participant",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2147,
                              "src": "32925:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 2157,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "32948:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 2156,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "32940:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 2158,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "32940:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "src": "32925:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2154,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2461,
                          "src": "32918:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2160,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32918:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2161,
                      "nodeType": "ExpressionStatement",
                      "src": "32918:33:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2166,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2163,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "33017:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2164,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "33017:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 2165,
                              "name": "minimumWei",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1628,
                              "src": "33030:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "33017:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d696e696d756d20776569206e6f74206d6574",
                            "id": 2167,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "33042:21:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_fce325dc64094dfce5feb70fbc711fe079254f24e503e2ce134ebd18da6b6d4e",
                              "typeString": "literal_string \"Minimum wei not met\""
                            },
                            "value": "Minimum wei not met"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_fce325dc64094dfce5feb70fbc711fe079254f24e503e2ce134ebd18da6b6d4e",
                              "typeString": "literal_string \"Minimum wei not met\""
                            }
                          ],
                          "id": 2162,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "33009:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33009:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2169,
                      "nodeType": "ExpressionStatement",
                      "src": "33009:55:0"
                    },
                    {
                      "assignments": [
                        2171
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2171,
                          "name": "pendingAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 2203,
                          "src": "33077:21:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2170,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "33077:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2175,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 2172,
                          "name": "pendingBuys",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1615,
                          "src": "33101:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 2174,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 2173,
                          "name": "participant",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2147,
                          "src": "33113:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "33101:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "33077:48:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2178,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2176,
                          "name": "pendingAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2171,
                          "src": "33140:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2177,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "33157:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "33140:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 2186,
                      "nodeType": "IfStatement",
                      "src": "33136:89:0",
                      "trueBody": {
                        "id": 2185,
                        "nodeType": "Block",
                        "src": "33160:65:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2182,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2147,
                                  "src": "33201:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2179,
                                  "name": "participantAddresses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1618,
                                  "src": "33175:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                    "typeString": "address[] storage ref"
                                  }
                                },
                                "id": 2181,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "push",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "33175:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_address_$returns$_t_uint256_$",
                                  "typeString": "function (address) returns (uint256)"
                                }
                              },
                              "id": 2183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "33175:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2184,
                            "nodeType": "ExpressionStatement",
                            "src": "33175:38:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 2187,
                            "name": "pendingBuys",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1615,
                            "src": "33308:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 2189,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 2188,
                            "name": "participant",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2147,
                            "src": "33320:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "33308:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 2192,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2472,
                                "src": "33353:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 2193,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "33353:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2190,
                              "name": "pendingAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2171,
                              "src": "33335:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2191,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 230,
                            "src": "33335:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "33335:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "33308:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2196,
                      "nodeType": "ExpressionStatement",
                      "src": "33308:55:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2198,
                            "name": "participant",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2147,
                            "src": "33397:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2199,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2472,
                              "src": "33410:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 2200,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "value",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "33410:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2197,
                          "name": "DepositReceived",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1669,
                          "src": "33381:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 2201,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33381:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2202,
                      "nodeType": "EmitStatement",
                      "src": "33376:44:0"
                    }
                  ]
                },
                "documentation": "First phase of the 2-part buy, the participant deposits eth and waits\nfor a price to be set so the tokens can be minted.\n@param participant whitelisted buyer.",
                "id": 2204,
                "implemented": true,
                "kind": "function",
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 2150,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2149,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1184,
                      "src": "32877:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32877:13:0"
                  },
                  {
                    "arguments": null,
                    "id": 2152,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2151,
                      "name": "onlyWhitelisted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2456,
                      "src": "32891:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32891:15:0"
                  }
                ],
                "name": "buyTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2148,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2147,
                      "name": "participant",
                      "nodeType": "VariableDeclaration",
                      "scope": 2204,
                      "src": "32847:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2146,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "32847:7:0",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32846:21:0"
                },
                "returnParameters": {
                  "id": 2153,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32907:0:0"
                },
                "scope": 2457,
                "src": "32828:600:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2308,
                  "nodeType": "Block",
                  "src": "33517:880:0",
                  "statements": [
                    {
                      "assignments": [
                        2208
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2208,
                          "name": "numberOfAllocations",
                          "nodeType": "VariableDeclaration",
                          "scope": 2308,
                          "src": "33528:27:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2207,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "33528:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2217,
                      "initialValue": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2212,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2209,
                              "name": "participantAddresses",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1618,
                              "src": "33558:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                "typeString": "address[] storage ref"
                              }
                            },
                            "id": 2210,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "33558:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 2211,
                            "name": "maxAllocationsPerTx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1637,
                            "src": "33589:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "33558:50:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 2215,
                          "name": "maxAllocationsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1637,
                          "src": "33655:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "33558:116:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 2213,
                            "name": "participantAddresses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1618,
                            "src": "33625:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_$dyn_storage",
                              "typeString": "address[] storage ref"
                            }
                          },
                          "id": 2214,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "33625:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "33528:146:0"
                    },
                    {
                      "assignments": [
                        2219
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2219,
                          "name": "ownerAddress",
                          "nodeType": "VariableDeclaration",
                          "scope": 2308,
                          "src": "33695:28:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "typeName": {
                            "id": 2218,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "33695:15:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2226,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 2222,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1260,
                                  "src": "33742:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 2223,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "33742:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2221,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "33734:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint160_$",
                                "typeString": "type(uint160)"
                              },
                              "typeName": "uint160"
                            },
                            "id": 2224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "33734:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          ],
                          "id": 2220,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "33726:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 2225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33726:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "33695:56:0"
                    },
                    {
                      "body": {
                        "id": 2306,
                        "nodeType": "Block",
                        "src": "33812:578:0",
                        "statements": [
                          {
                            "assignments": [
                              2238
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2238,
                                "name": "participant",
                                "nodeType": "VariableDeclaration",
                                "scope": 2306,
                                "src": "33827:19:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "typeName": {
                                  "id": 2237,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "33827:7:0",
                                  "stateMutability": "nonpayable",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2244,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2239,
                                "name": "participantAddresses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1618,
                                "src": "33849:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                  "typeString": "address[] storage ref"
                                }
                              },
                              "id": 2243,
                              "indexExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2242,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 2240,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2228,
                                  "src": "33870:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 2241,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "33874:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "33870:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "33849:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "33827:49:0"
                          },
                          {
                            "assignments": [
                              2246
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2246,
                                "name": "deposit",
                                "nodeType": "VariableDeclaration",
                                "scope": 2306,
                                "src": "33891:15:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2245,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "33891:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2250,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2247,
                                "name": "pendingBuys",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1615,
                                "src": "33909:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 2249,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2248,
                                "name": "participant",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2238,
                                "src": "33921:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "33909:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "33891:42:0"
                          },
                          {
                            "assignments": [
                              2252
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2252,
                                "name": "feeAmount",
                                "nodeType": "VariableDeclaration",
                                "scope": 2306,
                                "src": "33948:17:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2251,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "33948:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2259,
                            "initialValue": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2258,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2255,
                                    "name": "fees",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1631,
                                    "src": "33980:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2253,
                                    "name": "deposit",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2246,
                                    "src": "33968:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2254,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 158,
                                  "src": "33968:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2256,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "33968:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "31303030",
                                "id": 2257,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "33988:4:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000_by_1",
                                  "typeString": "int_const 1000"
                                },
                                "value": "1000"
                              },
                              "src": "33968:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "33948:44:0"
                          },
                          {
                            "assignments": [
                              2261
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2261,
                                "name": "balance",
                                "nodeType": "VariableDeclaration",
                                "scope": 2306,
                                "src": "34007:15:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2260,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "34007:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2266,
                            "initialValue": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2264,
                                  "name": "feeAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2252,
                                  "src": "34037:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2262,
                                  "name": "deposit",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2246,
                                  "src": "34025:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2263,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sub",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 206,
                                "src": "34025:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2265,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34025:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "34007:40:0"
                          },
                          {
                            "assignments": [
                              2268
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2268,
                                "name": "newTokens",
                                "nodeType": "VariableDeclaration",
                                "scope": 2306,
                                "src": "34064:17:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2267,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "34064:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2277,
                            "initialValue": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2271,
                                      "name": "price",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1642,
                                      "src": "34096:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Price_$1649_storage",
                                        "typeString": "struct C10Token.Price storage ref"
                                      }
                                    },
                                    "id": 2272,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "numerator",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1646,
                                    "src": "34096:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2269,
                                    "name": "balance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2261,
                                    "src": "34084:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2270,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 158,
                                  "src": "34084:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2273,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "34084:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2274,
                                  "name": "price",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1642,
                                  "src": "34115:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Price_$1649_storage",
                                    "typeString": "struct C10Token.Price storage ref"
                                  }
                                },
                                "id": 2275,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "denominator",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1648,
                                "src": "34115:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "34084:48:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "34064:68:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 2282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 2278,
                                  "name": "pendingBuys",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1615,
                                  "src": "34147:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 2280,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2279,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2238,
                                  "src": "34159:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "34147:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2281,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "34174:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "34147:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2283,
                            "nodeType": "ExpressionStatement",
                            "src": "34147:28:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2284,
                                  "name": "participantAddresses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1618,
                                  "src": "34190:20:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_storage",
                                    "typeString": "address[] storage ref"
                                  }
                                },
                                "id": 2286,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "pop",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "34190:24:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
                                  "typeString": "function ()"
                                }
                              },
                              "id": 2287,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34190:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2288,
                            "nodeType": "ExpressionStatement",
                            "src": "34190:26:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2292,
                                  "name": "feeAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2252,
                                  "src": "34255:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2289,
                                  "name": "ownerAddress",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2219,
                                  "src": "34233:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "id": 2291,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "transfer",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "34233:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256)"
                                }
                              },
                              "id": 2293,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34233:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2294,
                            "nodeType": "ExpressionStatement",
                            "src": "34233:32:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2296,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2238,
                                  "src": "34287:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2297,
                                  "name": "newTokens",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2268,
                                  "src": "34300:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2295,
                                "name": "mint",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2040,
                                "src": "34282:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,uint256) returns (bool)"
                                }
                              },
                              "id": 2298,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34282:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "id": 2299,
                            "nodeType": "ExpressionStatement",
                            "src": "34282:28:0"
                          },
                          {
                            "eventCall": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2301,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2238,
                                  "src": "34346:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2302,
                                  "name": "newTokens",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2268,
                                  "src": "34359:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 2303,
                                  "name": "balance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2261,
                                  "src": "34370:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 2300,
                                "name": "TokensIssued",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1677,
                                "src": "34333:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                  "typeString": "function (address,uint256,uint256)"
                                }
                              },
                              "id": 2304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34333:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2305,
                            "nodeType": "EmitStatement",
                            "src": "34328:50:0"
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2233,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2231,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2228,
                          "src": "33800:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2232,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "33804:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "33800:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2307,
                      "initializationExpression": {
                        "assignments": [
                          2228
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2228,
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "scope": 2307,
                            "src": "33767:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2227,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "33767:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2230,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 2229,
                          "name": "numberOfAllocations",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2208,
                          "src": "33779:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "33767:31:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2235,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "--",
                          "prefix": false,
                          "src": "33807:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 2234,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2228,
                            "src": "33807:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2236,
                        "nodeType": "ExpressionStatement",
                        "src": "33807:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "33762:628:0"
                    }
                  ]
                },
                "documentation": "Internal function to allocate token.",
                "id": 2309,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "allocateTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2205,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33505:2:0"
                },
                "returnParameters": {
                  "id": 2206,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33517:0:0"
                },
                "scope": 2457,
                "src": "33482:915:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2440,
                  "nodeType": "Block",
                  "src": "34495:1213:0",
                  "statements": [
                    {
                      "assignments": [
                        2313
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2313,
                          "name": "numberOfWithdrawals",
                          "nodeType": "VariableDeclaration",
                          "scope": 2440,
                          "src": "34506:27:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2312,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "34506:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2322,
                      "initialValue": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2317,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2314,
                              "name": "withdrawals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1625,
                              "src": "34536:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                "typeString": "address payable[] storage ref"
                              }
                            },
                            "id": 2315,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "34536:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 2316,
                            "name": "maxWithdrawalsPerTx",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1640,
                            "src": "34558:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "34536:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 2320,
                          "name": "maxWithdrawalsPerTx",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1640,
                          "src": "34615:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "34536:98:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 2318,
                            "name": "withdrawals",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1625,
                            "src": "34594:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                              "typeString": "address payable[] storage ref"
                            }
                          },
                          "id": 2319,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "34594:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "34506:128:0"
                    },
                    {
                      "assignments": [
                        2324
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2324,
                          "name": "ownerAddress",
                          "nodeType": "VariableDeclaration",
                          "scope": 2440,
                          "src": "34647:28:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          },
                          "typeName": {
                            "id": 2323,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "34647:15:0",
                            "stateMutability": "payable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2331,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "id": 2327,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1260,
                                  "src": "34694:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                    "typeString": "function () view returns (address)"
                                  }
                                },
                                "id": 2328,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "34694:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 2326,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "34686:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint160_$",
                                "typeString": "type(uint160)"
                              },
                              "typeName": "uint160"
                            },
                            "id": 2329,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "34686:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint160",
                              "typeString": "uint160"
                            }
                          ],
                          "id": 2325,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "34678:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": "address"
                        },
                        "id": 2330,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "34678:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "34647:56:0"
                    },
                    {
                      "body": {
                        "id": 2438,
                        "nodeType": "Block",
                        "src": "34764:937:0",
                        "statements": [
                          {
                            "assignments": [
                              2343
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2343,
                                "name": "participant",
                                "nodeType": "VariableDeclaration",
                                "scope": 2438,
                                "src": "34779:27:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                },
                                "typeName": {
                                  "id": 2342,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "34779:15:0",
                                  "stateMutability": "payable",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2349,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2344,
                                "name": "withdrawals",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1625,
                                "src": "34809:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                  "typeString": "address payable[] storage ref"
                                }
                              },
                              "id": 2348,
                              "indexExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2347,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 2345,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2333,
                                  "src": "34821:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "-",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "31",
                                  "id": 2346,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "34825:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "34821:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "34809:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "34779:48:0"
                          },
                          {
                            "assignments": [
                              2351
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2351,
                                "name": "tokens",
                                "nodeType": "VariableDeclaration",
                                "scope": 2438,
                                "src": "34842:14:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2350,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "34842:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2355,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2352,
                                "name": "pendingWithdrawals",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1622,
                                "src": "34859:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 2354,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2353,
                                "name": "participant",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2343,
                                "src": "34878:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "34859:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "34842:48:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2359,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 2357,
                                    "name": "tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2351,
                                    "src": "34914:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": ">",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "hexValue": "30",
                                    "id": 2358,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "34923:1:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "34914:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "id": 2356,
                                "name": "assert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2461,
                                "src": "34907:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                                  "typeString": "function (bool) pure"
                                }
                              },
                              "id": 2360,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "34907:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2361,
                            "nodeType": "ExpressionStatement",
                            "src": "34907:18:0"
                          },
                          {
                            "assignments": [
                              2363
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2363,
                                "name": "withdrawValue",
                                "nodeType": "VariableDeclaration",
                                "scope": 2438,
                                "src": "34990:21:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2362,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "34990:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2372,
                            "initialValue": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2371,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2366,
                                      "name": "price",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1642,
                                      "src": "35025:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Price_$1649_storage",
                                        "typeString": "struct C10Token.Price storage ref"
                                      }
                                    },
                                    "id": 2367,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "denominator",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1648,
                                    "src": "35025:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2364,
                                    "name": "tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2351,
                                    "src": "35014:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2365,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 158,
                                  "src": "35014:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2368,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "35014:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2369,
                                  "name": "price",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1642,
                                  "src": "35046:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Price_$1649_storage",
                                    "typeString": "struct C10Token.Price storage ref"
                                  }
                                },
                                "id": 2370,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "numerator",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 1646,
                                "src": "35046:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35014:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "34990:71:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 2377,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 2373,
                                  "name": "pendingWithdrawals",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1622,
                                  "src": "35078:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 2375,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 2374,
                                  "name": "participant",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2343,
                                  "src": "35097:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "35078:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 2376,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "35112:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "35078:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2378,
                            "nodeType": "ExpressionStatement",
                            "src": "35078:35:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2379,
                                  "name": "withdrawals",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1625,
                                  "src": "35128:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                                    "typeString": "address payable[] storage ref"
                                  }
                                },
                                "id": 2381,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "pop",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "35128:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypop_nonpayable$__$returns$__$",
                                  "typeString": "function ()"
                                }
                              },
                              "id": 2382,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "35128:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2383,
                            "nodeType": "ExpressionStatement",
                            "src": "35128:17:0"
                          },
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2389,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2385,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2514,
                                      "src": "35174:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_C10Token_$2457",
                                        "typeString": "contract C10Token"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_C10Token_$2457",
                                        "typeString": "contract C10Token"
                                      }
                                    ],
                                    "id": 2384,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "35166:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 2386,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "35166:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "id": 2387,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "balance",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "35166:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2388,
                                "name": "withdrawValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2363,
                                "src": "35191:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "35166:38:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "id": 2436,
                              "nodeType": "Block",
                              "src": "35542:148:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2426,
                                        "name": "participant",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2343,
                                        "src": "35566:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 2427,
                                        "name": "tokens",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2351,
                                        "src": "35579:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 2425,
                                      "name": "mint",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2040,
                                      "src": "35561:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                        "typeString": "function (address,uint256) returns (bool)"
                                      }
                                    },
                                    "id": 2428,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35561:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "id": 2429,
                                  "nodeType": "ExpressionStatement",
                                  "src": "35561:25:0"
                                },
                                {
                                  "eventCall": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2431,
                                        "name": "participant",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2343,
                                        "src": "35619:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 2432,
                                        "name": "tokens",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2351,
                                        "src": "35632:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "hexValue": "30",
                                        "id": 2433,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "35640:1:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 2430,
                                      "name": "Withdraw",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1691,
                                      "src": "35610:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256,uint256)"
                                      }
                                    },
                                    "id": 2434,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35610:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 2435,
                                  "nodeType": "EmitStatement",
                                  "src": "35605:37:0"
                                }
                              ]
                            },
                            "id": 2437,
                            "nodeType": "IfStatement",
                            "src": "35162:528:0",
                            "trueBody": {
                              "id": 2424,
                              "nodeType": "Block",
                              "src": "35206:317:0",
                              "statements": [
                                {
                                  "assignments": [
                                    2391
                                  ],
                                  "declarations": [
                                    {
                                      "constant": false,
                                      "id": 2391,
                                      "name": "feeAmount",
                                      "nodeType": "VariableDeclaration",
                                      "scope": 2424,
                                      "src": "35225:17:0",
                                      "stateVariable": false,
                                      "storageLocation": "default",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "typeName": {
                                        "id": 2390,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "35225:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "value": null,
                                      "visibility": "internal"
                                    }
                                  ],
                                  "id": 2398,
                                  "initialValue": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2397,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 2394,
                                          "name": "fees",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1631,
                                          "src": "35263:4:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": null,
                                          "id": 2392,
                                          "name": "withdrawValue",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 2363,
                                          "src": "35245:13:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "id": 2393,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "mul",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 158,
                                        "src": "35245:17:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                                        }
                                      },
                                      "id": 2395,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "35245:23:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "/",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "hexValue": "31303030",
                                      "id": 2396,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "number",
                                      "lValueRequested": false,
                                      "nodeType": "Literal",
                                      "src": "35271:4:0",
                                      "subdenomination": null,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000_by_1",
                                        "typeString": "int_const 1000"
                                      },
                                      "value": "1000"
                                    },
                                    "src": "35245:30:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "VariableDeclarationStatement",
                                  "src": "35225:50:0"
                                },
                                {
                                  "assignments": [
                                    2400
                                  ],
                                  "declarations": [
                                    {
                                      "constant": false,
                                      "id": 2400,
                                      "name": "balance",
                                      "nodeType": "VariableDeclaration",
                                      "scope": 2424,
                                      "src": "35294:15:0",
                                      "stateVariable": false,
                                      "storageLocation": "default",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "typeName": {
                                        "id": 2399,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "35294:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "value": null,
                                      "visibility": "internal"
                                    }
                                  ],
                                  "id": 2405,
                                  "initialValue": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2403,
                                        "name": "feeAmount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2391,
                                        "src": "35330:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2401,
                                        "name": "withdrawValue",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2363,
                                        "src": "35312:13:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 2402,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sub",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 206,
                                      "src": "35312:17:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 2404,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35312:28:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "VariableDeclarationStatement",
                                  "src": "35294:46:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2409,
                                        "name": "balance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2400,
                                        "src": "35382:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2406,
                                        "name": "participant",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2343,
                                        "src": "35361:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "id": 2408,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "transfer",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "35361:20:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                        "typeString": "function (uint256)"
                                      }
                                    },
                                    "id": 2410,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35361:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 2411,
                                  "nodeType": "ExpressionStatement",
                                  "src": "35361:29:0"
                                },
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2415,
                                        "name": "feeAmount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2391,
                                        "src": "35433:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2412,
                                        "name": "ownerAddress",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2324,
                                        "src": "35411:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "id": 2414,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "transfer",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "35411:21:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                        "typeString": "function (uint256)"
                                      }
                                    },
                                    "id": 2416,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35411:32:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 2417,
                                  "nodeType": "ExpressionStatement",
                                  "src": "35411:32:0"
                                },
                                {
                                  "eventCall": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2419,
                                        "name": "participant",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2343,
                                        "src": "35478:11:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 2420,
                                        "name": "tokens",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2351,
                                        "src": "35491:6:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      {
                                        "argumentTypes": null,
                                        "id": 2421,
                                        "name": "balance",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2400,
                                        "src": "35499:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "id": 2418,
                                      "name": "Withdraw",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1691,
                                      "src": "35469:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                                        "typeString": "function (address,uint256,uint256)"
                                      }
                                    },
                                    "id": 2422,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "35469:38:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_tuple$__$",
                                      "typeString": "tuple()"
                                    }
                                  },
                                  "id": 2423,
                                  "nodeType": "EmitStatement",
                                  "src": "35464:43:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2338,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2336,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2333,
                          "src": "34752:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2337,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "34756:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "34752:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2439,
                      "initializationExpression": {
                        "assignments": [
                          2333
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2333,
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "scope": 2439,
                            "src": "34719:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2332,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "34719:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2335,
                        "initialValue": {
                          "argumentTypes": null,
                          "id": 2334,
                          "name": "numberOfWithdrawals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2313,
                          "src": "34731:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "34719:31:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2340,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "--",
                          "prefix": false,
                          "src": "34759:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 2339,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2333,
                            "src": "34759:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2341,
                        "nodeType": "ExpressionStatement",
                        "src": "34759:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "34714:987:0"
                    }
                  ]
                },
                "documentation": "Internal function to process withdrawals.",
                "id": 2441,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "processWithdrawals",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2310,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34483:2:0"
                },
                "returnParameters": {
                  "id": 2311,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34495:0:0"
                },
                "scope": 2457,
                "src": "34456:1252:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2455,
                  "nodeType": "Block",
                  "src": "35743:125:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2448,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2472,
                                  "src": "35813:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 2449,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "35813:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2445,
                                    "name": "whitelistContract",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1644,
                                    "src": "35780:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "id": 2444,
                                  "name": "InvictusWhitelist",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1592,
                                  "src": "35762:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_InvictusWhitelist_$1592_$",
                                    "typeString": "type(contract InvictusWhitelist)"
                                  }
                                },
                                "id": 2446,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "35762:36:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_InvictusWhitelist_$1592",
                                  "typeString": "contract InvictusWhitelist"
                                }
                              },
                              "id": 2447,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "isWhitelisted",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 1476,
                              "src": "35762:50:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_bool_$",
                                "typeString": "function (address) view external returns (bool)"
                              }
                            },
                            "id": 2450,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "35762:62:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4d7573742062652077686974656c6973746564",
                            "id": 2451,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "35826:21:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_1d0bd18eb48a9951c0cd7c38443e03ac741dbde64a6a5e98674ab1d87be7af27",
                              "typeString": "literal_string \"Must be whitelisted\""
                            },
                            "value": "Must be whitelisted"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_1d0bd18eb48a9951c0cd7c38443e03ac741dbde64a6a5e98674ab1d87be7af27",
                              "typeString": "literal_string \"Must be whitelisted\""
                            }
                          ],
                          "id": 2443,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            2475,
                            2476
                          ],
                          "referencedDeclaration": 2476,
                          "src": "35754:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 2452,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "35754:94:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2453,
                      "nodeType": "ExpressionStatement",
                      "src": "35754:94:0"
                    },
                    {
                      "id": 2454,
                      "nodeType": "PlaceholderStatement",
                      "src": "35859:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 2456,
                "name": "onlyWhitelisted",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 2442,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "35740:2:0"
                },
                "src": "35716:152:0",
                "visibility": "internal"
              }
            ],
            "scope": 2458,
            "src": "25051:10820:0"
          }
        ],
        "src": "346:35525:0"
      },
      "id": 0
    }
  }
}