{
  "contracts": {
    "source code": {
      "Asiandragon": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60c0604052600460808190527f48312e300000000000000000000000000000000000000000000000000000000060a090815261003e91600391906100a5565b5034801561004b57600080fd5b5066b1a2bc2ec50000600181905533600081815260208181526040808320859055805194855251929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a3610140565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e657805160ff1916838001178555610113565b82800160010185558215610113579182015b828111156101135782518255916020019190600101906100f8565b5061011f929150610123565b5090565b61013d91905b8082111561011f5760008155600101610129565b90565b6109538061014f6000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100d4578063095ea7b31461015e57806318160ddd1461019657806323b872dd146101bd5780632e1a7d4d146101e75780632ff2e9dc14610201578063313ce5671461021657806354fd4d5014610241578063661884631461025657806370a082311461027a57806395d89b411461029b578063a9059cbb146102b0578063d73dd623146102d4578063dd62ed3e146102f8575b600080fd5b3480156100e057600080fd5b506100e961031f565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561012357818101518382015260200161010b565b50505050905090810190601f1680156101505780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561016a57600080fd5b50610182600160a060020a0360043516602435610356565b604080519115158252519081900360200190f35b3480156101a257600080fd5b506101ab6103bc565b60408051918252519081900360200190f35b3480156101c957600080fd5b50610182600160a060020a03600435811690602435166044356103c2565b3480156101f357600080fd5b506101ff600435610539565b005b34801561020d57600080fd5b506101ab61057d565b34801561022257600080fd5b5061022b610588565b6040805160ff9092168252519081900360200190f35b34801561024d57600080fd5b506100e961058d565b34801561026257600080fd5b50610182600160a060020a036004351660243561061b565b34801561028657600080fd5b506101ab600160a060020a036004351661070b565b3480156102a757600080fd5b506100e9610726565b3480156102bc57600080fd5b50610182600160a060020a036004351660243561075d565b3480156102e057600080fd5b50610182600160a060020a036004351660243561083e565b34801561030457600080fd5b506101ab600160a060020a03600435811690602435166108d7565b60408051808201909152600c81527f417369616e20447261676f6e0000000000000000000000000000000000000000602082015281565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a03831615156103d957600080fd5b600160a060020a0384166000908152602081905260409020548211156103fe57600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561042e57600080fd5b600160a060020a038416600090815260208190526040902054610457908363ffffffff61090216565b600160a060020a03808616600090815260208190526040808220939093559085168152205461048c908363ffffffff61091416565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546104ce908363ffffffff61090216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b33600090815260208190526040902054811161057a5760405133908290600081818185875af150505050336000908152602081905260409020805482900390555b50565b66b1a2bc2ec5000081565b600881565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156106135780601f106105e857610100808354040283529160200191610613565b820191906000526020600020905b8154815290600101906020018083116105f657829003601f168201915b505050505081565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561067057336000908152600260209081526040808320600160a060020a03881684529091528120556106a5565b610680818463ffffffff61090216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b60408051808201909152600281527f4144000000000000000000000000000000000000000000000000000000000000602082015281565b6000600160a060020a038316151561077457600080fd5b3360009081526020819052604090205482111561079057600080fd5b336000908152602081905260409020546107b0908363ffffffff61090216565b3360009081526020819052604080822092909255600160a060020a038516815220546107e2908363ffffffff61091416565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610872908363ffffffff61091416565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561090e57fe5b50900390565b8181018281101561092157fe5b929150505600a165627a7a723058201f9f4d2207505afabc568a3545af217969f3f1cdacea4331739ff30ffb9fe3d80029",
            "opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x4 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH32 0x48312E3000000000000000000000000000000000000000000000000000000000 PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH2 0x3E SWAP2 PUSH1 0x3 SWAP2 SWAP1 PUSH2 0xA5 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH2 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH7 0xB1A2BC2EC50000 PUSH1 0x1 DUP2 SWAP1 SSTORE CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH2 0x140 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0xE6 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x113 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x113 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x113 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xF8 JUMP JUMPDEST POP PUSH2 0x11F SWAP3 SWAP2 POP PUSH2 0x123 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x13D SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x11F JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x129 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x953 DUP1 PUSH2 0x14F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x6FDDE03 DUP2 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x1E7 JUMPI DUP1 PUSH4 0x2FF2E9DC EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x216 JUMPI DUP1 PUSH4 0x54FD4D50 EQ PUSH2 0x241 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x27A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2B0 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x2D4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2F8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x31F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x123 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x10B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x150 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x356 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AB PUSH2 0x3BC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x3C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FF PUSH1 0x4 CALLDATALOAD PUSH2 0x539 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AB PUSH2 0x57D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x222 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22B PUSH2 0x588 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x58D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x61B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x286 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x70B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x726 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x75D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x182 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x83E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1AB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x8D7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xC DUP2 MSTORE PUSH32 0x417369616E20447261676F6E0000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x3D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x457 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x902 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x48C SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x914 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0x4CE SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x902 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 GT PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD CALLER SWAP1 DUP3 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL POP POP POP POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH7 0xB1A2BC2EC50000 DUP2 JUMP JUMPDEST PUSH1 0x8 DUP2 JUMP JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x613 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x5E8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x613 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x5F6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x670 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0x6A5 JUMP JUMPDEST PUSH2 0x680 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x902 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH32 0x4144000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x774 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x790 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x7B0 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x902 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x7E2 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x914 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x872 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x914 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x90E JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x921 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0x1f SWAP16 0x4d 0x22 SMOD POP GAS STATICCALL 0xbc JUMP DUP11 CALLDATALOAD GASLIMIT 0xaf 0x21 PUSH26 0x69F3F1CDACEA4331739FF30FFB9FE3D800290000000000000000 ",
            "sourceMap": "9909:30:0:-;9774:791;9909:30;;9774:791;9909:30;;;;;;;;;;;;;;:::i;:::-;;10133:160;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;10087:37:0;10161:12;:29;;;10206:10;10197:8;:20;;;;;;;;;;;:37;;;10246:41;;;;;;10206:10;;10197:8;;10246:41;;;;;;;;;;9774:791;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9774:791:0;;;-1:-1:-1;9774:791:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.    * Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender.    * approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender.    * approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}},\"withdraw(uint256)\":{\"details\":\"Reentrancy.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"Asiandragon\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      },
      "BasicToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5061027c806100206000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318160ddd811461005b57806370a0823114610082578063a9059cbb146100b0575b600080fd5b34801561006757600080fd5b506100706100f5565b60408051918252519081900360200190f35b34801561008e57600080fd5b5061007073ffffffffffffffffffffffffffffffffffffffff600435166100fb565b3480156100bc57600080fd5b506100e173ffffffffffffffffffffffffffffffffffffffff60043516602435610123565b604080519115158252519081900360200190f35b60015490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b600073ffffffffffffffffffffffffffffffffffffffff8316151561014757600080fd5b3360009081526020819052604090205482111561016357600080fd5b33600090815260208190526040902054610183908363ffffffff61022b16565b336000908152602081905260408082209290925573ffffffffffffffffffffffffffffffffffffffff8516815220546101c2908363ffffffff61023d16565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282111561023757fe5b50900390565b8181018281101561024a57fe5b929150505600a165627a7a723058204f89e16841c758b94b66eae699c618af517e341076aa3e3d0f02722fc60653fd0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x18160DDD DUP2 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xB0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0xFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x123 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x183 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x22B AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1C2 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x23D AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x237 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x24A JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0x4f DUP10 0xe1 PUSH9 0x41C758B94B66EAE699 0xc6 XOR 0xaf MLOAD PUSH31 0x341076AA3E3D0F02722FC60653FD0029000000000000000000000000000000 ",
            "sourceMap": "4138:1091:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4138:1091:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"totalSupply()\":{\"details\":\"total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"title\":\"Basic token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"BasicToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      },
      "ERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "ERC20Basic": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "PublicData": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6064600055603260015560c0604052600360808190527f666f6f000000000000000000000000000000000000000000000000000000000060a0908152610048916002919061005b565b5034801561005557600080fd5b506100f6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061009c57805160ff19168380011785556100c9565b828001600101855582156100c9579182015b828111156100c95782518255916020019190600101906100ae565b506100d59291506100d9565b5090565b6100f391905b808211156100d557600081556001016100df565b90565b6099806101046000396000f300608060405260043610603e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416637633a22c81146043575b600080fd5b348015604e57600080fd5b5060556067565b60408051918252519081900360200190f35b600054815600a165627a7a72305820da84c359385abeb96cf9f1c4dfc4a9c947ab15427d174ab012f740a77d91a85c0029",
            "opcodes": "PUSH1 0x64 PUSH1 0x0 SSTORE PUSH1 0x32 PUSH1 0x1 SSTORE PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x3 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH32 0x666F6F0000000000000000000000000000000000000000000000000000000000 PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH2 0x48 SWAP2 PUSH1 0x2 SWAP2 SWAP1 PUSH2 0x5B JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH2 0x55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF6 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x9C JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0xC9 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0xC9 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xC9 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xAE JUMP JUMPDEST POP PUSH2 0xD5 SWAP3 SWAP2 POP PUSH2 0xD9 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0xF3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xD5 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xDF JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x99 DUP1 PUSH2 0x104 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3E JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x7633A22C DUP2 EQ PUSH1 0x43 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH1 0x4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x55 PUSH1 0x67 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xda DUP5 0xc3 MSIZE CODESIZE GAS 0xbe 0xb9 PUSH13 0xF9F1C4DFC4A9C947AB15427D17 0x4a 0xb0 SLT 0xf7 BLOCKHASH 0xa7 PUSH30 0x91A85C002900000000000000000000000000000000000000000000000000 ",
            "sourceMap": "1321:3:0:-;1300:24;;1352:2;1331:23;;1361:29;1273:121;1361:29;;1273:121;1361:29;;;;;;;;;;;;;;:::i;:::-;;1273:121;8:9:-1;5:2;;;30:1;27;20:12;5:2;1273:121:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1273:121:0;;;-1:-1:-1;1273:121:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"health\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"PublicData\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      },
      "ReentrancyGuard": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "SafeMath": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820f4a8bbf8b240e8d44ec3915bd48db514de3781cdb2b040a2b649d71efd667d4e0029",
            "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DELEGATECALL 0xa8 0xbb 0xf8 0xb2 BLOCKHASH 0xe8 0xd4 0x4e 0xc3 SWAP2 JUMPDEST 0xd4 DUP14 0xb5 EQ 0xde CALLDATACOPY DUP2 0xcd 0xb2 0xb0 BLOCKHASH LOG2 0xb6 0x49 0xd7 0x1e REVERT PUSH7 0x7D4E0029000000 ",
            "sourceMap": "2090:1056:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{},\"title\":\"SafeMath\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      },
      "StandardToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b506106b3806100206000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009257806318160ddd146100ca57806323b872dd146100f1578063661884631461011b57806370a082311461013f578063a9059cbb14610160578063d73dd62314610184578063dd62ed3e146101a8575b600080fd5b34801561009e57600080fd5b506100b6600160a060020a03600435166024356101cf565b604080519115158252519081900360200190f35b3480156100d657600080fd5b506100df610235565b60408051918252519081900360200190f35b3480156100fd57600080fd5b506100b6600160a060020a036004358116906024351660443561023b565b34801561012757600080fd5b506100b6600160a060020a03600435166024356103b2565b34801561014b57600080fd5b506100df600160a060020a03600435166104a2565b34801561016c57600080fd5b506100b6600160a060020a03600435166024356104bd565b34801561019057600080fd5b506100b6600160a060020a036004351660243561059e565b3480156101b457600080fd5b506100df600160a060020a0360043581169060243516610637565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b6000600160a060020a038316151561025257600080fd5b600160a060020a03841660009081526020819052604090205482111561027757600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156102a757600080fd5b600160a060020a0384166000908152602081905260409020546102d0908363ffffffff61066216565b600160a060020a038086166000908152602081905260408082209390935590851681522054610305908363ffffffff61067416565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610347908363ffffffff61066216565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a03861684529091528120548083111561040757336000908152600260209081526040808320600160a060020a038816845290915281205561043c565b610417818463ffffffff61066216565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a03831615156104d457600080fd5b336000908152602081905260409020548211156104f057600080fd5b33600090815260208190526040902054610510908363ffffffff61066216565b3360009081526020819052604080822092909255600160a060020a03851681522054610542908363ffffffff61067416565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546105d2908363ffffffff61067416565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561066e57fe5b50900390565b8181018281101561068157fe5b929150505600a165627a7a72305820575438d83dc098e83f89188833a80f85619ef5a083387761585ae6b62c4aaba60029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6B3 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8D JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH2 0x235 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x23B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x3B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x4A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x59E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x637 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x252 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2D0 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x662 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x305 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x674 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0x347 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x662 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x407 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0x43C JUMP JUMPDEST PUSH2 0x417 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x662 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x4D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x4F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x510 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x662 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x542 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x674 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x5D2 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x674 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x66E JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x681 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 JUMPI SLOAD CODESIZE 0xd8 RETURNDATASIZE 0xc0 SWAP9 0xe8 0x3f DUP10 XOR DUP9 CALLER 0xa8 0xf DUP6 PUSH2 0x9EF5 LOG0 DUP4 CODESIZE PUSH24 0x61585AE6B62C4AABA6002900000000000000000000000000 ",
            "sourceMap": "5511:3771:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5511:3771:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.    * Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender.    * approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender.    * approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Standard ERC20 token \"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"StandardToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      },
      "auction": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b50610162806100206000396000f30060806040526004361061004b5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663110f887481146100505780631998aeef14610067575b600080fd5b34801561005c57600080fd5b5061006561006f565b005b6100656100b4565b33600081815260026020526040808220805490839055905190929183156108fc02918491818181858888f193505050501580156100b0573d6000803e3d6000fd5b5050565b6001543410156100c357600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff1615610111576001546000805473ffffffffffffffffffffffffffffffffffffffff168152600260205260409020805490910190555b6000805473ffffffffffffffffffffffffffffffffffffffff191633179055346001555600a165627a7a7230582086f7301119be075441342128e28b9fb22628fe0819134a7a0702d36f3d13f42e0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x162 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x110F8874 DUP2 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0x1998AEEF EQ PUSH2 0x67 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x6F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x65 PUSH2 0xB4 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 DUP4 ISZERO PUSH2 0x8FC MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0xB0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD CALLVALUE LT ISZERO PUSH2 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x111 JUMPI PUSH1 0x1 SLOAD PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND CALLER OR SWAP1 SSTORE CALLVALUE PUSH1 0x1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DUP7 0xf7 ADDRESS GT NOT 0xbe SMOD SLOAD COINBASE CALLVALUE 0x21 0x28 0xe2 DUP12 SWAP16 0xb2 0x26 0x28 INVALID ADDMOD NOT SGT 0x4a PUSH27 0x702D36F3D13F42E00290000000000000000000000000000000000 ",
            "sourceMap": "1398:594:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1398:594:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"withdrawRefund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"bid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"source code\":\"auction\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"source code\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2019-01-12\\n\\n*/\\n\\n\\n\\npragma solidity 0.4.25;\\n\\n\\n\\n// ----------------------------------------------------------------------------\\n\\n// 'ADG' token contract\\n\\n//\\n\\n//\\n\\n// Symbol      : AD\\n\\n// Name        : ASIAN DRAGON - A REVISION OF ASIAN DRAGON COIN (ADGN)\\n\\n// Total supply: 500000000 - 500,000,000 - 5 Hundred Million\\n\\n// \\n\\n//\\n\\n// \\n\\n//\\n\\n// (c) all rights reserve 2018.\\n\\n// ----------------------------------------------------------------------------\\n\\n\\n\\ncontract ReentrancyGuard {\\n\\n  uint256 private _guardCounter;\\n\\n\\n\\n  constructor() internal {\\n\\n    // The counter starts at one to prevent changing it from zero to a non-zero value, which is a more expensive operation.\\n\\n    _guardCounter = 1;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Prevents a contract from calling itself, directly or indirectly.\\n\\n   * Calling a `nonReentrant` function from another `nonReentrant`\\n\\n   * function is not supported. It is possible to prevent this from happening\\n\\n   * by making the `nonReentrant` function external, and make it call a\\n\\n   * `private` function that does the actual work.\\n\\n   */\\n\\n  modifier nonReentrant() {\\n\\n    _guardCounter += 1;\\n\\n    uint256 localCounter = _guardCounter;\\n\\n    _;\\n\\n    require(localCounter == _guardCounter);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract PublicData {\\n\\n    uint public health = 100;\\n\\n    uint internal mana = 50;\\n\\n    string private secret = \\\"foo\\\";\\n\\n}\\n\\n\\n\\ncontract auction {\\n\\n    address highestBidder;\\n\\n    uint highestBid;\\n\\n    mapping(address => uint) refunds;\\n\\n\\n\\n    function bid() payable external {\\n\\n        require(msg.value >= highestBid);\\n\\n\\n\\n        if (highestBidder != address(0)) {\\n\\n            refunds[highestBidder] += highestBid; // record the refund that this user can claim\\n\\n        }\\n\\n\\n\\n        highestBidder = msg.sender;\\n\\n        highestBid = msg.value;\\n\\n    }\\n\\n\\n\\n    function withdrawRefund() external {\\n\\n        uint refund = refunds[msg.sender];\\n\\n        refunds[msg.sender] = 0;\\n\\n        msg.sender.transfer(refund);\\n\\n    }\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    if (a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n    c = a * b;\\n\\n    assert(c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return a / b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n\\n    c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address owner, address spender) public view returns (uint256);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n\\n  function approve(address spender, uint256 value) public returns (bool);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) balances;\\n\\n\\n\\n  uint256 totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[msg.sender]);\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * @dev https://github.com/ethereum/EIPs/issues/20\\n\\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\\n\\n    require(_to != address(0));\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   *\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(address _owner, address _spender) public view returns (uint256) {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   *\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\\n\\n    uint oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue > oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Asian Dragon Coin - A revision from Previous ADGN Deployed\\n\\n * @dev Asian Dragon Coin ERC20 token. Implemented as an Solidity StandardToken.\\n\\n */\\n\\n\\n\\n/** Public variables of the token */\\n\\n\\n\\n /**\\n\\n NOTE:\\n\\n The following variables are OPTIONAL vanities. One does not have to include them.\\n\\n They allow one to customise the token contract & in no way influences the core functionality.\\n\\n Some wallets/interfaces might not even bother to look at this information.\\n\\n */\\n\\n \\n\\n \\n\\n\\n\\ncontract Asiandragon is StandardToken {\\n\\n\\n\\n  string public constant name = \\\"Asian Dragon\\\";\\n\\n  string public constant symbol = \\\"AD\\\";\\n\\n  string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\\n\\n  uint8 public constant decimals = 8;\\n\\n  \\n\\n  uint256 public constant INITIAL_SUPPLY = 500000000 * (10 ** uint256(decimals));\\n\\n  \\n\\n  constructor() public {\\n\\n    totalSupply_ = INITIAL_SUPPLY;\\n\\n    balances[msg.sender] = INITIAL_SUPPLY;\\n\\n    emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n /**\\n\\n  * @dev Reentrancy.\\n\\n  */\\n\\n  \\n// <yes> Reentrancy\\nfunction withdraw(uint _amount) public {\\n\\n  if(balances[msg.sender] >= _amount) {\\n\\n    if(msg.sender.call.value(_amount)()) {\\n\\n      _amount;\\n\\n    }\\n\\n    balances[msg.sender] -= _amount;\\n\\n    }\\n\\n    \\n\\n\\n\\n}\\n\\n}\",\"keccak256\":\"0xa01438d205cfaaf1c2eb8e659675ba240cfbc6d5876b57f7c44a8b2b62c78260\"}},\"version\":1}"
      }
    }
  },
  "sources": {
    "source code": {
      "ast": {
        "absolutePath": "source code",
        "exportedSymbols": {
          "Asiandragon": [
            684
          ],
          "BasicToken": [
            363
          ],
          "ERC20": [
            271
          ],
          "ERC20Basic": [
            231
          ],
          "PublicData": [
            40
          ],
          "ReentrancyGuard": [
            30
          ],
          "SafeMath": [
            201
          ],
          "StandardToken": [
            605
          ],
          "auction": [
            109
          ]
        },
        "id": 685,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "0.4",
              ".25"
            ],
            "nodeType": "PragmaDirective",
            "src": "71:23:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 30,
            "linearizedBaseContracts": [
              30
            ],
            "name": "ReentrancyGuard",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 3,
                "name": "_guardCounter",
                "nodeType": "VariableDeclaration",
                "scope": 30,
                "src": "531:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "531:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 10,
                  "nodeType": "Block",
                  "src": "590:155:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 8,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 6,
                          "name": "_guardCounter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "722:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 7,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "738:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "722:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 9,
                      "nodeType": "ExpressionStatement",
                      "src": "722:17:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 11,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 4,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "578:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 5,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "590:0:0"
                },
                "scope": 30,
                "src": "567:178:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 28,
                  "nodeType": "Block",
                  "src": "1137:127:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 15,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 13,
                          "name": "_guardCounter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "1144:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 14,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1161:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "src": "1144:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 16,
                      "nodeType": "ExpressionStatement",
                      "src": "1144:18:0"
                    },
                    {
                      "assignments": [
                        18
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 18,
                          "name": "localCounter",
                          "nodeType": "VariableDeclaration",
                          "scope": 29,
                          "src": "1169:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 17,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1169:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 20,
                      "initialValue": {
                        "argumentTypes": null,
                        "id": 19,
                        "name": "_guardCounter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3,
                        "src": "1192:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1169:36:0"
                    },
                    {
                      "id": 21,
                      "nodeType": "PlaceholderStatement",
                      "src": "1212:1:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 25,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 23,
                              "name": "localCounter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 18,
                              "src": "1228:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 24,
                              "name": "_guardCounter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3,
                              "src": "1244:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1228:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 22,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "1220:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 26,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1220:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 27,
                      "nodeType": "ExpressionStatement",
                      "src": "1220:38:0"
                    }
                  ]
                },
                "documentation": "@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",
                "id": 29,
                "name": "nonReentrant",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1134:2:0"
                },
                "src": "1113:151:0",
                "visibility": "internal"
              }
            ],
            "scope": 685,
            "src": "501:766:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 40,
            "linearizedBaseContracts": [
              40
            ],
            "name": "PublicData",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 33,
                "name": "health",
                "nodeType": "VariableDeclaration",
                "scope": 40,
                "src": "1300:24:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 31,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1300:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "313030",
                  "id": 32,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1321:3:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_100_by_1",
                    "typeString": "int_const 100"
                  },
                  "value": "100"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 36,
                "name": "mana",
                "nodeType": "VariableDeclaration",
                "scope": 40,
                "src": "1331:23:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 34,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1331:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "3530",
                  "id": 35,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1352:2:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_50_by_1",
                    "typeString": "int_const 50"
                  },
                  "value": "50"
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 39,
                "name": "secret",
                "nodeType": "VariableDeclaration",
                "scope": 40,
                "src": "1361:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 37,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "1361:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "666f6f",
                  "id": 38,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "1385:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_41b1a0649752af1b28b3dc29a1556eee781e4a4c3a1f7f53f90fa834de098c4d",
                    "typeString": "literal_string \"foo\""
                  },
                  "value": "foo"
                },
                "visibility": "private"
              }
            ],
            "scope": 685,
            "src": "1273:121:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 109,
            "linearizedBaseContracts": [
              109
            ],
            "name": "auction",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 42,
                "name": "highestBidder",
                "nodeType": "VariableDeclaration",
                "scope": 109,
                "src": "1422:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 41,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "1422:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 44,
                "name": "highestBid",
                "nodeType": "VariableDeclaration",
                "scope": 109,
                "src": "1450:15:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 43,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "1450:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 48,
                "name": "refunds",
                "nodeType": "VariableDeclaration",
                "scope": 109,
                "src": "1472:32:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 47,
                  "keyType": {
                    "id": 45,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1480:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "1472:24:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 46,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1491:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 81,
                  "nodeType": "Block",
                  "src": "1545:277:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 55,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 52,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 699,
                                "src": "1564:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 53,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1564:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 54,
                              "name": "highestBid",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 44,
                              "src": "1577:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "1564:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 51,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "1556:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 56,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1556:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 57,
                      "nodeType": "ExpressionStatement",
                      "src": "1556:32:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 62,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 58,
                          "name": "highestBidder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "1605:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 60,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1630:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1622:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 61,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1622:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1605:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 70,
                      "nodeType": "IfStatement",
                      "src": "1601:142:0",
                      "trueBody": {
                        "id": 69,
                        "nodeType": "Block",
                        "src": "1634:109:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 67,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 63,
                                  "name": "refunds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48,
                                  "src": "1649:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 65,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 64,
                                  "name": "highestBidder",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 42,
                                  "src": "1657:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "1649:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "+=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "id": 66,
                                "name": "highestBid",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 44,
                                "src": "1675:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1649:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 68,
                            "nodeType": "ExpressionStatement",
                            "src": "1649:36:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 74,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 71,
                          "name": "highestBidder",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "1755:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 72,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 699,
                            "src": "1771:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 73,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1771:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1755:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 75,
                      "nodeType": "ExpressionStatement",
                      "src": "1755:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 76,
                          "name": "highestBid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44,
                          "src": "1792:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 77,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 699,
                            "src": "1805:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1805:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "1792:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 80,
                      "nodeType": "ExpressionStatement",
                      "src": "1792:22:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 82,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "bid",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 49,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1525:2:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 50,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1545:0:0"
                },
                "scope": 109,
                "src": "1513:309:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 107,
                  "nodeType": "Block",
                  "src": "1865:124:0",
                  "statements": [
                    {
                      "assignments": [
                        86
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 86,
                          "name": "refund",
                          "nodeType": "VariableDeclaration",
                          "scope": 108,
                          "src": "1876:11:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 85,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "1876:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 91,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 87,
                          "name": "refunds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48,
                          "src": "1890:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 90,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 88,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 699,
                            "src": "1898:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 89,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1898:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1890:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "1876:33:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 97,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 92,
                            "name": "refunds",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48,
                            "src": "1920:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 95,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 93,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "1928:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 94,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1928:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "1920:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 96,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1942:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "1920:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 98,
                      "nodeType": "ExpressionStatement",
                      "src": "1920:23:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 104,
                            "name": "refund",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 86,
                            "src": "1974:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 99,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "1954:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 102,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "1954:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1954:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1954:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 106,
                      "nodeType": "ExpressionStatement",
                      "src": "1954:27:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 108,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "withdrawRefund",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 83,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1853:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 84,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1865:0:0"
                },
                "scope": 109,
                "src": "1830:159:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              }
            ],
            "scope": 685,
            "src": "1398:594:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "@title SafeMath\n@dev Math operations with safety checks that throw on error",
            "fullyImplemented": true,
            "id": 201,
            "linearizedBaseContracts": [
              201
            ],
            "name": "SafeMath",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 141,
                  "nodeType": "Block",
                  "src": "2250:105:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 120,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 118,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 111,
                          "src": "2261:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2266:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "2261:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 124,
                      "nodeType": "IfStatement",
                      "src": "2257:37:0",
                      "trueBody": {
                        "id": 123,
                        "nodeType": "Block",
                        "src": "2269:25:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 121,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2285:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "functionReturnParameters": 117,
                            "id": 122,
                            "nodeType": "Return",
                            "src": "2278:8:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 125,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 116,
                          "src": "2300:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 128,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 126,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 111,
                            "src": "2304:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 127,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 113,
                            "src": "2308:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2304:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2300:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 130,
                      "nodeType": "ExpressionStatement",
                      "src": "2300:9:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 136,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 134,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 132,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 116,
                                "src": "2323:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 133,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 111,
                                "src": "2327:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2323:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 135,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 113,
                              "src": "2332:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2323:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 131,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 688,
                          "src": "2316:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 137,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2316:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 138,
                      "nodeType": "ExpressionStatement",
                      "src": "2316:18:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 139,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 116,
                        "src": "2348:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 117,
                      "id": 140,
                      "nodeType": "Return",
                      "src": "2341:8:0"
                    }
                  ]
                },
                "documentation": "@dev Multiplies two numbers, throws on overflow.",
                "id": 142,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "mul",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 114,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 111,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 142,
                      "src": "2194:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 110,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2194:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 113,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 142,
                      "src": "2205:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 112,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2205:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2193:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 117,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 116,
                      "name": "c",
                      "nodeType": "VariableDeclaration",
                      "scope": 142,
                      "src": "2239:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 115,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2239:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2238:11:0"
                },
                "scope": 201,
                "src": "2181:174:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 155,
                  "nodeType": "Block",
                  "src": "2509:210:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 153,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 151,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 144,
                          "src": "2708:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 152,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 146,
                          "src": "2712:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2708:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 150,
                      "id": 154,
                      "nodeType": "Return",
                      "src": "2701:12:0"
                    }
                  ]
                },
                "documentation": "@dev Integer division of two numbers, truncating the quotient.",
                "id": 156,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 147,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 144,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 156,
                      "src": "2455:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 143,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2455:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 146,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 156,
                      "src": "2466:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 145,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2454:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 150,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 149,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 156,
                      "src": "2500:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 148,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2500:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2499:9:0"
                },
                "scope": 201,
                "src": "2442:277:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 175,
                  "nodeType": "Block",
                  "src": "2903:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 168,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 166,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 160,
                              "src": "2917:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 167,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 158,
                              "src": "2922:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2917:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 165,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 688,
                          "src": "2910:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2910:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 170,
                      "nodeType": "ExpressionStatement",
                      "src": "2910:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 171,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 158,
                          "src": "2938:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 172,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 160,
                          "src": "2942:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2938:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 164,
                      "id": 174,
                      "nodeType": "Return",
                      "src": "2931:12:0"
                    }
                  ]
                },
                "documentation": "@dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).",
                "id": 176,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 161,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 158,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 176,
                      "src": "2849:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 157,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2849:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 160,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 176,
                      "src": "2860:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 159,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2860:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2848:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 164,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 163,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 176,
                      "src": "2894:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 162,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2894:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2893:9:0"
                },
                "scope": 201,
                "src": "2836:113:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 199,
                  "nodeType": "Block",
                  "src": "3085:58:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 189,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 185,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 183,
                          "src": "3092:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 188,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 186,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 178,
                            "src": "3096:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 187,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 180,
                            "src": "3100:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3096:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3092:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 190,
                      "nodeType": "ExpressionStatement",
                      "src": "3092:9:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 194,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 192,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 183,
                              "src": "3115:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 193,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 178,
                              "src": "3120:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3115:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 191,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 688,
                          "src": "3108:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 195,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3108:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 196,
                      "nodeType": "ExpressionStatement",
                      "src": "3108:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 197,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 183,
                        "src": "3136:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 184,
                      "id": 198,
                      "nodeType": "Return",
                      "src": "3129:8:0"
                    }
                  ]
                },
                "documentation": "@dev Adds two numbers, throws on overflow.",
                "id": 200,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 181,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 178,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 200,
                      "src": "3029:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 177,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3029:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 180,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 200,
                      "src": "3040:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 179,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3040:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3028:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 184,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 183,
                      "name": "c",
                      "nodeType": "VariableDeclaration",
                      "scope": 200,
                      "src": "3074:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 182,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3074:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3073:11:0"
                },
                "scope": 201,
                "src": "3016:127:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 685,
            "src": "2090:1056:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title ERC20Basic\n@dev Simpler version of ERC20 interface\n@dev see https://github.com/ethereum/EIPs/issues/179",
            "fullyImplemented": false,
            "id": 231,
            "linearizedBaseContracts": [
              231
            ],
            "name": "ERC20Basic",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "documentation": null,
                "id": 206,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 202,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3330:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 205,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 204,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 206,
                      "src": "3354:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 203,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3354:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3353:9:0"
                },
                "scope": 231,
                "src": "3310:53:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 213,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 209,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 208,
                      "name": "who",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "3386:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 207,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3386:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3385:13:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 212,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 211,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "3420:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 210,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3420:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3419:9:0"
                },
                "scope": 231,
                "src": "3367:62:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 222,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 215,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3451:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 214,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3451:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 217,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3463:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3463:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3450:27:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 221,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 220,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3494:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 219,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3494:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3493:6:0"
                },
                "scope": 231,
                "src": "3433:67:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 230,
                "name": "Transfer",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 229,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 224,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3519:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 223,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3519:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 226,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3541:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 225,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3541:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 228,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3561:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 227,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3561:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3518:57:0"
                },
                "src": "3504:72:0"
              }
            ],
            "scope": 685,
            "src": "3285:294:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 232,
                  "name": "ERC20Basic",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 231,
                  "src": "3694:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Basic_$231",
                    "typeString": "contract ERC20Basic"
                  }
                },
                "id": 233,
                "nodeType": "InheritanceSpecifier",
                "src": "3694:10:0"
              }
            ],
            "contractDependencies": [
              231
            ],
            "contractKind": "contract",
            "documentation": "@title ERC20 interface\n@dev see https://github.com/ethereum/EIPs/issues/20",
            "fullyImplemented": false,
            "id": 271,
            "linearizedBaseContracts": [
              271,
              231
            ],
            "name": "ERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "documentation": null,
                "id": 242,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 238,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 235,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 242,
                      "src": "3729:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 234,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3729:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 237,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 242,
                      "src": "3744:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 236,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3744:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3728:32:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 241,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 240,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 242,
                      "src": "3782:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 239,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3782:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3781:9:0"
                },
                "scope": 271,
                "src": "3710:81:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 253,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 249,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 244,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "3817:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 243,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3817:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 246,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "3831:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 245,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3831:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 248,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "3843:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 247,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3843:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3816:41:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 252,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 251,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 253,
                      "src": "3874:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 250,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3874:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3873:6:0"
                },
                "scope": 271,
                "src": "3795:85:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 262,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 258,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 255,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 262,
                      "src": "3901:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 254,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3901:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 257,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 262,
                      "src": "3918:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 256,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3918:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3900:32:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 261,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 260,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 262,
                      "src": "3949:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 259,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "3949:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3948:6:0"
                },
                "scope": 271,
                "src": "3884:71:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 270,
                "name": "Approval",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 269,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 264,
                      "indexed": true,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 270,
                      "src": "3974:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 263,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3974:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 266,
                      "indexed": true,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 270,
                      "src": "3997:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 265,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3997:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 268,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 270,
                      "src": "4022:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 267,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4022:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3973:63:0"
                },
                "src": "3959:78:0"
              }
            ],
            "scope": 685,
            "src": "3676:364:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 272,
                  "name": "ERC20Basic",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 231,
                  "src": "4161:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Basic_$231",
                    "typeString": "contract ERC20Basic"
                  }
                },
                "id": 273,
                "nodeType": "InheritanceSpecifier",
                "src": "4161:10:0"
              }
            ],
            "contractDependencies": [
              231
            ],
            "contractKind": "contract",
            "documentation": "@title Basic token\n@dev Basic version of StandardToken, with no allowances.",
            "fullyImplemented": true,
            "id": 363,
            "linearizedBaseContracts": [
              363,
              231
            ],
            "name": "BasicToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 276,
                "libraryName": {
                  "contractScope": null,
                  "id": 274,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 201,
                  "src": "4183:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$201",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "4177:27:0",
                "typeName": {
                  "id": 275,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4196:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 280,
                "name": "balances",
                "nodeType": "VariableDeclaration",
                "scope": 363,
                "src": "4210:36:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 279,
                  "keyType": {
                    "id": 277,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4218:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "4210:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 278,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4229:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 282,
                "name": "totalSupply_",
                "nodeType": "VariableDeclaration",
                "scope": 363,
                "src": "4253:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 281,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4253:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 289,
                  "nodeType": "Block",
                  "src": "4392:32:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 287,
                        "name": "totalSupply_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 282,
                        "src": "4406:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 286,
                      "id": 288,
                      "nodeType": "Return",
                      "src": "4399:19:0"
                    }
                  ]
                },
                "documentation": "@dev total number of tokens in existence",
                "id": 290,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 283,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4359:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 286,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 285,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 290,
                      "src": "4383:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 284,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4383:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4382:9:0"
                },
                "scope": 363,
                "src": "4339:85:0",
                "stateMutability": "view",
                "superFunction": 206,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 349,
                  "nodeType": "Block",
                  "src": "4654:260:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 304,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 300,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 292,
                              "src": "4669:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 302,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4684:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 301,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4676:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 303,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4676:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "4669:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 299,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "4661:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 305,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4661:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 306,
                      "nodeType": "ExpressionStatement",
                      "src": "4661:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 313,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 308,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "4702:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 309,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "4712:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 312,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 310,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "4721:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 311,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "4721:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4712:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4702:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 307,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "4694:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4694:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 315,
                      "nodeType": "ExpressionStatement",
                      "src": "4694:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 327,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 316,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "4742:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 319,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 317,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "4751:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4751:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "4742:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 325,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "4790:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 320,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "4765:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 323,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 321,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "4774:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 322,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "4774:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4765:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 324,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 176,
                            "src": "4765:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 326,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4765:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4742:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 328,
                      "nodeType": "ExpressionStatement",
                      "src": "4742:55:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 338,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 329,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "4804:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 331,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 330,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "4813:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "4804:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 336,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 294,
                              "src": "4838:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 332,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "4820:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 334,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 333,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 292,
                                "src": "4829:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4820:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 335,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 200,
                            "src": "4820:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 337,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4820:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4804:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 339,
                      "nodeType": "ExpressionStatement",
                      "src": "4804:41:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 341,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "4866:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4866:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 343,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 292,
                            "src": "4878:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 344,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 294,
                            "src": "4883:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 340,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 230,
                          "src": "4857:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 345,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4857:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 346,
                      "nodeType": "EmitStatement",
                      "src": "4852:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 347,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4904:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 298,
                      "id": 348,
                      "nodeType": "Return",
                      "src": "4897:11:0"
                    }
                  ]
                },
                "documentation": "@dev transfer token for a specified address\n@param _to The address to transfer to.\n@param _value The amount to be transferred.",
                "id": 350,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 295,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 292,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 350,
                      "src": "4603:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 291,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4603:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 294,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 350,
                      "src": "4616:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 293,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4616:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4602:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 298,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 297,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 350,
                      "src": "4648:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 296,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4648:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4647:6:0"
                },
                "scope": 363,
                "src": "4585:329:0",
                "stateMutability": "nonpayable",
                "superFunction": 222,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 361,
                  "nodeType": "Block",
                  "src": "5188:36:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 357,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 280,
                          "src": "5202:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 359,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 358,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 352,
                          "src": "5211:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5202:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 356,
                      "id": 360,
                      "nodeType": "Return",
                      "src": "5195:23:0"
                    }
                  ]
                },
                "documentation": "@dev Gets the balance of the specified address.\n@param _owner The address to query the the balance of.\n@return An uint256 representing the amount owned by the passed address.",
                "id": 362,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 353,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 352,
                      "name": "_owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 362,
                      "src": "5142:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 351,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5142:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5141:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 356,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 355,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 362,
                      "src": "5179:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 354,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5179:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5178:9:0"
                },
                "scope": 363,
                "src": "5123:101:0",
                "stateMutability": "view",
                "superFunction": 213,
                "visibility": "public"
              }
            ],
            "scope": 685,
            "src": "4138:1091:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 364,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 271,
                  "src": "5537:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$271",
                    "typeString": "contract ERC20"
                  }
                },
                "id": 365,
                "nodeType": "InheritanceSpecifier",
                "src": "5537:5:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 366,
                  "name": "BasicToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 363,
                  "src": "5544:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_BasicToken_$363",
                    "typeString": "contract BasicToken"
                  }
                },
                "id": 367,
                "nodeType": "InheritanceSpecifier",
                "src": "5544:10:0"
              }
            ],
            "contractDependencies": [
              231,
              271,
              363
            ],
            "contractKind": "contract",
            "documentation": "@title Standard ERC20 token\n\n * @dev Implementation of the basic standard token.\n@dev https://github.com/ethereum/EIPs/issues/20\n@dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol",
            "fullyImplemented": true,
            "id": 605,
            "linearizedBaseContracts": [
              605,
              363,
              271,
              231
            ],
            "name": "StandardToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 373,
                "name": "allowed",
                "nodeType": "VariableDeclaration",
                "scope": 605,
                "src": "5562:66:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 372,
                  "keyType": {
                    "id": 368,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5571:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "5562:49:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 371,
                    "keyType": {
                      "id": 369,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "5591:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "5582:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 370,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5602:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 458,
                  "nodeType": "Block",
                  "src": "6002:366:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 389,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 385,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 377,
                              "src": "6017:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 387,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6032:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 386,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "6024:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 388,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6024:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "6017:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 384,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "6009:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 390,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6009:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 391,
                      "nodeType": "ExpressionStatement",
                      "src": "6009:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 397,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 393,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 379,
                              "src": "6050:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 394,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "6060:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 396,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 395,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "6069:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6060:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6050:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 392,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "6042:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 398,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6042:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 399,
                      "nodeType": "ExpressionStatement",
                      "src": "6042:34:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 408,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 401,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 379,
                              "src": "6091:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 402,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 373,
                                  "src": "6101:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 404,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 403,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 375,
                                  "src": "6109:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6101:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 407,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 405,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "6116:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 406,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6116:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6101:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6091:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 400,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            702,
                            703
                          ],
                          "referencedDeclaration": 702,
                          "src": "6083:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 409,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6083:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 410,
                      "nodeType": "ExpressionStatement",
                      "src": "6083:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 420,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 411,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "6137:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 413,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 412,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "6146:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6137:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 418,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 379,
                              "src": "6175:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 414,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "6155:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 416,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 415,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 375,
                                "src": "6164:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6155:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 417,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 176,
                            "src": "6155:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 419,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6155:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6137:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 421,
                      "nodeType": "ExpressionStatement",
                      "src": "6137:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 431,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 422,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "6189:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 424,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 423,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 377,
                            "src": "6198:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6189:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 429,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 379,
                              "src": "6223:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 425,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 280,
                                "src": "6205:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 427,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 426,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 377,
                                "src": "6214:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6205:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 428,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 200,
                            "src": "6205:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 430,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6205:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6189:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 432,
                      "nodeType": "ExpressionStatement",
                      "src": "6189:41:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 433,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "6237:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 437,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 434,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 375,
                              "src": "6245:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6237:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 438,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 435,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "6252:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 436,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "6252:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6237:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 446,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 379,
                              "src": "6297:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 439,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 373,
                                  "src": "6266:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 441,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 440,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 375,
                                  "src": "6274:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6266:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 444,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 442,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "6281:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 443,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6281:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6266:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 445,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 176,
                            "src": "6266:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 447,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6266:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6237:67:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 449,
                      "nodeType": "ExpressionStatement",
                      "src": "6237:67:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 451,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 375,
                            "src": "6325:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 452,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 377,
                            "src": "6332:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 453,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 379,
                            "src": "6337:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 450,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 230,
                          "src": "6316:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 454,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6316:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 455,
                      "nodeType": "EmitStatement",
                      "src": "6311:33:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 456,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6358:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 383,
                      "id": 457,
                      "nodeType": "Return",
                      "src": "6351:11:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer tokens from one address to another\n@param _from address The address which you want to send tokens from\n@param _to address The address which you want to transfer to\n@param _value uint256 the amount of tokens to be transferred",
                "id": 459,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 380,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 375,
                      "name": "_from",
                      "nodeType": "VariableDeclaration",
                      "scope": 459,
                      "src": "5936:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 374,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5936:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 377,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 459,
                      "src": "5951:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 376,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5951:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 379,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 459,
                      "src": "5964:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 378,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5964:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5935:44:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 383,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 382,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 459,
                      "src": "5996:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 381,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "5996:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5995:6:0"
                },
                "scope": 605,
                "src": "5914:454:0",
                "stateMutability": "nonpayable",
                "superFunction": 253,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 486,
                  "nodeType": "Block",
                  "src": "7076:119:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 475,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 468,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "7083:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 472,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 469,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 699,
                                "src": "7091:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 470,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7091:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7083:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 473,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 471,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "7103:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7083:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 474,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 463,
                          "src": "7115:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7083:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 476,
                      "nodeType": "ExpressionStatement",
                      "src": "7083:38:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 478,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "7142:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 479,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7142:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 480,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 461,
                            "src": "7154:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 481,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 463,
                            "src": "7164:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 477,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 270,
                          "src": "7133:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 482,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7133:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 483,
                      "nodeType": "EmitStatement",
                      "src": "7128:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 484,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7185:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 467,
                      "id": 485,
                      "nodeType": "Return",
                      "src": "7178:11:0"
                    }
                  ]
                },
                "documentation": "@dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\nand the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\nrace condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n@param _spender The address which will spend the funds.\n@param _value The amount of tokens to be spent.",
                "id": 487,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 464,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 461,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 487,
                      "src": "7020:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 460,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7020:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 463,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 487,
                      "src": "7038:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 462,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7038:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7019:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 467,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 466,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 487,
                      "src": "7070:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 465,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7070:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7069:6:0"
                },
                "scope": 605,
                "src": "7003:192:0",
                "stateMutability": "nonpayable",
                "superFunction": 262,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 502,
                  "nodeType": "Block",
                  "src": "7605:45:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 496,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 373,
                            "src": "7619:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 498,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 497,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 489,
                            "src": "7627:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7619:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 500,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 499,
                          "name": "_spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 491,
                          "src": "7635:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7619:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 495,
                      "id": 501,
                      "nodeType": "Return",
                      "src": "7612:32:0"
                    }
                  ]
                },
                "documentation": "@dev Function to check the amount of tokens that an owner allowed to a spender.\n@param _owner address The address which owns the funds.\n@param _spender address The address which will spend the funds.\n@return A uint256 specifying the amount of tokens still available for the spender.",
                "id": 503,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 492,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 489,
                      "name": "_owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 503,
                      "src": "7541:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 488,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7541:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 491,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 503,
                      "src": "7557:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 490,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7557:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7540:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 495,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 494,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 503,
                      "src": "7596:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 493,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7596:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7595:9:0"
                },
                "scope": 605,
                "src": "7522:128:0",
                "stateMutability": "view",
                "superFunction": 242,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 543,
                  "nodeType": "Block",
                  "src": "8203:182:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 527,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 512,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 373,
                              "src": "8210:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 516,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 513,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 699,
                                "src": "8218:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 514,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8218:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8210:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 517,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 515,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 505,
                            "src": "8230:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "8210:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 525,
                              "name": "_addedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 507,
                              "src": "8276:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 518,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 373,
                                  "src": "8242:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 521,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 519,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 699,
                                    "src": "8250:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 520,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "8250:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8242:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 523,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 522,
                                "name": "_spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 505,
                                "src": "8262:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8242:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 200,
                            "src": "8242:33:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 526,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8242:46:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8210:78:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 528,
                      "nodeType": "ExpressionStatement",
                      "src": "8210:78:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 530,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "8309:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8309:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 532,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 505,
                            "src": "8321:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 533,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 373,
                                "src": "8331:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 536,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 534,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "8339:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "8339:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8331:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 538,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 537,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 505,
                              "src": "8351:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8331:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 529,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 270,
                          "src": "8300:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 539,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8300:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 540,
                      "nodeType": "EmitStatement",
                      "src": "8295:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 541,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8375:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 511,
                      "id": 542,
                      "nodeType": "Return",
                      "src": "8368:11:0"
                    }
                  ]
                },
                "documentation": "@dev Increase the amount of tokens that an owner allowed to a spender.\n\n   * approve should be called when allowed[_spender] == 0. To increment\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\n@param _spender The address which will spend the funds.\n@param _addedValue The amount of tokens to increase the allowance by.",
                "id": 544,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "increaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 508,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 505,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 544,
                      "src": "8145:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 504,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8145:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 507,
                      "name": "_addedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 544,
                      "src": "8163:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 506,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8163:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8144:36:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 511,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 510,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 544,
                      "src": "8197:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 509,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8197:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8196:6:0"
                },
                "scope": 605,
                "src": "8119:266:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 603,
                  "nodeType": "Block",
                  "src": "8954:323:0",
                  "statements": [
                    {
                      "assignments": [
                        554
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 554,
                          "name": "oldValue",
                          "nodeType": "VariableDeclaration",
                          "scope": 604,
                          "src": "8961:13:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 553,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "8961:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 561,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 555,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 373,
                            "src": "8977:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 558,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 556,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "8985:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 557,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8985:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8977:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 560,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 559,
                          "name": "_spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 546,
                          "src": "8997:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8977:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "8961:45:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 564,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 562,
                          "name": "_subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 548,
                          "src": "9017:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 563,
                          "name": "oldValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 554,
                          "src": "9036:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9017:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 587,
                        "nodeType": "Block",
                        "src": "9102:79:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 585,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 575,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 373,
                                    "src": "9111:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 579,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 576,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 699,
                                      "src": "9119:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 577,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9119:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9111:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 580,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 578,
                                  "name": "_spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 546,
                                  "src": "9131:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9111:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 583,
                                    "name": "_subtractedValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 548,
                                    "src": "9156:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 581,
                                    "name": "oldValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 554,
                                    "src": "9143:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 582,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 176,
                                  "src": "9143:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 584,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9143:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9111:62:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 586,
                            "nodeType": "ExpressionStatement",
                            "src": "9111:62:0"
                          }
                        ]
                      },
                      "id": 588,
                      "nodeType": "IfStatement",
                      "src": "9013:168:0",
                      "trueBody": {
                        "id": 574,
                        "nodeType": "Block",
                        "src": "9046:50:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 572,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 565,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 373,
                                    "src": "9055:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 569,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 566,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 699,
                                      "src": "9063:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 567,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9063:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9055:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 570,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 568,
                                  "name": "_spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 546,
                                  "src": "9075:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9055:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 571,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9087:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9055:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 573,
                            "nodeType": "ExpressionStatement",
                            "src": "9055:33:0"
                          }
                        ]
                      }
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 590,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "9201:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 591,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9201:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 592,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 546,
                            "src": "9213:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 593,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 373,
                                "src": "9223:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 596,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 594,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 699,
                                  "src": "9231:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 595,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "9231:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9223:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 598,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 597,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 546,
                              "src": "9243:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9223:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 589,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 270,
                          "src": "9192:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 599,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9192:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 600,
                      "nodeType": "EmitStatement",
                      "src": "9187:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 601,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9267:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 552,
                      "id": 602,
                      "nodeType": "Return",
                      "src": "9260:11:0"
                    }
                  ]
                },
                "documentation": "@dev Decrease the amount of tokens that an owner allowed to a spender.\n\n   * approve should be called when allowed[_spender] == 0. To decrement\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\n@param _spender The address which will spend the funds.\n@param _subtractedValue The amount of tokens to decrease the allowance by.",
                "id": 604,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "decreaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 549,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 546,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 604,
                      "src": "8891:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 545,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8891:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 548,
                      "name": "_subtractedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 604,
                      "src": "8909:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 547,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8909:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8890:41:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 552,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 551,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 604,
                      "src": "8948:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 550,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8948:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8947:6:0"
                },
                "scope": 605,
                "src": "8865:412:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 685,
            "src": "5511:3771:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 606,
                  "name": "StandardToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 605,
                  "src": "9798:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StandardToken_$605",
                    "typeString": "contract StandardToken"
                  }
                },
                "id": 607,
                "nodeType": "InheritanceSpecifier",
                "src": "9798:13:0"
              }
            ],
            "contractDependencies": [
              231,
              271,
              363,
              605
            ],
            "contractKind": "contract",
            "documentation": "NOTE:\nThe following variables are OPTIONAL vanities. One does not have to include them.\nThey allow one to customise the token contract & in no way influences the core functionality.\nSome wallets/interfaces might not even bother to look at this information.",
            "fullyImplemented": true,
            "id": 684,
            "linearizedBaseContracts": [
              684,
              605,
              363,
              271,
              231
            ],
            "name": "Asiandragon",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "id": 610,
                "name": "name",
                "nodeType": "VariableDeclaration",
                "scope": 684,
                "src": "9819:44:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 608,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9819:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "417369616e20447261676f6e",
                  "id": 609,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9849:14:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_07df81a58b12b88b3edd6f19219b1638d2dddcd2b9405eee104a5ffdaaa21d5d",
                    "typeString": "literal_string \"Asian Dragon\""
                  },
                  "value": "Asian Dragon"
                },
                "visibility": "public"
              },
              {
                "constant": true,
                "id": 613,
                "name": "symbol",
                "nodeType": "VariableDeclaration",
                "scope": 684,
                "src": "9868:36:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 611,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9868:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "4144",
                  "id": 612,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9900:4:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_24655a250d8b099f3ae151325f4c6e6cf9aa4773ecfbe7a485b2e8b7107261a5",
                    "typeString": "literal_string \"AD\""
                  },
                  "value": "AD"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 616,
                "name": "version",
                "nodeType": "VariableDeclaration",
                "scope": 684,
                "src": "9909:30:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 614,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9909:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "48312e30",
                  "id": 615,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9933:6:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_2061acbe2bfff904cf923f26d4752ccdb4cd37aa82d886cf0baf19b6ea55e9d6",
                    "typeString": "literal_string \"H1.0\""
                  },
                  "value": "H1.0"
                },
                "visibility": "public"
              },
              {
                "constant": true,
                "id": 619,
                "name": "decimals",
                "nodeType": "VariableDeclaration",
                "scope": 684,
                "src": "10003:34:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 617,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "10003:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "38",
                  "id": 618,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "10036:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_8_by_1",
                    "typeString": "int_const 8"
                  },
                  "value": "8"
                },
                "visibility": "public"
              },
              {
                "constant": true,
                "id": 629,
                "name": "INITIAL_SUPPLY",
                "nodeType": "VariableDeclaration",
                "scope": 684,
                "src": "10046:78:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 620,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "10046:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "commonType": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "id": 628,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "leftExpression": {
                    "argumentTypes": null,
                    "hexValue": "353030303030303030",
                    "id": 621,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "10087:9:0",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_500000000_by_1",
                      "typeString": "int_const 500000000"
                    },
                    "value": "500000000"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "argumentTypes": null,
                    "components": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130",
                          "id": 622,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10100:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 624,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 619,
                              "src": "10114:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            ],
                            "id": 623,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "10106:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": "uint256"
                          },
                          "id": 625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10106:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10100:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "id": 627,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "10099:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "10087:37:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 650,
                  "nodeType": "Block",
                  "src": "10154:139:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 634,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 632,
                          "name": "totalSupply_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 282,
                          "src": "10161:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 633,
                          "name": "INITIAL_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 629,
                          "src": "10176:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10161:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 635,
                      "nodeType": "ExpressionStatement",
                      "src": "10161:29:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 636,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "10197:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 639,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 637,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "10206:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 638,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "10206:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10197:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 640,
                          "name": "INITIAL_SUPPLY",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 629,
                          "src": "10220:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10197:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 642,
                      "nodeType": "ExpressionStatement",
                      "src": "10197:37:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "307830",
                            "id": 644,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10255:3:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0x0"
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 645,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "10260:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 646,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "10260:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 647,
                            "name": "INITIAL_SUPPLY",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 629,
                            "src": "10272:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 643,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 230,
                          "src": "10246:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 648,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10246:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 649,
                      "nodeType": "EmitStatement",
                      "src": "10241:46:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 651,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 630,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10144:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 631,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10154:0:0"
                },
                "scope": 684,
                "src": "10133:160:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 682,
                  "nodeType": "Block",
                  "src": "10397:165:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 656,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 280,
                            "src": "10405:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 659,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 657,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 699,
                              "src": "10414:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 658,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "10414:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "10405:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 660,
                          "name": "_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 653,
                          "src": "10429:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10405:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 681,
                      "nodeType": "IfStatement",
                      "src": "10402:149:0",
                      "trueBody": {
                        "id": 680,
                        "nodeType": "Block",
                        "src": "10438:113:0",
                        "statements": [
                          {
                            "condition": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 666,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 653,
                                    "src": "10470:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 662,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 699,
                                        "src": "10448:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 663,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "10448:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "id": 664,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "10448:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$__$returns$_t_bool_$",
                                      "typeString": "function () payable returns (bool)"
                                    }
                                  },
                                  "id": 665,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "value",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "10448:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_setvalue_nonpayable$_t_uint256_$returns$_t_function_barecall_payable$__$returns$_t_bool_$value_$",
                                    "typeString": "function (uint256) returns (function () payable returns (bool))"
                                  }
                                },
                                "id": 667,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "10448:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_barecall_payable$__$returns$_t_bool_$value",
                                  "typeString": "function () payable returns (bool)"
                                }
                              },
                              "id": 668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "10448:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 672,
                            "nodeType": "IfStatement",
                            "src": "10445:61:0",
                            "trueBody": {
                              "id": 671,
                              "nodeType": "Block",
                              "src": "10482:24:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 669,
                                    "name": "_amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 653,
                                    "src": "10491:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 670,
                                  "nodeType": "ExpressionStatement",
                                  "src": "10491:7:0"
                                }
                              ]
                            }
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 678,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 673,
                                  "name": "balances",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 280,
                                  "src": "10512:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 676,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 674,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 699,
                                    "src": "10521:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 675,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": null,
                                  "src": "10521:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "10512:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "id": 677,
                                "name": "_amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 653,
                                "src": "10536:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "10512:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 679,
                            "nodeType": "ExpressionStatement",
                            "src": "10512:31:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": "@dev Reentrancy.",
                "id": 683,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "withdraw",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 654,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 653,
                      "name": "_amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 683,
                      "src": "10376:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 652,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10376:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10375:14:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 655,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10397:0:0"
                },
                "scope": 684,
                "src": "10358:204:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 685,
            "src": "9774:791:0"
          }
        ],
        "src": "71:10494:0"
      },
      "id": 0
    }
  }
}